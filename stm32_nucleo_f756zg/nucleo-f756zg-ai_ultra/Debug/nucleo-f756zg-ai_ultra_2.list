
nucleo-f756zg-ai_ultra_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009c50  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0007ebac  08009e20  08009e20  00019e20  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080889cc  080889cc  000a201c  2**0
                  CONTENTS
  4 .ARM          00000008  080889cc  080889cc  000989cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080889d4  080889d4  000a201c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080889d4  080889d4  000989d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080889d8  080889d8  000989d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001edc  20000000  080889dc  000a0000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  20001edc  0808a8b8  000a1edc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20001f7c  0808a958  000a1f7c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00017ad8  20002020  0808a9f8  000a2020  2**5
                  ALLOC
 12 ._user_heap_stack 00001000  20019af8  0808a9f8  000a9af8  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000a201c  2**0
                  CONTENTS, READONLY
 14 .comment      00000093  00000000  00000000  000a204c  2**0
                  CONTENTS, READONLY
 15 .debug_info   000197e1  00000000  00000000  000a20df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 000033e4  00000000  00000000  000bb8c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 000012f0  00000000  00000000  000beca8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00000e94  00000000  00000000  000bff98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_macro  0002b124  00000000  00000000  000c0e2c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line   00017bba  00000000  00000000  000ebf50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_str    0010ca16  00000000  00000000  00103b0a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_frame  0000557c  00000000  00000000  00210520  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000073  00000000  00000000  00215a9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20002020 	.word	0x20002020
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08009e08 	.word	0x08009e08

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	20002024 	.word	0x20002024
 800020c:	08009e08 	.word	0x08009e08

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295	; 0xffffffff
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295	; 0xffffffff
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295	; 0xffffffff
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <SCB_EnableICache>:
/**
  \brief   Enable I-Cache
  \details Turns on I-Cache
  */
__STATIC_INLINE void SCB_EnableICache (void)
{
 80005ac:	b480      	push	{r7}
 80005ae:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80005b0:	f3bf 8f4f 	dsb	sy
}
 80005b4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005b6:	f3bf 8f6f 	isb	sy
}
 80005ba:	bf00      	nop
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80005bc:	4b0d      	ldr	r3, [pc, #52]	; (80005f4 <SCB_EnableICache+0x48>)
 80005be:	2200      	movs	r2, #0
 80005c0:	f8c3 2250 	str.w	r2, [r3, #592]	; 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80005c4:	f3bf 8f4f 	dsb	sy
}
 80005c8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005ca:	f3bf 8f6f 	isb	sy
}
 80005ce:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80005d0:	4b08      	ldr	r3, [pc, #32]	; (80005f4 <SCB_EnableICache+0x48>)
 80005d2:	695b      	ldr	r3, [r3, #20]
 80005d4:	4a07      	ldr	r2, [pc, #28]	; (80005f4 <SCB_EnableICache+0x48>)
 80005d6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80005da:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80005dc:	f3bf 8f4f 	dsb	sy
}
 80005e0:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80005e2:	f3bf 8f6f 	isb	sy
}
 80005e6:	bf00      	nop
    __DSB();
    __ISB();
  #endif
}
 80005e8:	bf00      	nop
 80005ea:	46bd      	mov	sp, r7
 80005ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005f0:	4770      	bx	lr
 80005f2:	bf00      	nop
 80005f4:	e000ed00 	.word	0xe000ed00

080005f8 <SCB_EnableDCache>:
/**
  \brief   Enable D-Cache
  \details Turns on D-Cache
  */
__STATIC_INLINE void SCB_EnableDCache (void)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    SCB->CSSELR = 0U; /*(0U << 1U) | 0U;*/  /* Level 1 data cache */
 80005fe:	4b1f      	ldr	r3, [pc, #124]	; (800067c <SCB_EnableDCache+0x84>)
 8000600:	2200      	movs	r2, #0
 8000602:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000606:	f3bf 8f4f 	dsb	sy
}
 800060a:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800060c:	4b1b      	ldr	r3, [pc, #108]	; (800067c <SCB_EnableDCache+0x84>)
 800060e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8000612:	607b      	str	r3, [r7, #4]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	0b5b      	lsrs	r3, r3, #13
 8000618:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800061c:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800061e:	687b      	ldr	r3, [r7, #4]
 8000620:	08db      	lsrs	r3, r3, #3
 8000622:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000626:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000628:	68fb      	ldr	r3, [r7, #12]
 800062a:	015a      	lsls	r2, r3, #5
 800062c:	f643 73e0 	movw	r3, #16352	; 0x3fe0
 8000630:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000632:	68ba      	ldr	r2, [r7, #8]
 8000634:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000636:	4911      	ldr	r1, [pc, #68]	; (800067c <SCB_EnableDCache+0x84>)
 8000638:	4313      	orrs	r3, r2
 800063a:	f8c1 3260 	str.w	r3, [r1, #608]	; 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 800063e:	68bb      	ldr	r3, [r7, #8]
 8000640:	1e5a      	subs	r2, r3, #1
 8000642:	60ba      	str	r2, [r7, #8]
 8000644:	2b00      	cmp	r3, #0
 8000646:	d1ef      	bne.n	8000628 <SCB_EnableDCache+0x30>
    } while(sets-- != 0U);
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	1e5a      	subs	r2, r3, #1
 800064c:	60fa      	str	r2, [r7, #12]
 800064e:	2b00      	cmp	r3, #0
 8000650:	d1e5      	bne.n	800061e <SCB_EnableDCache+0x26>
  __ASM volatile ("dsb 0xF":::"memory");
 8000652:	f3bf 8f4f 	dsb	sy
}
 8000656:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8000658:	4b08      	ldr	r3, [pc, #32]	; (800067c <SCB_EnableDCache+0x84>)
 800065a:	695b      	ldr	r3, [r3, #20]
 800065c:	4a07      	ldr	r2, [pc, #28]	; (800067c <SCB_EnableDCache+0x84>)
 800065e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000662:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000664:	f3bf 8f4f 	dsb	sy
}
 8000668:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800066a:	f3bf 8f6f 	isb	sy
}
 800066e:	bf00      	nop

    __DSB();
    __ISB();
  #endif
}
 8000670:	bf00      	nop
 8000672:	3714      	adds	r7, #20
 8000674:	46bd      	mov	sp, r7
 8000676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800067a:	4770      	bx	lr
 800067c:	e000ed00 	.word	0xe000ed00

08000680 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000680:	b580      	push	{r7, lr}
 8000682:	b082      	sub	sp, #8
 8000684:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* Enable I-Cache---------------------------------------------------------*/
  SCB_EnableICache();
 8000686:	f7ff ff91 	bl	80005ac <SCB_EnableICache>

  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();
 800068a:	f7ff ffb5 	bl	80005f8 <SCB_EnableDCache>

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800068e:	f001 f824 	bl	80016da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000692:	f000 f95d 	bl	8000950 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000696:	f000 fabb 	bl	8000c10 <MX_GPIO_Init>
  MX_ETH_Init();
 800069a:	f000 f9e9 	bl	8000a70 <MX_ETH_Init>
  MX_USART3_UART_Init();
 800069e:	f000 fa59 	bl	8000b54 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 80006a2:	f000 fa87 	bl	8000bb4 <MX_USB_OTG_FS_PCD_Init>
  MX_CRC_Init();
 80006a6:	f000 f9c1 	bl	8000a2c <MX_CRC_Init>
  MX_TIM14_Init();
 80006aa:	f000 fa2f 	bl	8000b0c <MX_TIM14_Init>
  /* USER CODE BEGIN 2 */
  // Start Timer/Counter
  	HAL_TIM_Base_Start(&htim14);
 80006ae:	488d      	ldr	r0, [pc, #564]	; (80008e4 <main+0x264>)
 80006b0:	f003 fa0a 	bl	8003ac8 <HAL_TIM_Base_Start>

  	// Create and initialize the network
  	const ai_handle acts[] = { activations };
 80006b4:	4b8c      	ldr	r3, [pc, #560]	; (80008e8 <main+0x268>)
 80006b6:	603b      	str	r3, [r7, #0]
  	err = ai_combination_create_and_init(&combination, acts, NULL);
 80006b8:	463b      	mov	r3, r7
 80006ba:	2200      	movs	r2, #0
 80006bc:	4619      	mov	r1, r3
 80006be:	488b      	ldr	r0, [pc, #556]	; (80008ec <main+0x26c>)
 80006c0:	f004 feae 	bl	8005420 <ai_combination_create_and_init>
 80006c4:	4603      	mov	r3, r0
 80006c6:	4a8a      	ldr	r2, [pc, #552]	; (80008f0 <main+0x270>)
 80006c8:	6013      	str	r3, [r2, #0]
  	if (err.type != AI_ERROR_NONE) {
 80006ca:	4b89      	ldr	r3, [pc, #548]	; (80008f0 <main+0x270>)
 80006cc:	781b      	ldrb	r3, [r3, #0]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d010      	beq.n	80006f4 <main+0x74>
  		uart_buf_len = sprintf(uart_buf,
 80006d2:	4988      	ldr	r1, [pc, #544]	; (80008f4 <main+0x274>)
 80006d4:	4888      	ldr	r0, [pc, #544]	; (80008f8 <main+0x278>)
 80006d6:	f008 fe6b 	bl	80093b0 <siprintf>
 80006da:	4603      	mov	r3, r0
 80006dc:	461a      	mov	r2, r3
 80006de:	4b87      	ldr	r3, [pc, #540]	; (80008fc <main+0x27c>)
 80006e0:	601a      	str	r2, [r3, #0]
  				"Error: cannot create or initialize the network");
  		HAL_UART_Transmit(&huart3, (uint8_t*) uart_buf, uart_buf_len, 100);
 80006e2:	4b86      	ldr	r3, [pc, #536]	; (80008fc <main+0x27c>)
 80006e4:	681b      	ldr	r3, [r3, #0]
 80006e6:	b29a      	uxth	r2, r3
 80006e8:	2364      	movs	r3, #100	; 0x64
 80006ea:	4983      	ldr	r1, [pc, #524]	; (80008f8 <main+0x278>)
 80006ec:	4884      	ldr	r0, [pc, #528]	; (8000900 <main+0x280>)
 80006ee:	f003 fb49 	bl	8003d84 <HAL_UART_Transmit>
  		while (1)
 80006f2:	e7fe      	b.n	80006f2 <main+0x72>
  			;
  	}

  	// Retrieve the pointers to the model's input/output tensors
  	ai_input = ai_combination_inputs_get(combination, NULL);
 80006f4:	4b7d      	ldr	r3, [pc, #500]	; (80008ec <main+0x26c>)
 80006f6:	681b      	ldr	r3, [r3, #0]
 80006f8:	2100      	movs	r1, #0
 80006fa:	4618      	mov	r0, r3
 80006fc:	f004 ff04 	bl	8005508 <ai_combination_inputs_get>
 8000700:	4603      	mov	r3, r0
 8000702:	4a80      	ldr	r2, [pc, #512]	; (8000904 <main+0x284>)
 8000704:	6013      	str	r3, [r2, #0]
  	ai_output = ai_combination_outputs_get(combination, NULL);
 8000706:	4b79      	ldr	r3, [pc, #484]	; (80008ec <main+0x26c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2100      	movs	r1, #0
 800070c:	4618      	mov	r0, r3
 800070e:	f004 ff15 	bl	800553c <ai_combination_outputs_get>
 8000712:	4603      	mov	r3, r0
 8000714:	4a7c      	ldr	r2, [pc, #496]	; (8000908 <main+0x288>)
 8000716:	6013      	str	r3, [r2, #0]

  	// Retrieve the @ of the in_data/out_data buffer
  	in_data = (ai_float*) (ai_input[0].data);
 8000718:	4b7a      	ldr	r3, [pc, #488]	; (8000904 <main+0x284>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	685b      	ldr	r3, [r3, #4]
 800071e:	4a7b      	ldr	r2, [pc, #492]	; (800090c <main+0x28c>)
 8000720:	6013      	str	r3, [r2, #0]
  	out_data = (ai_float*) (ai_output[0].data);
 8000722:	4b79      	ldr	r3, [pc, #484]	; (8000908 <main+0x288>)
 8000724:	681b      	ldr	r3, [r3, #0]
 8000726:	685b      	ldr	r3, [r3, #4]
 8000728:	4a79      	ldr	r2, [pc, #484]	; (8000910 <main+0x290>)
 800072a:	6013      	str	r3, [r2, #0]

  	// online training initialization
  	ot_init(0.001f, 0.5f);
 800072c:	eef6 0a00 	vmov.f32	s1, #96	; 0x3f000000  0.5
 8000730:	ed9f 0a78 	vldr	s0, [pc, #480]	; 8000914 <main+0x294>
 8000734:	f000 fc1c 	bl	8000f70 <ot_init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // Receive input label into y_real through UART
	  		if (HAL_UART_Receive(&huart3, (uint8_t*) (&y_real), sizeof(float),
 8000738:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800073c:	2204      	movs	r2, #4
 800073e:	4976      	ldr	r1, [pc, #472]	; (8000918 <main+0x298>)
 8000740:	486f      	ldr	r0, [pc, #444]	; (8000900 <main+0x280>)
 8000742:	f003 fba2 	bl	8003e8a <HAL_UART_Receive>
 8000746:	4603      	mov	r3, r0
 8000748:	2b00      	cmp	r3, #0
 800074a:	d011      	beq.n	8000770 <main+0xf0>
	  				HAL_MAX_DELAY) != HAL_OK) {
	  			uart_buf_len =
	  					sprintf(uart_buf,
 800074c:	4973      	ldr	r1, [pc, #460]	; (800091c <main+0x29c>)
 800074e:	486a      	ldr	r0, [pc, #424]	; (80008f8 <main+0x278>)
 8000750:	f008 fe2e 	bl	80093b0 <siprintf>
 8000754:	4603      	mov	r3, r0
 8000756:	461a      	mov	r2, r3
	  			uart_buf_len =
 8000758:	4b68      	ldr	r3, [pc, #416]	; (80008fc <main+0x27c>)
 800075a:	601a      	str	r2, [r3, #0]
	  							"Error: fail to read input label into y_real through UART\r\n");
	  			HAL_UART_Transmit(&huart3, (uint8_t*) uart_buf, uart_buf_len,
 800075c:	4b67      	ldr	r3, [pc, #412]	; (80008fc <main+0x27c>)
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	b29a      	uxth	r2, r3
 8000762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000766:	4964      	ldr	r1, [pc, #400]	; (80008f8 <main+0x278>)
 8000768:	4865      	ldr	r0, [pc, #404]	; (8000900 <main+0x280>)
 800076a:	f003 fb0b 	bl	8003d84 <HAL_UART_Transmit>
	  					HAL_MAX_DELAY);
	  			while (1)
 800076e:	e7fe      	b.n	800076e <main+0xee>
	  				;
	  		}

	  		// Receive input data into in_data array through UART
	  		if (HAL_UART_Receive(&huart3, (uint8_t*) in_data,
 8000770:	4b66      	ldr	r3, [pc, #408]	; (800090c <main+0x28c>)
 8000772:	6819      	ldr	r1, [r3, #0]
 8000774:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000778:	f640 525c 	movw	r2, #3420	; 0xd5c
 800077c:	4860      	ldr	r0, [pc, #384]	; (8000900 <main+0x280>)
 800077e:	f003 fb84 	bl	8003e8a <HAL_UART_Receive>
 8000782:	4603      	mov	r3, r0
 8000784:	2b00      	cmp	r3, #0
 8000786:	d011      	beq.n	80007ac <main+0x12c>
	  				AI_COMBINATION_IN_1_SIZE_BYTES, HAL_MAX_DELAY) != HAL_OK) {
	  			uart_buf_len =
	  					sprintf(uart_buf,
 8000788:	4965      	ldr	r1, [pc, #404]	; (8000920 <main+0x2a0>)
 800078a:	485b      	ldr	r0, [pc, #364]	; (80008f8 <main+0x278>)
 800078c:	f008 fe10 	bl	80093b0 <siprintf>
 8000790:	4603      	mov	r3, r0
 8000792:	461a      	mov	r2, r3
	  			uart_buf_len =
 8000794:	4b59      	ldr	r3, [pc, #356]	; (80008fc <main+0x27c>)
 8000796:	601a      	str	r2, [r3, #0]
	  							"Error: fail to read input data into in_data array through UART\r\n");
	  			HAL_UART_Transmit(&huart3, (uint8_t*) uart_buf, uart_buf_len,
 8000798:	4b58      	ldr	r3, [pc, #352]	; (80008fc <main+0x27c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	b29a      	uxth	r2, r3
 800079e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007a2:	4955      	ldr	r1, [pc, #340]	; (80008f8 <main+0x278>)
 80007a4:	4856      	ldr	r0, [pc, #344]	; (8000900 <main+0x280>)
 80007a6:	f003 faed 	bl	8003d84 <HAL_UART_Transmit>
	  					HAL_MAX_DELAY);
	  			while (1)
 80007aa:	e7fe      	b.n	80007aa <main+0x12a>
	  				;
	  		}

	  		// Receive inc_flag through UART
	  		if (HAL_UART_Receive(&huart3, (uint8_t*) (&ot_flag), sizeof(float),
 80007ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007b0:	2204      	movs	r2, #4
 80007b2:	495c      	ldr	r1, [pc, #368]	; (8000924 <main+0x2a4>)
 80007b4:	4852      	ldr	r0, [pc, #328]	; (8000900 <main+0x280>)
 80007b6:	f003 fb68 	bl	8003e8a <HAL_UART_Receive>
 80007ba:	4603      	mov	r3, r0
 80007bc:	2b00      	cmp	r3, #0
 80007be:	d011      	beq.n	80007e4 <main+0x164>
	  				HAL_MAX_DELAY) != HAL_OK) {
	  			uart_buf_len =
	  					sprintf(uart_buf,
 80007c0:	4959      	ldr	r1, [pc, #356]	; (8000928 <main+0x2a8>)
 80007c2:	484d      	ldr	r0, [pc, #308]	; (80008f8 <main+0x278>)
 80007c4:	f008 fdf4 	bl	80093b0 <siprintf>
 80007c8:	4603      	mov	r3, r0
 80007ca:	461a      	mov	r2, r3
	  			uart_buf_len =
 80007cc:	4b4b      	ldr	r3, [pc, #300]	; (80008fc <main+0x27c>)
 80007ce:	601a      	str	r2, [r3, #0]
	  							"Error: fail to read inc_flag through UART\r\n");
	  			HAL_UART_Transmit(&huart3, (uint8_t*) uart_buf, uart_buf_len,
 80007d0:	4b4a      	ldr	r3, [pc, #296]	; (80008fc <main+0x27c>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	b29a      	uxth	r2, r3
 80007d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80007da:	4947      	ldr	r1, [pc, #284]	; (80008f8 <main+0x278>)
 80007dc:	4848      	ldr	r0, [pc, #288]	; (8000900 <main+0x280>)
 80007de:	f003 fad1 	bl	8003d84 <HAL_UART_Transmit>
	  					HAL_MAX_DELAY);
	  			while (1)
 80007e2:	e7fe      	b.n	80007e2 <main+0x162>
	  				;
	  		}

	  		// Start Timer/Counter
	  		HAL_TIM_Base_Start(&htim14);
 80007e4:	483f      	ldr	r0, [pc, #252]	; (80008e4 <main+0x264>)
 80007e6:	f003 f96f 	bl	8003ac8 <HAL_TIM_Base_Start>

	  		// Get start time stamp
	  		t_stamp_s_infe = htim14.Instance->CNT;
 80007ea:	4b3e      	ldr	r3, [pc, #248]	; (80008e4 <main+0x264>)
 80007ec:	681b      	ldr	r3, [r3, #0]
 80007ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80007f0:	4a4e      	ldr	r2, [pc, #312]	; (800092c <main+0x2ac>)
 80007f2:	6013      	str	r3, [r2, #0]

	  		// Perform the inference
	  		n_batch = ai_combination_run(combination, &ai_input[0], &ai_output[0]);
 80007f4:	4b3d      	ldr	r3, [pc, #244]	; (80008ec <main+0x26c>)
 80007f6:	681b      	ldr	r3, [r3, #0]
 80007f8:	4a42      	ldr	r2, [pc, #264]	; (8000904 <main+0x284>)
 80007fa:	6811      	ldr	r1, [r2, #0]
 80007fc:	4a42      	ldr	r2, [pc, #264]	; (8000908 <main+0x288>)
 80007fe:	6812      	ldr	r2, [r2, #0]
 8000800:	4618      	mov	r0, r3
 8000802:	f004 fef1 	bl	80055e8 <ai_combination_run>
 8000806:	4603      	mov	r3, r0
 8000808:	4a49      	ldr	r2, [pc, #292]	; (8000930 <main+0x2b0>)
 800080a:	6013      	str	r3, [r2, #0]

	  		// Get end time stamp
	  		t_stamp_e_infe = htim14.Instance->CNT;
 800080c:	4b35      	ldr	r3, [pc, #212]	; (80008e4 <main+0x264>)
 800080e:	681b      	ldr	r3, [r3, #0]
 8000810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000812:	4a48      	ldr	r2, [pc, #288]	; (8000934 <main+0x2b4>)
 8000814:	6013      	str	r3, [r2, #0]

	  		// check if the inference is successful
	  		if (n_batch != 1) {
 8000816:	4b46      	ldr	r3, [pc, #280]	; (8000930 <main+0x2b0>)
 8000818:	681b      	ldr	r3, [r3, #0]
 800081a:	2b01      	cmp	r3, #1
 800081c:	d01f      	beq.n	800085e <main+0x1de>
	  			err = ai_combination_get_error(combination);
 800081e:	4b33      	ldr	r3, [pc, #204]	; (80008ec <main+0x26c>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	4618      	mov	r0, r3
 8000824:	f004 fdda 	bl	80053dc <ai_combination_get_error>
 8000828:	4603      	mov	r3, r0
 800082a:	4a31      	ldr	r2, [pc, #196]	; (80008f0 <main+0x270>)
 800082c:	6013      	str	r3, [r2, #0]
	  			uart_buf_len =
	  					sprintf(uart_buf,
	  							"Error: cannot perform inference, error type=%d code=%d\r\n",
	  							err.type, err.code);
 800082e:	4b30      	ldr	r3, [pc, #192]	; (80008f0 <main+0x270>)
 8000830:	781b      	ldrb	r3, [r3, #0]
	  					sprintf(uart_buf,
 8000832:	461a      	mov	r2, r3
	  							err.type, err.code);
 8000834:	4b2e      	ldr	r3, [pc, #184]	; (80008f0 <main+0x270>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	f3c3 2317 	ubfx	r3, r3, #8, #24
	  					sprintf(uart_buf,
 800083c:	493e      	ldr	r1, [pc, #248]	; (8000938 <main+0x2b8>)
 800083e:	482e      	ldr	r0, [pc, #184]	; (80008f8 <main+0x278>)
 8000840:	f008 fdb6 	bl	80093b0 <siprintf>
 8000844:	4603      	mov	r3, r0
 8000846:	461a      	mov	r2, r3
	  			uart_buf_len =
 8000848:	4b2c      	ldr	r3, [pc, #176]	; (80008fc <main+0x27c>)
 800084a:	601a      	str	r2, [r3, #0]
	  			HAL_UART_Transmit(&huart3, (uint8_t*) uart_buf, uart_buf_len, 100);
 800084c:	4b2b      	ldr	r3, [pc, #172]	; (80008fc <main+0x27c>)
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	b29a      	uxth	r2, r3
 8000852:	2364      	movs	r3, #100	; 0x64
 8000854:	4928      	ldr	r1, [pc, #160]	; (80008f8 <main+0x278>)
 8000856:	482a      	ldr	r0, [pc, #168]	; (8000900 <main+0x280>)
 8000858:	f003 fa94 	bl	8003d84 <HAL_UART_Transmit>
	  			while (1)
 800085c:	e7fe      	b.n	800085c <main+0x1dc>
	  				;
	  		}

	  		// Get start time stamp
	  		t_stamp_s_incr = htim14.Instance->CNT;
 800085e:	4b21      	ldr	r3, [pc, #132]	; (80008e4 <main+0x264>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000864:	4a35      	ldr	r2, [pc, #212]	; (800093c <main+0x2bc>)
 8000866:	6013      	str	r3, [r2, #0]

	  		// update parameters
	  		if (ot_flag)
 8000868:	4b2e      	ldr	r3, [pc, #184]	; (8000924 <main+0x2a4>)
 800086a:	edd3 7a00 	vldr	s15, [r3]
 800086e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8000872:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000876:	d001      	beq.n	800087c <main+0x1fc>
	  			ot_update();
 8000878:	f000 fc70 	bl	800115c <ot_update>

	  		// Get end time stamp
	  		t_stamp_e_incr = htim14.Instance->CNT;
 800087c:	4b19      	ldr	r3, [pc, #100]	; (80008e4 <main+0x264>)
 800087e:	681b      	ldr	r3, [r3, #0]
 8000880:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8000882:	4a2f      	ldr	r2, [pc, #188]	; (8000940 <main+0x2c0>)
 8000884:	6013      	str	r3, [r2, #0]

	  		// Retrieve the network output to float array y_proba
	  		for (uint32_t i = 0; i < AI_COMBINATION_OUT_1_SIZE; i++) {
 8000886:	2300      	movs	r3, #0
 8000888:	607b      	str	r3, [r7, #4]
 800088a:	e00d      	b.n	80008a8 <main+0x228>
	  			y_proba[i] = ((float*) out_data)[i];
 800088c:	4b20      	ldr	r3, [pc, #128]	; (8000910 <main+0x290>)
 800088e:	681a      	ldr	r2, [r3, #0]
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	009b      	lsls	r3, r3, #2
 8000894:	4413      	add	r3, r2
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	492a      	ldr	r1, [pc, #168]	; (8000944 <main+0x2c4>)
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	009b      	lsls	r3, r3, #2
 800089e:	440b      	add	r3, r1
 80008a0:	601a      	str	r2, [r3, #0]
	  		for (uint32_t i = 0; i < AI_COMBINATION_OUT_1_SIZE; i++) {
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	3301      	adds	r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2b07      	cmp	r3, #7
 80008ac:	d9ee      	bls.n	800088c <main+0x20c>
	  		}

	  		y_pred = get_y_pred();
 80008ae:	f000 fa51 	bl	8000d54 <get_y_pred>
 80008b2:	4603      	mov	r3, r0
 80008b4:	4a24      	ldr	r2, [pc, #144]	; (8000948 <main+0x2c8>)
 80008b6:	6013      	str	r3, [r2, #0]
	  						((float) (t_stamp_e_infe - t_stamp_s_infe)) / 10,
	  						((float) (t_stamp_e_incr - t_stamp_s_incr)) / 10);
	  		HAL_UART_Transmit(&huart3, (uint8_t*) uart_buf, uart_buf_len, 100);*/

	  		// Transmit the predicted label through UART
			uart_buf_len = sprintf(uart_buf, "%lu", y_pred);
 80008b8:	4b23      	ldr	r3, [pc, #140]	; (8000948 <main+0x2c8>)
 80008ba:	681b      	ldr	r3, [r3, #0]
 80008bc:	461a      	mov	r2, r3
 80008be:	4923      	ldr	r1, [pc, #140]	; (800094c <main+0x2cc>)
 80008c0:	480d      	ldr	r0, [pc, #52]	; (80008f8 <main+0x278>)
 80008c2:	f008 fd75 	bl	80093b0 <siprintf>
 80008c6:	4603      	mov	r3, r0
 80008c8:	461a      	mov	r2, r3
 80008ca:	4b0c      	ldr	r3, [pc, #48]	; (80008fc <main+0x27c>)
 80008cc:	601a      	str	r2, [r3, #0]
			HAL_UART_Transmit(&huart3, (uint8_t*)uart_buf, uart_buf_len, HAL_MAX_DELAY);
 80008ce:	4b0b      	ldr	r3, [pc, #44]	; (80008fc <main+0x27c>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	b29a      	uxth	r2, r3
 80008d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80008d8:	4907      	ldr	r1, [pc, #28]	; (80008f8 <main+0x278>)
 80008da:	4809      	ldr	r0, [pc, #36]	; (8000900 <main+0x280>)
 80008dc:	f003 fa52 	bl	8003d84 <HAL_UART_Transmit>
	  		if (HAL_UART_Receive(&huart3, (uint8_t*) (&y_real), sizeof(float),
 80008e0:	e72a      	b.n	8000738 <main+0xb8>
 80008e2:	bf00      	nop
 80008e4:	20002148 	.word	0x20002148
 80008e8:	20002740 	.word	0x20002740
 80008ec:	20002724 	.word	0x20002724
 80008f0:	2000549c 	.word	0x2000549c
 80008f4:	08009e20 	.word	0x08009e20
 80008f8:	2000536c 	.word	0x2000536c
 80008fc:	20005498 	.word	0x20005498
 8000900:	20002194 	.word	0x20002194
 8000904:	20005364 	.word	0x20005364
 8000908:	20005368 	.word	0x20005368
 800090c:	20005340 	.word	0x20005340
 8000910:	20005360 	.word	0x20005360
 8000914:	3a83126f 	.word	0x3a83126f
 8000918:	200054d4 	.word	0x200054d4
 800091c:	08009e50 	.word	0x08009e50
 8000920:	08009e8c 	.word	0x08009e8c
 8000924:	200054dc 	.word	0x200054dc
 8000928:	08009ed0 	.word	0x08009ed0
 800092c:	200054a4 	.word	0x200054a4
 8000930:	200054a0 	.word	0x200054a0
 8000934:	200054a8 	.word	0x200054a8
 8000938:	08009efc 	.word	0x08009efc
 800093c:	200054ac 	.word	0x200054ac
 8000940:	200054b0 	.word	0x200054b0
 8000944:	200054b4 	.word	0x200054b4
 8000948:	200054d8 	.word	0x200054d8
 800094c:	08009f38 	.word	0x08009f38

08000950 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000950:	b580      	push	{r7, lr}
 8000952:	b094      	sub	sp, #80	; 0x50
 8000954:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000956:	f107 0320 	add.w	r3, r7, #32
 800095a:	2230      	movs	r2, #48	; 0x30
 800095c:	2100      	movs	r1, #0
 800095e:	4618      	mov	r0, r3
 8000960:	f008 fd8f 	bl	8009482 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000964:	f107 030c 	add.w	r3, r7, #12
 8000968:	2200      	movs	r2, #0
 800096a:	601a      	str	r2, [r3, #0]
 800096c:	605a      	str	r2, [r3, #4]
 800096e:	609a      	str	r2, [r3, #8]
 8000970:	60da      	str	r2, [r3, #12]
 8000972:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000974:	f001 ff36 	bl	80027e4 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000978:	4b2a      	ldr	r3, [pc, #168]	; (8000a24 <SystemClock_Config+0xd4>)
 800097a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800097c:	4a29      	ldr	r2, [pc, #164]	; (8000a24 <SystemClock_Config+0xd4>)
 800097e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000982:	6413      	str	r3, [r2, #64]	; 0x40
 8000984:	4b27      	ldr	r3, [pc, #156]	; (8000a24 <SystemClock_Config+0xd4>)
 8000986:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000988:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800098c:	60bb      	str	r3, [r7, #8]
 800098e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000990:	4b25      	ldr	r3, [pc, #148]	; (8000a28 <SystemClock_Config+0xd8>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4a24      	ldr	r2, [pc, #144]	; (8000a28 <SystemClock_Config+0xd8>)
 8000996:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800099a:	6013      	str	r3, [r2, #0]
 800099c:	4b22      	ldr	r3, [pc, #136]	; (8000a28 <SystemClock_Config+0xd8>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80009a4:	607b      	str	r3, [r7, #4]
 80009a6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a8:	2301      	movs	r3, #1
 80009aa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80009ac:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80009b0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80009ba:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80009bc:	2304      	movs	r3, #4
 80009be:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80009c0:	23d8      	movs	r3, #216	; 0xd8
 80009c2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = 2;
 80009c4:	2302      	movs	r3, #2
 80009c6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 9;
 80009c8:	2309      	movs	r3, #9
 80009ca:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80009cc:	f107 0320 	add.w	r3, r7, #32
 80009d0:	4618      	mov	r0, r3
 80009d2:	f001 ff67 	bl	80028a4 <HAL_RCC_OscConfig>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80009dc:	f000 f9ea 	bl	8000db4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80009e0:	f001 ff10 	bl	8002804 <HAL_PWREx_EnableOverDrive>
 80009e4:	4603      	mov	r3, r0
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	d001      	beq.n	80009ee <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80009ea:	f000 f9e3 	bl	8000db4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80009ee:	230f      	movs	r3, #15
 80009f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009f2:	2302      	movs	r3, #2
 80009f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80009f6:	2300      	movs	r3, #0
 80009f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80009fa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80009fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000a00:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000a04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 8000a06:	f107 030c 	add.w	r3, r7, #12
 8000a0a:	2107      	movs	r1, #7
 8000a0c:	4618      	mov	r0, r3
 8000a0e:	f002 f9ed 	bl	8002dec <HAL_RCC_ClockConfig>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b00      	cmp	r3, #0
 8000a16:	d001      	beq.n	8000a1c <SystemClock_Config+0xcc>
  {
    Error_Handler();
 8000a18:	f000 f9cc 	bl	8000db4 <Error_Handler>
  }
}
 8000a1c:	bf00      	nop
 8000a1e:	3750      	adds	r7, #80	; 0x50
 8000a20:	46bd      	mov	sp, r7
 8000a22:	bd80      	pop	{r7, pc}
 8000a24:	40023800 	.word	0x40023800
 8000a28:	40007000 	.word	0x40007000

08000a2c <MX_CRC_Init>:
  * @brief CRC Initialization Function
  * @param None
  * @retval None
  */
static void MX_CRC_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* USER CODE END CRC_Init 0 */

  /* USER CODE BEGIN CRC_Init 1 */

  /* USER CODE END CRC_Init 1 */
  hcrc.Instance = CRC;
 8000a30:	4b0d      	ldr	r3, [pc, #52]	; (8000a68 <MX_CRC_Init+0x3c>)
 8000a32:	4a0e      	ldr	r2, [pc, #56]	; (8000a6c <MX_CRC_Init+0x40>)
 8000a34:	601a      	str	r2, [r3, #0]
  hcrc.Init.DefaultPolynomialUse = DEFAULT_POLYNOMIAL_ENABLE;
 8000a36:	4b0c      	ldr	r3, [pc, #48]	; (8000a68 <MX_CRC_Init+0x3c>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	711a      	strb	r2, [r3, #4]
  hcrc.Init.DefaultInitValueUse = DEFAULT_INIT_VALUE_ENABLE;
 8000a3c:	4b0a      	ldr	r3, [pc, #40]	; (8000a68 <MX_CRC_Init+0x3c>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	715a      	strb	r2, [r3, #5]
  hcrc.Init.InputDataInversionMode = CRC_INPUTDATA_INVERSION_NONE;
 8000a42:	4b09      	ldr	r3, [pc, #36]	; (8000a68 <MX_CRC_Init+0x3c>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	615a      	str	r2, [r3, #20]
  hcrc.Init.OutputDataInversionMode = CRC_OUTPUTDATA_INVERSION_DISABLE;
 8000a48:	4b07      	ldr	r3, [pc, #28]	; (8000a68 <MX_CRC_Init+0x3c>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	619a      	str	r2, [r3, #24]
  hcrc.InputDataFormat = CRC_INPUTDATA_FORMAT_BYTES;
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <MX_CRC_Init+0x3c>)
 8000a50:	2201      	movs	r2, #1
 8000a52:	621a      	str	r2, [r3, #32]
  if (HAL_CRC_Init(&hcrc) != HAL_OK)
 8000a54:	4804      	ldr	r0, [pc, #16]	; (8000a68 <MX_CRC_Init+0x3c>)
 8000a56:	f000 ffa7 	bl	80019a8 <HAL_CRC_Init>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d001      	beq.n	8000a64 <MX_CRC_Init+0x38>
  {
    Error_Handler();
 8000a60:	f000 f9a8 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN CRC_Init 2 */

  /* USER CODE END CRC_Init 2 */

}
 8000a64:	bf00      	nop
 8000a66:	bd80      	pop	{r7, pc}
 8000a68:	20002074 	.word	0x20002074
 8000a6c:	40023000 	.word	0x40023000

08000a70 <MX_ETH_Init>:
  * @brief ETH Initialization Function
  * @param None
  * @retval None
  */
static void MX_ETH_Init(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
   static uint8_t MACAddr[6];

  /* USER CODE BEGIN ETH_Init 1 */

  /* USER CODE END ETH_Init 1 */
  heth.Instance = ETH;
 8000a74:	4b1f      	ldr	r3, [pc, #124]	; (8000af4 <MX_ETH_Init+0x84>)
 8000a76:	4a20      	ldr	r2, [pc, #128]	; (8000af8 <MX_ETH_Init+0x88>)
 8000a78:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8000a7a:	4b20      	ldr	r3, [pc, #128]	; (8000afc <MX_ETH_Init+0x8c>)
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	701a      	strb	r2, [r3, #0]
  MACAddr[1] = 0x80;
 8000a80:	4b1e      	ldr	r3, [pc, #120]	; (8000afc <MX_ETH_Init+0x8c>)
 8000a82:	2280      	movs	r2, #128	; 0x80
 8000a84:	705a      	strb	r2, [r3, #1]
  MACAddr[2] = 0xE1;
 8000a86:	4b1d      	ldr	r3, [pc, #116]	; (8000afc <MX_ETH_Init+0x8c>)
 8000a88:	22e1      	movs	r2, #225	; 0xe1
 8000a8a:	709a      	strb	r2, [r3, #2]
  MACAddr[3] = 0x00;
 8000a8c:	4b1b      	ldr	r3, [pc, #108]	; (8000afc <MX_ETH_Init+0x8c>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	70da      	strb	r2, [r3, #3]
  MACAddr[4] = 0x00;
 8000a92:	4b1a      	ldr	r3, [pc, #104]	; (8000afc <MX_ETH_Init+0x8c>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	711a      	strb	r2, [r3, #4]
  MACAddr[5] = 0x00;
 8000a98:	4b18      	ldr	r3, [pc, #96]	; (8000afc <MX_ETH_Init+0x8c>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	715a      	strb	r2, [r3, #5]
  heth.Init.MACAddr = &MACAddr[0];
 8000a9e:	4b15      	ldr	r3, [pc, #84]	; (8000af4 <MX_ETH_Init+0x84>)
 8000aa0:	4a16      	ldr	r2, [pc, #88]	; (8000afc <MX_ETH_Init+0x8c>)
 8000aa2:	605a      	str	r2, [r3, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8000aa4:	4b13      	ldr	r3, [pc, #76]	; (8000af4 <MX_ETH_Init+0x84>)
 8000aa6:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8000aaa:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8000aac:	4b11      	ldr	r3, [pc, #68]	; (8000af4 <MX_ETH_Init+0x84>)
 8000aae:	4a14      	ldr	r2, [pc, #80]	; (8000b00 <MX_ETH_Init+0x90>)
 8000ab0:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8000ab2:	4b10      	ldr	r3, [pc, #64]	; (8000af4 <MX_ETH_Init+0x84>)
 8000ab4:	4a13      	ldr	r2, [pc, #76]	; (8000b04 <MX_ETH_Init+0x94>)
 8000ab6:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1524;
 8000ab8:	4b0e      	ldr	r3, [pc, #56]	; (8000af4 <MX_ETH_Init+0x84>)
 8000aba:	f240 52f4 	movw	r2, #1524	; 0x5f4
 8000abe:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  if (HAL_ETH_Init(&heth) != HAL_OK)
 8000ac0:	480c      	ldr	r0, [pc, #48]	; (8000af4 <MX_ETH_Init+0x84>)
 8000ac2:	f001 f85b 	bl	8001b7c <HAL_ETH_Init>
 8000ac6:	4603      	mov	r3, r0
 8000ac8:	2b00      	cmp	r3, #0
 8000aca:	d001      	beq.n	8000ad0 <MX_ETH_Init+0x60>
  {
    Error_Handler();
 8000acc:	f000 f972 	bl	8000db4 <Error_Handler>
  }

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8000ad0:	2238      	movs	r2, #56	; 0x38
 8000ad2:	2100      	movs	r1, #0
 8000ad4:	480c      	ldr	r0, [pc, #48]	; (8000b08 <MX_ETH_Init+0x98>)
 8000ad6:	f008 fcd4 	bl	8009482 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8000ada:	4b0b      	ldr	r3, [pc, #44]	; (8000b08 <MX_ETH_Init+0x98>)
 8000adc:	2221      	movs	r2, #33	; 0x21
 8000ade:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8000ae0:	4b09      	ldr	r3, [pc, #36]	; (8000b08 <MX_ETH_Init+0x98>)
 8000ae2:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8000ae6:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8000ae8:	4b07      	ldr	r3, [pc, #28]	; (8000b08 <MX_ETH_Init+0x98>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN ETH_Init 2 */

  /* USER CODE END ETH_Init 2 */

}
 8000aee:	bf00      	nop
 8000af0:	bd80      	pop	{r7, pc}
 8000af2:	bf00      	nop
 8000af4:	20002098 	.word	0x20002098
 8000af8:	40028000 	.word	0x40028000
 8000afc:	200054e0 	.word	0x200054e0
 8000b00:	20001f7c 	.word	0x20001f7c
 8000b04:	20001edc 	.word	0x20001edc
 8000b08:	2000203c 	.word	0x2000203c

08000b0c <MX_TIM14_Init>:
  * @brief TIM14 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM14_Init(void)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	af00      	add	r7, sp, #0
  /* USER CODE END TIM14_Init 0 */

  /* USER CODE BEGIN TIM14_Init 1 */

  /* USER CODE END TIM14_Init 1 */
  htim14.Instance = TIM14;
 8000b10:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b12:	4a0f      	ldr	r2, [pc, #60]	; (8000b50 <MX_TIM14_Init+0x44>)
 8000b14:	601a      	str	r2, [r3, #0]
  htim14.Init.Prescaler = 21600-1;
 8000b16:	4b0d      	ldr	r3, [pc, #52]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b18:	f245 425f 	movw	r2, #21599	; 0x545f
 8000b1c:	605a      	str	r2, [r3, #4]
  htim14.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b1e:	4b0b      	ldr	r3, [pc, #44]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b20:	2200      	movs	r2, #0
 8000b22:	609a      	str	r2, [r3, #8]
  htim14.Init.Period = 65535;
 8000b24:	4b09      	ldr	r3, [pc, #36]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b26:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000b2a:	60da      	str	r2, [r3, #12]
  htim14.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b2c:	4b07      	ldr	r3, [pc, #28]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b2e:	2200      	movs	r2, #0
 8000b30:	611a      	str	r2, [r3, #16]
  htim14.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000b32:	4b06      	ldr	r3, [pc, #24]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b34:	2200      	movs	r2, #0
 8000b36:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim14) != HAL_OK)
 8000b38:	4804      	ldr	r0, [pc, #16]	; (8000b4c <MX_TIM14_Init+0x40>)
 8000b3a:	f002 ff6d 	bl	8003a18 <HAL_TIM_Base_Init>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b00      	cmp	r3, #0
 8000b42:	d001      	beq.n	8000b48 <MX_TIM14_Init+0x3c>
  {
    Error_Handler();
 8000b44:	f000 f936 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM14_Init 2 */

  /* USER CODE END TIM14_Init 2 */

}
 8000b48:	bf00      	nop
 8000b4a:	bd80      	pop	{r7, pc}
 8000b4c:	20002148 	.word	0x20002148
 8000b50:	40002000 	.word	0x40002000

08000b54 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b58:	4b14      	ldr	r3, [pc, #80]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b5a:	4a15      	ldr	r2, [pc, #84]	; (8000bb0 <MX_USART3_UART_Init+0x5c>)
 8000b5c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b5e:	4b13      	ldr	r3, [pc, #76]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b60:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000b64:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b66:	4b11      	ldr	r3, [pc, #68]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b78:	4b0c      	ldr	r3, [pc, #48]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b7a:	220c      	movs	r2, #12
 8000b7c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b7e:	4b0b      	ldr	r3, [pc, #44]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b84:	4b09      	ldr	r3, [pc, #36]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b86:	2200      	movs	r2, #0
 8000b88:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b8a:	4b08      	ldr	r3, [pc, #32]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b8c:	2200      	movs	r2, #0
 8000b8e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b96:	4805      	ldr	r0, [pc, #20]	; (8000bac <MX_USART3_UART_Init+0x58>)
 8000b98:	f003 f8a6 	bl	8003ce8 <HAL_UART_Init>
 8000b9c:	4603      	mov	r3, r0
 8000b9e:	2b00      	cmp	r3, #0
 8000ba0:	d001      	beq.n	8000ba6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000ba2:	f000 f907 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000ba6:	bf00      	nop
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	20002194 	.word	0x20002194
 8000bb0:	40004800 	.word	0x40004800

08000bb4 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000bb8:	4b14      	ldr	r3, [pc, #80]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bba:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000bbe:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000bc0:	4b12      	ldr	r3, [pc, #72]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc2:	2206      	movs	r2, #6
 8000bc4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000bc6:	4b11      	ldr	r3, [pc, #68]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bc8:	2202      	movs	r2, #2
 8000bca:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000bcc:	4b0f      	ldr	r3, [pc, #60]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bce:	2200      	movs	r2, #0
 8000bd0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000bd2:	4b0e      	ldr	r3, [pc, #56]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bd4:	2202      	movs	r2, #2
 8000bd6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000bd8:	4b0c      	ldr	r3, [pc, #48]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bda:	2201      	movs	r2, #1
 8000bdc:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000bde:	4b0b      	ldr	r3, [pc, #44]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be0:	2200      	movs	r2, #0
 8000be2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000be4:	4b09      	ldr	r3, [pc, #36]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 8000bea:	4b08      	ldr	r3, [pc, #32]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bec:	2201      	movs	r2, #1
 8000bee:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000bf0:	4b06      	ldr	r3, [pc, #24]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000bf6:	4805      	ldr	r0, [pc, #20]	; (8000c0c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000bf8:	f001 fcab 	bl	8002552 <HAL_PCD_Init>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000c02:	f000 f8d7 	bl	8000db4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000c06:	bf00      	nop
 8000c08:	bd80      	pop	{r7, pc}
 8000c0a:	bf00      	nop
 8000c0c:	2000221c 	.word	0x2000221c

08000c10 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b08c      	sub	sp, #48	; 0x30
 8000c14:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c16:	f107 031c 	add.w	r3, r7, #28
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	601a      	str	r2, [r3, #0]
 8000c1e:	605a      	str	r2, [r3, #4]
 8000c20:	609a      	str	r2, [r3, #8]
 8000c22:	60da      	str	r2, [r3, #12]
 8000c24:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c26:	4b47      	ldr	r3, [pc, #284]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c2a:	4a46      	ldr	r2, [pc, #280]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c2c:	f043 0304 	orr.w	r3, r3, #4
 8000c30:	6313      	str	r3, [r2, #48]	; 0x30
 8000c32:	4b44      	ldr	r3, [pc, #272]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c36:	f003 0304 	and.w	r3, r3, #4
 8000c3a:	61bb      	str	r3, [r7, #24]
 8000c3c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000c3e:	4b41      	ldr	r3, [pc, #260]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c42:	4a40      	ldr	r2, [pc, #256]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c44:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000c48:	6313      	str	r3, [r2, #48]	; 0x30
 8000c4a:	4b3e      	ldr	r3, [pc, #248]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000c52:	617b      	str	r3, [r7, #20]
 8000c54:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c56:	4b3b      	ldr	r3, [pc, #236]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c5a:	4a3a      	ldr	r2, [pc, #232]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c5c:	f043 0301 	orr.w	r3, r3, #1
 8000c60:	6313      	str	r3, [r2, #48]	; 0x30
 8000c62:	4b38      	ldr	r3, [pc, #224]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	f003 0301 	and.w	r3, r3, #1
 8000c6a:	613b      	str	r3, [r7, #16]
 8000c6c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c6e:	4b35      	ldr	r3, [pc, #212]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	4a34      	ldr	r2, [pc, #208]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	6313      	str	r3, [r2, #48]	; 0x30
 8000c7a:	4b32      	ldr	r3, [pc, #200]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c7e:	f003 0302 	and.w	r3, r3, #2
 8000c82:	60fb      	str	r3, [r7, #12]
 8000c84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c86:	4b2f      	ldr	r3, [pc, #188]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8a:	4a2e      	ldr	r2, [pc, #184]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c8c:	f043 0308 	orr.w	r3, r3, #8
 8000c90:	6313      	str	r3, [r2, #48]	; 0x30
 8000c92:	4b2c      	ldr	r3, [pc, #176]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000c94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c96:	f003 0308 	and.w	r3, r3, #8
 8000c9a:	60bb      	str	r3, [r7, #8]
 8000c9c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c9e:	4b29      	ldr	r3, [pc, #164]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a28      	ldr	r2, [pc, #160]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000ca4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b26      	ldr	r3, [pc, #152]	; (8000d44 <MX_GPIO_Init+0x134>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000cb2:	607b      	str	r3, [r7, #4]
 8000cb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000cb6:	2200      	movs	r2, #0
 8000cb8:	f244 0181 	movw	r1, #16513	; 0x4081
 8000cbc:	4822      	ldr	r0, [pc, #136]	; (8000d48 <MX_GPIO_Init+0x138>)
 8000cbe:	f001 fc2f 	bl	8002520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	2140      	movs	r1, #64	; 0x40
 8000cc6:	4821      	ldr	r0, [pc, #132]	; (8000d4c <MX_GPIO_Init+0x13c>)
 8000cc8:	f001 fc2a 	bl	8002520 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000ccc:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cd0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000cd2:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000cd6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd8:	2300      	movs	r3, #0
 8000cda:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000cdc:	f107 031c 	add.w	r3, r7, #28
 8000ce0:	4619      	mov	r1, r3
 8000ce2:	481b      	ldr	r0, [pc, #108]	; (8000d50 <MX_GPIO_Init+0x140>)
 8000ce4:	f001 fa70 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8000ce8:	f244 0381 	movw	r3, #16513	; 0x4081
 8000cec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cee:	2301      	movs	r3, #1
 8000cf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	f107 031c 	add.w	r3, r7, #28
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4811      	ldr	r0, [pc, #68]	; (8000d48 <MX_GPIO_Init+0x138>)
 8000d02:	f001 fa61 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000d06:	2340      	movs	r3, #64	; 0x40
 8000d08:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d0a:	2301      	movs	r3, #1
 8000d0c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d0e:	2300      	movs	r3, #0
 8000d10:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d12:	2300      	movs	r3, #0
 8000d14:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000d16:	f107 031c 	add.w	r3, r7, #28
 8000d1a:	4619      	mov	r1, r3
 8000d1c:	480b      	ldr	r0, [pc, #44]	; (8000d4c <MX_GPIO_Init+0x13c>)
 8000d1e:	f001 fa53 	bl	80021c8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000d22:	2380      	movs	r3, #128	; 0x80
 8000d24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d26:	2300      	movs	r3, #0
 8000d28:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000d2e:	f107 031c 	add.w	r3, r7, #28
 8000d32:	4619      	mov	r1, r3
 8000d34:	4805      	ldr	r0, [pc, #20]	; (8000d4c <MX_GPIO_Init+0x13c>)
 8000d36:	f001 fa47 	bl	80021c8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000d3a:	bf00      	nop
 8000d3c:	3730      	adds	r7, #48	; 0x30
 8000d3e:	46bd      	mov	sp, r7
 8000d40:	bd80      	pop	{r7, pc}
 8000d42:	bf00      	nop
 8000d44:	40023800 	.word	0x40023800
 8000d48:	40020400 	.word	0x40020400
 8000d4c:	40021800 	.word	0x40021800
 8000d50:	40020800 	.word	0x40020800

08000d54 <get_y_pred>:

/* USER CODE BEGIN 4 */
uint32_t get_y_pred(void){
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
	ai_float y_proba_max = y_proba[0];
 8000d5a:	4b15      	ldr	r3, [pc, #84]	; (8000db0 <get_y_pred+0x5c>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	60fb      	str	r3, [r7, #12]
	uint32_t y_pred_ = 0;
 8000d60:	2300      	movs	r3, #0
 8000d62:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 1; i < AI_COMBINATION_OUT_1_SIZE; i++) {
 8000d64:	2301      	movs	r3, #1
 8000d66:	607b      	str	r3, [r7, #4]
 8000d68:	e017      	b.n	8000d9a <get_y_pred+0x46>
		if (y_proba[i] > y_proba_max) {
 8000d6a:	4a11      	ldr	r2, [pc, #68]	; (8000db0 <get_y_pred+0x5c>)
 8000d6c:	687b      	ldr	r3, [r7, #4]
 8000d6e:	009b      	lsls	r3, r3, #2
 8000d70:	4413      	add	r3, r2
 8000d72:	edd3 7a00 	vldr	s15, [r3]
 8000d76:	ed97 7a03 	vldr	s14, [r7, #12]
 8000d7a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8000d7e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d82:	d507      	bpl.n	8000d94 <get_y_pred+0x40>
			y_proba_max = y_proba[i];
 8000d84:	4a0a      	ldr	r2, [pc, #40]	; (8000db0 <get_y_pred+0x5c>)
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	009b      	lsls	r3, r3, #2
 8000d8a:	4413      	add	r3, r2
 8000d8c:	681b      	ldr	r3, [r3, #0]
 8000d8e:	60fb      	str	r3, [r7, #12]
			y_pred_ = i;
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	60bb      	str	r3, [r7, #8]
	for (uint32_t i = 1; i < AI_COMBINATION_OUT_1_SIZE; i++) {
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	3301      	adds	r3, #1
 8000d98:	607b      	str	r3, [r7, #4]
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	2b07      	cmp	r3, #7
 8000d9e:	d9e4      	bls.n	8000d6a <get_y_pred+0x16>
		}
	}
	return y_pred_;
 8000da0:	68bb      	ldr	r3, [r7, #8]
}
 8000da2:	4618      	mov	r0, r3
 8000da4:	3714      	adds	r7, #20
 8000da6:	46bd      	mov	sp, r7
 8000da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dac:	4770      	bx	lr
 8000dae:	bf00      	nop
 8000db0:	200054b4 	.word	0x200054b4

08000db4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000db4:	b480      	push	{r7}
 8000db6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000db8:	b672      	cpsid	i
}
 8000dba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000dbc:	e7fe      	b.n	8000dbc <Error_Handler+0x8>
	...

08000dc0 <ot_cache_weights>:
AI_ALIGNED(4) uint8_t ot_wb_cache[OT_CLASSIFIER_DATA_WEIGHT_SIZE_BYTES + OT_CLASSIFIER_DATA_BIAS_SIZE_BYTES];
AI_ALIGNED(4) uint8_t ot_wb_icmt_t_cache[OT_CLASSIFIER_DATA_WEIGHT_SIZE_BYTES + OT_CLASSIFIER_DATA_BIAS_SIZE_BYTES];
float ot_lr;
float ot_momentum;

void ot_cache_weights(void){
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	b08c      	sub	sp, #48	; 0x30
 8000dc4:	af00      	add	r7, sp, #0
	ai_observer_node node_info;
	node_info.c_idx = OT_CLASSIFIER_C_ID; /* index of the critical node */
 8000dc6:	2317      	movs	r3, #23
 8000dc8:	803b      	strh	r3, [r7, #0]
	if (ai_platform_observer_node_info(combination, &node_info)) {
 8000dca:	4b36      	ldr	r3, [pc, #216]	; (8000ea4 <ot_cache_weights+0xe4>)
 8000dcc:	681b      	ldr	r3, [r3, #0]
 8000dce:	463a      	mov	r2, r7
 8000dd0:	4611      	mov	r1, r2
 8000dd2:	4618      	mov	r0, r3
 8000dd4:	f006 fa34 	bl	8007240 <ai_platform_observer_node_info>
 8000dd8:	4603      	mov	r3, r0
 8000dda:	2b00      	cmp	r3, #0
 8000ddc:	d05d      	beq.n	8000e9a <ot_cache_weights+0xda>
		ai_tensor_list *tl;
		tl = GET_TENSOR_LIST_WEIGTHS(node_info.tensors);
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	881b      	ldrh	r3, [r3, #0]
 8000de2:	2b02      	cmp	r3, #2
 8000de4:	d903      	bls.n	8000dee <ot_cache_weights+0x2e>
 8000de6:	68fb      	ldr	r3, [r7, #12]
 8000de8:	685b      	ldr	r3, [r3, #4]
 8000dea:	3318      	adds	r3, #24
 8000dec:	e000      	b.n	8000df0 <ot_cache_weights+0x30>
 8000dee:	2300      	movs	r3, #0
 8000df0:	627b      	str	r3, [r7, #36]	; 0x24
		uintptr_t dst_addr = (uintptr_t) &ot_wb_cache[0];
 8000df2:	4b2d      	ldr	r3, [pc, #180]	; (8000ea8 <ot_cache_weights+0xe8>)
 8000df4:	62fb      	str	r3, [r7, #44]	; 0x2c
		AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl){
 8000df6:	2300      	movs	r3, #0
 8000df8:	623b      	str	r3, [r7, #32]
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	62bb      	str	r3, [r7, #40]	; 0x28
 8000dfe:	e031      	b.n	8000e64 <ot_cache_weights+0xa4>
			// Retrieve the @/size of the data
			const uintptr_t src_addr = (uintptr_t) AI_TENSOR_ARRAY_GET_DATA_ADDR(t);
 8000e00:	6a3b      	ldr	r3, [r7, #32]
 8000e02:	699b      	ldr	r3, [r3, #24]
 8000e04:	68db      	ldr	r3, [r3, #12]
 8000e06:	61fb      	str	r3, [r7, #28]
			const ai_size sz = AI_TENSOR_ARRAY_BYTE_SIZE(t);
 8000e08:	6a3b      	ldr	r3, [r7, #32]
 8000e0a:	699b      	ldr	r3, [r3, #24]
 8000e0c:	681a      	ldr	r2, [r3, #0]
 8000e0e:	6a3b      	ldr	r3, [r7, #32]
 8000e10:	699b      	ldr	r3, [r3, #24]
 8000e12:	685b      	ldr	r3, [r3, #4]
 8000e14:	4619      	mov	r1, r3
 8000e16:	4610      	mov	r0, r2
 8000e18:	f004 fc8a 	bl	8005730 <ai_array_get_byte_size>
 8000e1c:	61b8      	str	r0, [r7, #24]
			// Copy the data tensor in the SW cache
			memcpy(dst_addr, src_addr, sz);
 8000e1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000e20:	69f9      	ldr	r1, [r7, #28]
 8000e22:	69ba      	ldr	r2, [r7, #24]
 8000e24:	4618      	mov	r0, r3
 8000e26:	f008 fb71 	bl	800950c <memcpy>
			// set the new effective address
			AI_TENSOR_ARRAY_UPDATE_DATA_ADDR(t, dst_addr);
 8000e2a:	6a3b      	ldr	r3, [r7, #32]
 8000e2c:	699b      	ldr	r3, [r3, #24]
 8000e2e:	617b      	str	r3, [r7, #20]
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	689b      	ldr	r3, [r3, #8]
 8000e34:	461a      	mov	r2, r3
 8000e36:	697b      	ldr	r3, [r7, #20]
 8000e38:	68db      	ldr	r3, [r3, #12]
 8000e3a:	1ad3      	subs	r3, r2, r3
 8000e3c:	613b      	str	r3, [r7, #16]
 8000e3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e40:	697b      	ldr	r3, [r7, #20]
 8000e42:	60da      	str	r2, [r3, #12]
 8000e44:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e46:	693b      	ldr	r3, [r7, #16]
 8000e48:	4413      	add	r3, r2
 8000e4a:	461a      	mov	r2, r3
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	609a      	str	r2, [r3, #8]
			dst_addr += OT_ALIGN_UP(sz, 4);
 8000e50:	69bb      	ldr	r3, [r7, #24]
 8000e52:	3303      	adds	r3, #3
 8000e54:	f023 0303 	bic.w	r3, r3, #3
 8000e58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000e5a:	4413      	add	r3, r2
 8000e5c:	62fb      	str	r3, [r7, #44]	; 0x2c
		AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl){
 8000e5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e60:	3301      	adds	r3, #1
 8000e62:	62bb      	str	r3, [r7, #40]	; 0x28
 8000e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e66:	2b00      	cmp	r3, #0
 8000e68:	d003      	beq.n	8000e72 <ot_cache_weights+0xb2>
 8000e6a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e6c:	881b      	ldrh	r3, [r3, #0]
 8000e6e:	461a      	mov	r2, r3
 8000e70:	e000      	b.n	8000e74 <ot_cache_weights+0xb4>
 8000e72:	2200      	movs	r2, #0
 8000e74:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e76:	429a      	cmp	r2, r3
 8000e78:	d90f      	bls.n	8000e9a <ot_cache_weights+0xda>
 8000e7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e7c:	685b      	ldr	r3, [r3, #4]
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	d006      	beq.n	8000e90 <ot_cache_weights+0xd0>
 8000e82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e84:	685a      	ldr	r2, [r3, #4]
 8000e86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000e88:	009b      	lsls	r3, r3, #2
 8000e8a:	4413      	add	r3, r2
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	e000      	b.n	8000e92 <ot_cache_weights+0xd2>
 8000e90:	2300      	movs	r3, #0
 8000e92:	623b      	str	r3, [r7, #32]
 8000e94:	6a3b      	ldr	r3, [r7, #32]
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d1b2      	bne.n	8000e00 <ot_cache_weights+0x40>
		}
	}
}
 8000e9a:	bf00      	nop
 8000e9c:	3730      	adds	r7, #48	; 0x30
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20002724 	.word	0x20002724
 8000ea8:	20006800 	.word	0x20006800

08000eac <ot_observer_cb>:

ai_observer_node_cb ot_observer_cb(const ai_handle cookie, const ai_u32 flags, const ai_observer_node *node) {
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b08e      	sub	sp, #56	; 0x38
 8000eb0:	af00      	add	r7, sp, #0
 8000eb2:	60f8      	str	r0, [r7, #12]
 8000eb4:	60b9      	str	r1, [r7, #8]
 8000eb6:	607a      	str	r2, [r7, #4]
	ai_tensor_list *tl;
	ai_observer_node node_info;
	node_info.c_idx = OT_PRE_CLASSIFIER_C_ID;
 8000eb8:	2316      	movs	r3, #22
 8000eba:	82bb      	strh	r3, [r7, #20]
	if (node->c_idx == OT_PRE_CLASSIFIER_C_ID) {
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	881b      	ldrh	r3, [r3, #0]
 8000ec0:	2b16      	cmp	r3, #22
 8000ec2:	d14c      	bne.n	8000f5e <ot_observer_cb+0xb2>
		ai_platform_observer_node_info(combination, &node_info);
 8000ec4:	4b28      	ldr	r3, [pc, #160]	; (8000f68 <ot_observer_cb+0xbc>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	f107 0214 	add.w	r2, r7, #20
 8000ecc:	4611      	mov	r1, r2
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f006 f9b6 	bl	8007240 <ai_platform_observer_node_info>
		tl = GET_TENSOR_LIST_OUT(node_info.tensors);
 8000ed4:	6a3b      	ldr	r3, [r7, #32]
 8000ed6:	881b      	ldrh	r3, [r3, #0]
 8000ed8:	2b01      	cmp	r3, #1
 8000eda:	d903      	bls.n	8000ee4 <ot_observer_cb+0x38>
 8000edc:	6a3b      	ldr	r3, [r7, #32]
 8000ede:	685b      	ldr	r3, [r3, #4]
 8000ee0:	330c      	adds	r3, #12
 8000ee2:	e000      	b.n	8000ee6 <ot_observer_cb+0x3a>
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	62fb      	str	r3, [r7, #44]	; 0x2c
		AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl){
 8000ee8:	2300      	movs	r3, #0
 8000eea:	62bb      	str	r3, [r7, #40]	; 0x28
 8000eec:	2300      	movs	r3, #0
 8000eee:	637b      	str	r3, [r7, #52]	; 0x34
 8000ef0:	e01a      	b.n	8000f28 <ot_observer_cb+0x7c>
			float *tmp = (float*) AI_TENSOR_ARRAY_GET_DATA_ADDR(t);
 8000ef2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000ef4:	699b      	ldr	r3, [r3, #24]
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	627b      	str	r3, [r7, #36]	; 0x24
			for (uint32_t k = 0; k < OT_CLASSIFIER_IN_SIZE; k++)
 8000efa:	2300      	movs	r3, #0
 8000efc:	633b      	str	r3, [r7, #48]	; 0x30
 8000efe:	e00c      	b.n	8000f1a <ot_observer_cb+0x6e>
				((float*) in_dense)[k] = tmp[k];
 8000f00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f02:	009b      	lsls	r3, r3, #2
 8000f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000f06:	441a      	add	r2, r3
 8000f08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f0a:	009b      	lsls	r3, r3, #2
 8000f0c:	4917      	ldr	r1, [pc, #92]	; (8000f6c <ot_observer_cb+0xc0>)
 8000f0e:	440b      	add	r3, r1
 8000f10:	6812      	ldr	r2, [r2, #0]
 8000f12:	601a      	str	r2, [r3, #0]
			for (uint32_t k = 0; k < OT_CLASSIFIER_IN_SIZE; k++)
 8000f14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f16:	3301      	adds	r3, #1
 8000f18:	633b      	str	r3, [r7, #48]	; 0x30
 8000f1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f1c:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 8000f20:	d3ee      	bcc.n	8000f00 <ot_observer_cb+0x54>
		AI_FOR_EACH_TENSOR_LIST_DO(i, t, tl){
 8000f22:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f24:	3301      	adds	r3, #1
 8000f26:	637b      	str	r3, [r7, #52]	; 0x34
 8000f28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f2a:	2b00      	cmp	r3, #0
 8000f2c:	d003      	beq.n	8000f36 <ot_observer_cb+0x8a>
 8000f2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f30:	881b      	ldrh	r3, [r3, #0]
 8000f32:	461a      	mov	r2, r3
 8000f34:	e000      	b.n	8000f38 <ot_observer_cb+0x8c>
 8000f36:	2200      	movs	r2, #0
 8000f38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f3a:	429a      	cmp	r2, r3
 8000f3c:	d90f      	bls.n	8000f5e <ot_observer_cb+0xb2>
 8000f3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f40:	685b      	ldr	r3, [r3, #4]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <ot_observer_cb+0xa8>
 8000f46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000f48:	685a      	ldr	r2, [r3, #4]
 8000f4a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000f4c:	009b      	lsls	r3, r3, #2
 8000f4e:	4413      	add	r3, r2
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	e000      	b.n	8000f56 <ot_observer_cb+0xaa>
 8000f54:	2300      	movs	r3, #0
 8000f56:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d1c9      	bne.n	8000ef2 <ot_observer_cb+0x46>
		}
	}
	return 0;
 8000f5e:	2300      	movs	r3, #0
}
 8000f60:	4618      	mov	r0, r3
 8000f62:	3738      	adds	r7, #56	; 0x38
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	20002724 	.word	0x20002724
 8000f6c:	20005500 	.word	0x20005500

08000f70 <ot_init>:

void ot_init(float ot_lr_, float ot_momentum_){
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b082      	sub	sp, #8
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	ed87 0a01 	vstr	s0, [r7, #4]
 8000f7a:	edc7 0a00 	vstr	s1, [r7]
	// load the weights of classifier into software cache
	ot_cache_weights();
 8000f7e:	f7ff ff1f 	bl	8000dc0 <ot_cache_weights>
	// register call-back for observer
	ai_platform_observer_register(combination, ot_observer_cb, &i_u_observer_ctx, AI_OBSERVER_POST_EVT);
 8000f82:	4b09      	ldr	r3, [pc, #36]	; (8000fa8 <ot_init+0x38>)
 8000f84:	6818      	ldr	r0, [r3, #0]
 8000f86:	2304      	movs	r3, #4
 8000f88:	4a08      	ldr	r2, [pc, #32]	; (8000fac <ot_init+0x3c>)
 8000f8a:	4909      	ldr	r1, [pc, #36]	; (8000fb0 <ot_init+0x40>)
 8000f8c:	f006 fa2e 	bl	80073ec <ai_platform_observer_register>
	// reset the ot_icmt_t_cache to all zeros
	ot_reset_icmt_t_cache();
 8000f90:	f000 f906 	bl	80011a0 <ot_reset_icmt_t_cache>
	// set the learning rate and momentum
	ot_lr = ot_lr_;
 8000f94:	4a07      	ldr	r2, [pc, #28]	; (8000fb4 <ot_init+0x44>)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6013      	str	r3, [r2, #0]
	ot_momentum = ot_momentum_;
 8000f9a:	4a07      	ldr	r2, [pc, #28]	; (8000fb8 <ot_init+0x48>)
 8000f9c:	683b      	ldr	r3, [r7, #0]
 8000f9e:	6013      	str	r3, [r2, #0]
}
 8000fa0:	bf00      	nop
 8000fa2:	3708      	adds	r7, #8
 8000fa4:	46bd      	mov	sp, r7
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	20002724 	.word	0x20002724
 8000fac:	200054e8 	.word	0x200054e8
 8000fb0:	08000ead 	.word	0x08000ead
 8000fb4:	20019840 	.word	0x20019840
 8000fb8:	20019844 	.word	0x20019844

08000fbc <ot_update_w>:

void ot_update_w(uint32_t s_, uint32_t t_) {
 8000fbc:	b480      	push	{r7}
 8000fbe:	b085      	sub	sp, #20
 8000fc0:	af00      	add	r7, sp, #0
 8000fc2:	6078      	str	r0, [r7, #4]
 8000fc4:	6039      	str	r1, [r7, #0]
	uint32_t w_idx = s_ * OT_CLASSIFIER_IN_SIZE + t_;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 8000fcc:	fb02 f303 	mul.w	r3, r2, r3
 8000fd0:	683a      	ldr	r2, [r7, #0]
 8000fd2:	4413      	add	r3, r2
 8000fd4:	60fb      	str	r3, [r7, #12]
	((float*) ot_wb_icmt_t_cache)[w_idx] = ot_momentum * ((float*) ot_wb_icmt_t_cache)[w_idx] + OT_W_GRADIENT(s_, t_);
 8000fd6:	68fb      	ldr	r3, [r7, #12]
 8000fd8:	009b      	lsls	r3, r3, #2
 8000fda:	4a28      	ldr	r2, [pc, #160]	; (800107c <ot_update_w+0xc0>)
 8000fdc:	4413      	add	r3, r2
 8000fde:	ed93 7a00 	vldr	s14, [r3]
 8000fe2:	4b27      	ldr	r3, [pc, #156]	; (8001080 <ot_update_w+0xc4>)
 8000fe4:	edd3 7a00 	vldr	s15, [r3]
 8000fe8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	009b      	lsls	r3, r3, #2
 8000ff0:	4a24      	ldr	r2, [pc, #144]	; (8001084 <ot_update_w+0xc8>)
 8000ff2:	4413      	add	r3, r2
 8000ff4:	edd3 6a00 	vldr	s13, [r3]
 8000ff8:	4b23      	ldr	r3, [pc, #140]	; (8001088 <ot_update_w+0xcc>)
 8000ffa:	681a      	ldr	r2, [r3, #0]
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	009b      	lsls	r3, r3, #2
 8001000:	4413      	add	r3, r2
 8001002:	ed93 6a00 	vldr	s12, [r3]
 8001006:	4b21      	ldr	r3, [pc, #132]	; (800108c <ot_update_w+0xd0>)
 8001008:	edd3 7a00 	vldr	s15, [r3]
 800100c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001010:	ee17 2a90 	vmov	r2, s15
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	4293      	cmp	r3, r2
 8001018:	d102      	bne.n	8001020 <ot_update_w+0x64>
 800101a:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800101e:	e001      	b.n	8001024 <ot_update_w+0x68>
 8001020:	eddf 7a1b 	vldr	s15, [pc, #108]	; 8001090 <ot_update_w+0xd4>
 8001024:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001028:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	009b      	lsls	r3, r3, #2
 8001030:	4a12      	ldr	r2, [pc, #72]	; (800107c <ot_update_w+0xc0>)
 8001032:	4413      	add	r3, r2
 8001034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001038:	edc3 7a00 	vstr	s15, [r3]
	((float*) ot_wb_cache)[w_idx] -= ot_lr * ((float*) ot_wb_icmt_t_cache)[w_idx];
 800103c:	68fb      	ldr	r3, [r7, #12]
 800103e:	009b      	lsls	r3, r3, #2
 8001040:	4a14      	ldr	r2, [pc, #80]	; (8001094 <ot_update_w+0xd8>)
 8001042:	4413      	add	r3, r2
 8001044:	ed93 7a00 	vldr	s14, [r3]
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	009b      	lsls	r3, r3, #2
 800104c:	4a0b      	ldr	r2, [pc, #44]	; (800107c <ot_update_w+0xc0>)
 800104e:	4413      	add	r3, r2
 8001050:	edd3 6a00 	vldr	s13, [r3]
 8001054:	4b10      	ldr	r3, [pc, #64]	; (8001098 <ot_update_w+0xdc>)
 8001056:	edd3 7a00 	vldr	s15, [r3]
 800105a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800105e:	68fb      	ldr	r3, [r7, #12]
 8001060:	009b      	lsls	r3, r3, #2
 8001062:	4a0c      	ldr	r2, [pc, #48]	; (8001094 <ot_update_w+0xd8>)
 8001064:	4413      	add	r3, r2
 8001066:	ee77 7a67 	vsub.f32	s15, s14, s15
 800106a:	edc3 7a00 	vstr	s15, [r3]
}
 800106e:	bf00      	nop
 8001070:	3714      	adds	r7, #20
 8001072:	46bd      	mov	sp, r7
 8001074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001078:	4770      	bx	lr
 800107a:	bf00      	nop
 800107c:	20010020 	.word	0x20010020
 8001080:	20019844 	.word	0x20019844
 8001084:	20005500 	.word	0x20005500
 8001088:	20005360 	.word	0x20005360
 800108c:	200054d4 	.word	0x200054d4
 8001090:	00000000 	.word	0x00000000
 8001094:	20006800 	.word	0x20006800
 8001098:	20019840 	.word	0x20019840

0800109c <ot_update_b>:

void ot_update_b(uint32_t s_) {
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	6078      	str	r0, [r7, #4]
	uint32_t b_idx = OT_CLASSIFIER_DATA_WEIGHT_SIZE + s_;
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	f503 5318 	add.w	r3, r3, #9728	; 0x2600
 80010aa:	60fb      	str	r3, [r7, #12]
	((float*) ot_wb_icmt_t_cache)[b_idx] = ot_momentum * ((float*) ot_wb_icmt_t_cache)[b_idx] + OT_B_GRADIENT(s_);
 80010ac:	68fb      	ldr	r3, [r7, #12]
 80010ae:	009b      	lsls	r3, r3, #2
 80010b0:	4a23      	ldr	r2, [pc, #140]	; (8001140 <ot_update_b+0xa4>)
 80010b2:	4413      	add	r3, r2
 80010b4:	ed93 7a00 	vldr	s14, [r3]
 80010b8:	4b22      	ldr	r3, [pc, #136]	; (8001144 <ot_update_b+0xa8>)
 80010ba:	edd3 7a00 	vldr	s15, [r3]
 80010be:	ee27 7a27 	vmul.f32	s14, s14, s15
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <ot_update_b+0xac>)
 80010c4:	681a      	ldr	r2, [r3, #0]
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	4413      	add	r3, r2
 80010cc:	edd3 6a00 	vldr	s13, [r3]
 80010d0:	4b1e      	ldr	r3, [pc, #120]	; (800114c <ot_update_b+0xb0>)
 80010d2:	edd3 7a00 	vldr	s15, [r3]
 80010d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80010da:	ee17 2a90 	vmov	r2, s15
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	4293      	cmp	r3, r2
 80010e2:	d102      	bne.n	80010ea <ot_update_b+0x4e>
 80010e4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80010e8:	e001      	b.n	80010ee <ot_update_b+0x52>
 80010ea:	eddf 7a19 	vldr	s15, [pc, #100]	; 8001150 <ot_update_b+0xb4>
 80010ee:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80010f2:	68fb      	ldr	r3, [r7, #12]
 80010f4:	009b      	lsls	r3, r3, #2
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <ot_update_b+0xa4>)
 80010f8:	4413      	add	r3, r2
 80010fa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80010fe:	edc3 7a00 	vstr	s15, [r3]
	((float*) ot_wb_cache)[b_idx] -= ot_lr * ((float*) ot_wb_icmt_t_cache)[b_idx];
 8001102:	68fb      	ldr	r3, [r7, #12]
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	4a13      	ldr	r2, [pc, #76]	; (8001154 <ot_update_b+0xb8>)
 8001108:	4413      	add	r3, r2
 800110a:	ed93 7a00 	vldr	s14, [r3]
 800110e:	68fb      	ldr	r3, [r7, #12]
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	4a0b      	ldr	r2, [pc, #44]	; (8001140 <ot_update_b+0xa4>)
 8001114:	4413      	add	r3, r2
 8001116:	edd3 6a00 	vldr	s13, [r3]
 800111a:	4b0f      	ldr	r3, [pc, #60]	; (8001158 <ot_update_b+0xbc>)
 800111c:	edd3 7a00 	vldr	s15, [r3]
 8001120:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001124:	68fb      	ldr	r3, [r7, #12]
 8001126:	009b      	lsls	r3, r3, #2
 8001128:	4a0a      	ldr	r2, [pc, #40]	; (8001154 <ot_update_b+0xb8>)
 800112a:	4413      	add	r3, r2
 800112c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001130:	edc3 7a00 	vstr	s15, [r3]
}
 8001134:	bf00      	nop
 8001136:	3714      	adds	r7, #20
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr
 8001140:	20010020 	.word	0x20010020
 8001144:	20019844 	.word	0x20019844
 8001148:	20005360 	.word	0x20005360
 800114c:	200054d4 	.word	0x200054d4
 8001150:	00000000 	.word	0x00000000
 8001154:	20006800 	.word	0x20006800
 8001158:	20019840 	.word	0x20019840

0800115c <ot_update>:

void ot_update(void) {
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
	for (uint32_t s_ = 0; s_ < OT_CLASSIFIER_OUT_SIZE; s_++) {
 8001162:	2300      	movs	r3, #0
 8001164:	607b      	str	r3, [r7, #4]
 8001166:	e013      	b.n	8001190 <ot_update+0x34>
		for (uint32_t t_ = 0; t_ < OT_CLASSIFIER_IN_SIZE; t_++){
 8001168:	2300      	movs	r3, #0
 800116a:	603b      	str	r3, [r7, #0]
 800116c:	e006      	b.n	800117c <ot_update+0x20>
			ot_update_w(s_, t_);
 800116e:	6839      	ldr	r1, [r7, #0]
 8001170:	6878      	ldr	r0, [r7, #4]
 8001172:	f7ff ff23 	bl	8000fbc <ot_update_w>
		for (uint32_t t_ = 0; t_ < OT_CLASSIFIER_IN_SIZE; t_++){
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	3301      	adds	r3, #1
 800117a:	603b      	str	r3, [r7, #0]
 800117c:	683b      	ldr	r3, [r7, #0]
 800117e:	f5b3 6f98 	cmp.w	r3, #1216	; 0x4c0
 8001182:	d3f4      	bcc.n	800116e <ot_update+0x12>
		}
		ot_update_b(s_);
 8001184:	6878      	ldr	r0, [r7, #4]
 8001186:	f7ff ff89 	bl	800109c <ot_update_b>
	for (uint32_t s_ = 0; s_ < OT_CLASSIFIER_OUT_SIZE; s_++) {
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	3301      	adds	r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	2b07      	cmp	r3, #7
 8001194:	d9e8      	bls.n	8001168 <ot_update+0xc>
	}
}
 8001196:	bf00      	nop
 8001198:	bf00      	nop
 800119a:	3708      	adds	r7, #8
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <ot_reset_icmt_t_cache>:

void ot_reset_icmt_t_cache(void) {
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
	memset(ot_wb_icmt_t_cache, 0, sizeof(ot_wb_icmt_t_cache));
 80011a4:	f649 0220 	movw	r2, #38944	; 0x9820
 80011a8:	2100      	movs	r1, #0
 80011aa:	4802      	ldr	r0, [pc, #8]	; (80011b4 <ot_reset_icmt_t_cache+0x14>)
 80011ac:	f008 f969 	bl	8009482 <memset>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	20010020 	.word	0x20010020

080011b8 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 80011be:	4b0f      	ldr	r3, [pc, #60]	; (80011fc <HAL_MspInit+0x44>)
 80011c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c2:	4a0e      	ldr	r2, [pc, #56]	; (80011fc <HAL_MspInit+0x44>)
 80011c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c8:	6413      	str	r3, [r2, #64]	; 0x40
 80011ca:	4b0c      	ldr	r3, [pc, #48]	; (80011fc <HAL_MspInit+0x44>)
 80011cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d2:	607b      	str	r3, [r7, #4]
 80011d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011d6:	4b09      	ldr	r3, [pc, #36]	; (80011fc <HAL_MspInit+0x44>)
 80011d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011da:	4a08      	ldr	r2, [pc, #32]	; (80011fc <HAL_MspInit+0x44>)
 80011dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011e0:	6453      	str	r3, [r2, #68]	; 0x44
 80011e2:	4b06      	ldr	r3, [pc, #24]	; (80011fc <HAL_MspInit+0x44>)
 80011e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011ea:	603b      	str	r3, [r7, #0]
 80011ec:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80011ee:	bf00      	nop
 80011f0:	370c      	adds	r7, #12
 80011f2:	46bd      	mov	sp, r7
 80011f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f8:	4770      	bx	lr
 80011fa:	bf00      	nop
 80011fc:	40023800 	.word	0x40023800

08001200 <HAL_CRC_MspInit>:
* This function configures the hardware resources used in this example
* @param hcrc: CRC handle pointer
* @retval None
*/
void HAL_CRC_MspInit(CRC_HandleTypeDef* hcrc)
{
 8001200:	b480      	push	{r7}
 8001202:	b085      	sub	sp, #20
 8001204:	af00      	add	r7, sp, #0
 8001206:	6078      	str	r0, [r7, #4]
  if(hcrc->Instance==CRC)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a0a      	ldr	r2, [pc, #40]	; (8001238 <HAL_CRC_MspInit+0x38>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d10b      	bne.n	800122a <HAL_CRC_MspInit+0x2a>
  {
  /* USER CODE BEGIN CRC_MspInit 0 */

  /* USER CODE END CRC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_CRC_CLK_ENABLE();
 8001212:	4b0a      	ldr	r3, [pc, #40]	; (800123c <HAL_CRC_MspInit+0x3c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	4a09      	ldr	r2, [pc, #36]	; (800123c <HAL_CRC_MspInit+0x3c>)
 8001218:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800121c:	6313      	str	r3, [r2, #48]	; 0x30
 800121e:	4b07      	ldr	r3, [pc, #28]	; (800123c <HAL_CRC_MspInit+0x3c>)
 8001220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001222:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001226:	60fb      	str	r3, [r7, #12]
 8001228:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN CRC_MspInit 1 */

  /* USER CODE END CRC_MspInit 1 */
  }

}
 800122a:	bf00      	nop
 800122c:	3714      	adds	r7, #20
 800122e:	46bd      	mov	sp, r7
 8001230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001234:	4770      	bx	lr
 8001236:	bf00      	nop
 8001238:	40023000 	.word	0x40023000
 800123c:	40023800 	.word	0x40023800

08001240 <HAL_ETH_MspInit>:
* This function configures the hardware resources used in this example
* @param heth: ETH handle pointer
* @retval None
*/
void HAL_ETH_MspInit(ETH_HandleTypeDef* heth)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08e      	sub	sp, #56	; 0x38
 8001244:	af00      	add	r7, sp, #0
 8001246:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001248:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
 8001250:	605a      	str	r2, [r3, #4]
 8001252:	609a      	str	r2, [r3, #8]
 8001254:	60da      	str	r2, [r3, #12]
 8001256:	611a      	str	r2, [r3, #16]
  if(heth->Instance==ETH)
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	4a4e      	ldr	r2, [pc, #312]	; (8001398 <HAL_ETH_MspInit+0x158>)
 800125e:	4293      	cmp	r3, r2
 8001260:	f040 8096 	bne.w	8001390 <HAL_ETH_MspInit+0x150>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ETH_CLK_ENABLE();
 8001264:	4b4d      	ldr	r3, [pc, #308]	; (800139c <HAL_ETH_MspInit+0x15c>)
 8001266:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001268:	4a4c      	ldr	r2, [pc, #304]	; (800139c <HAL_ETH_MspInit+0x15c>)
 800126a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800126e:	6313      	str	r3, [r2, #48]	; 0x30
 8001270:	4b4a      	ldr	r3, [pc, #296]	; (800139c <HAL_ETH_MspInit+0x15c>)
 8001272:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001274:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001278:	623b      	str	r3, [r7, #32]
 800127a:	6a3b      	ldr	r3, [r7, #32]
 800127c:	4b47      	ldr	r3, [pc, #284]	; (800139c <HAL_ETH_MspInit+0x15c>)
 800127e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001280:	4a46      	ldr	r2, [pc, #280]	; (800139c <HAL_ETH_MspInit+0x15c>)
 8001282:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8001286:	6313      	str	r3, [r2, #48]	; 0x30
 8001288:	4b44      	ldr	r3, [pc, #272]	; (800139c <HAL_ETH_MspInit+0x15c>)
 800128a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8001290:	61fb      	str	r3, [r7, #28]
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	4b41      	ldr	r3, [pc, #260]	; (800139c <HAL_ETH_MspInit+0x15c>)
 8001296:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001298:	4a40      	ldr	r2, [pc, #256]	; (800139c <HAL_ETH_MspInit+0x15c>)
 800129a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800129e:	6313      	str	r3, [r2, #48]	; 0x30
 80012a0:	4b3e      	ldr	r3, [pc, #248]	; (800139c <HAL_ETH_MspInit+0x15c>)
 80012a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80012a8:	61bb      	str	r3, [r7, #24]
 80012aa:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012ac:	4b3b      	ldr	r3, [pc, #236]	; (800139c <HAL_ETH_MspInit+0x15c>)
 80012ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b0:	4a3a      	ldr	r2, [pc, #232]	; (800139c <HAL_ETH_MspInit+0x15c>)
 80012b2:	f043 0304 	orr.w	r3, r3, #4
 80012b6:	6313      	str	r3, [r2, #48]	; 0x30
 80012b8:	4b38      	ldr	r3, [pc, #224]	; (800139c <HAL_ETH_MspInit+0x15c>)
 80012ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012bc:	f003 0304 	and.w	r3, r3, #4
 80012c0:	617b      	str	r3, [r7, #20]
 80012c2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012c4:	4b35      	ldr	r3, [pc, #212]	; (800139c <HAL_ETH_MspInit+0x15c>)
 80012c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012c8:	4a34      	ldr	r2, [pc, #208]	; (800139c <HAL_ETH_MspInit+0x15c>)
 80012ca:	f043 0301 	orr.w	r3, r3, #1
 80012ce:	6313      	str	r3, [r2, #48]	; 0x30
 80012d0:	4b32      	ldr	r3, [pc, #200]	; (800139c <HAL_ETH_MspInit+0x15c>)
 80012d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d4:	f003 0301 	and.w	r3, r3, #1
 80012d8:	613b      	str	r3, [r7, #16]
 80012da:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012dc:	4b2f      	ldr	r3, [pc, #188]	; (800139c <HAL_ETH_MspInit+0x15c>)
 80012de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e0:	4a2e      	ldr	r2, [pc, #184]	; (800139c <HAL_ETH_MspInit+0x15c>)
 80012e2:	f043 0302 	orr.w	r3, r3, #2
 80012e6:	6313      	str	r3, [r2, #48]	; 0x30
 80012e8:	4b2c      	ldr	r3, [pc, #176]	; (800139c <HAL_ETH_MspInit+0x15c>)
 80012ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ec:	f003 0302 	and.w	r3, r3, #2
 80012f0:	60fb      	str	r3, [r7, #12]
 80012f2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80012f4:	4b29      	ldr	r3, [pc, #164]	; (800139c <HAL_ETH_MspInit+0x15c>)
 80012f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012f8:	4a28      	ldr	r2, [pc, #160]	; (800139c <HAL_ETH_MspInit+0x15c>)
 80012fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012fe:	6313      	str	r3, [r2, #48]	; 0x30
 8001300:	4b26      	ldr	r3, [pc, #152]	; (800139c <HAL_ETH_MspInit+0x15c>)
 8001302:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001304:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001308:	60bb      	str	r3, [r7, #8]
 800130a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800130c:	2332      	movs	r3, #50	; 0x32
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001310:	2302      	movs	r3, #2
 8001312:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001314:	2300      	movs	r3, #0
 8001316:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001318:	2303      	movs	r3, #3
 800131a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800131c:	230b      	movs	r3, #11
 800131e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001320:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001324:	4619      	mov	r1, r3
 8001326:	481e      	ldr	r0, [pc, #120]	; (80013a0 <HAL_ETH_MspInit+0x160>)
 8001328:	f000 ff4e 	bl	80021c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800132c:	2386      	movs	r3, #134	; 0x86
 800132e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001330:	2302      	movs	r3, #2
 8001332:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001334:	2300      	movs	r3, #0
 8001336:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001338:	2303      	movs	r3, #3
 800133a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800133c:	230b      	movs	r3, #11
 800133e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001344:	4619      	mov	r1, r3
 8001346:	4817      	ldr	r0, [pc, #92]	; (80013a4 <HAL_ETH_MspInit+0x164>)
 8001348:	f000 ff3e 	bl	80021c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 800134c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001352:	2302      	movs	r3, #2
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135a:	2303      	movs	r3, #3
 800135c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800135e:	230b      	movs	r3, #11
 8001360:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 8001362:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001366:	4619      	mov	r1, r3
 8001368:	480f      	ldr	r0, [pc, #60]	; (80013a8 <HAL_ETH_MspInit+0x168>)
 800136a:	f000 ff2d 	bl	80021c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 800136e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001374:	2302      	movs	r3, #2
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001378:	2300      	movs	r3, #0
 800137a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800137c:	2303      	movs	r3, #3
 800137e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001380:	230b      	movs	r3, #11
 8001382:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001384:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001388:	4619      	mov	r1, r3
 800138a:	4808      	ldr	r0, [pc, #32]	; (80013ac <HAL_ETH_MspInit+0x16c>)
 800138c:	f000 ff1c 	bl	80021c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }

}
 8001390:	bf00      	nop
 8001392:	3738      	adds	r7, #56	; 0x38
 8001394:	46bd      	mov	sp, r7
 8001396:	bd80      	pop	{r7, pc}
 8001398:	40028000 	.word	0x40028000
 800139c:	40023800 	.word	0x40023800
 80013a0:	40020800 	.word	0x40020800
 80013a4:	40020000 	.word	0x40020000
 80013a8:	40020400 	.word	0x40020400
 80013ac:	40021800 	.word	0x40021800

080013b0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80013b0:	b480      	push	{r7}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM14)
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	4a0a      	ldr	r2, [pc, #40]	; (80013e8 <HAL_TIM_Base_MspInit+0x38>)
 80013be:	4293      	cmp	r3, r2
 80013c0:	d10b      	bne.n	80013da <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM14_MspInit 0 */

  /* USER CODE END TIM14_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM14_CLK_ENABLE();
 80013c2:	4b0a      	ldr	r3, [pc, #40]	; (80013ec <HAL_TIM_Base_MspInit+0x3c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013c6:	4a09      	ldr	r2, [pc, #36]	; (80013ec <HAL_TIM_Base_MspInit+0x3c>)
 80013c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013cc:	6413      	str	r3, [r2, #64]	; 0x40
 80013ce:	4b07      	ldr	r3, [pc, #28]	; (80013ec <HAL_TIM_Base_MspInit+0x3c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013d6:	60fb      	str	r3, [r7, #12]
 80013d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM14_MspInit 1 */

  /* USER CODE END TIM14_MspInit 1 */
  }

}
 80013da:	bf00      	nop
 80013dc:	3714      	adds	r7, #20
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40002000 	.word	0x40002000
 80013ec:	40023800 	.word	0x40023800

080013f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b0aa      	sub	sp, #168	; 0xa8
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013f8:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
 8001402:	609a      	str	r2, [r3, #8]
 8001404:	60da      	str	r2, [r3, #12]
 8001406:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001408:	f107 0310 	add.w	r3, r7, #16
 800140c:	2284      	movs	r2, #132	; 0x84
 800140e:	2100      	movs	r1, #0
 8001410:	4618      	mov	r0, r3
 8001412:	f008 f836 	bl	8009482 <memset>
  if(huart->Instance==USART3)
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	4a22      	ldr	r2, [pc, #136]	; (80014a4 <HAL_UART_MspInit+0xb4>)
 800141c:	4293      	cmp	r3, r2
 800141e:	d13c      	bne.n	800149a <HAL_UART_MspInit+0xaa>

  /* USER CODE END USART3_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8001420:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001424:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001426:	2300      	movs	r3, #0
 8001428:	65fb      	str	r3, [r7, #92]	; 0x5c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4618      	mov	r0, r3
 8001430:	f001 ff02 	bl	8003238 <HAL_RCCEx_PeriphCLKConfig>
 8001434:	4603      	mov	r3, r0
 8001436:	2b00      	cmp	r3, #0
 8001438:	d001      	beq.n	800143e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 800143a:	f7ff fcbb 	bl	8000db4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800143e:	4b1a      	ldr	r3, [pc, #104]	; (80014a8 <HAL_UART_MspInit+0xb8>)
 8001440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001442:	4a19      	ldr	r2, [pc, #100]	; (80014a8 <HAL_UART_MspInit+0xb8>)
 8001444:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001448:	6413      	str	r3, [r2, #64]	; 0x40
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <HAL_UART_MspInit+0xb8>)
 800144c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001452:	60fb      	str	r3, [r7, #12]
 8001454:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <HAL_UART_MspInit+0xb8>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800145a:	4a13      	ldr	r2, [pc, #76]	; (80014a8 <HAL_UART_MspInit+0xb8>)
 800145c:	f043 0308 	orr.w	r3, r3, #8
 8001460:	6313      	str	r3, [r2, #48]	; 0x30
 8001462:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <HAL_UART_MspInit+0xb8>)
 8001464:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001466:	f003 0308 	and.w	r3, r3, #8
 800146a:	60bb      	str	r3, [r7, #8]
 800146c:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800146e:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001472:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001476:	2302      	movs	r3, #2
 8001478:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800147c:	2300      	movs	r3, #0
 800147e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001482:	2303      	movs	r3, #3
 8001484:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001488:	2307      	movs	r3, #7
 800148a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800148e:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8001492:	4619      	mov	r1, r3
 8001494:	4805      	ldr	r0, [pc, #20]	; (80014ac <HAL_UART_MspInit+0xbc>)
 8001496:	f000 fe97 	bl	80021c8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800149a:	bf00      	nop
 800149c:	37a8      	adds	r7, #168	; 0xa8
 800149e:	46bd      	mov	sp, r7
 80014a0:	bd80      	pop	{r7, pc}
 80014a2:	bf00      	nop
 80014a4:	40004800 	.word	0x40004800
 80014a8:	40023800 	.word	0x40023800
 80014ac:	40020c00 	.word	0x40020c00

080014b0 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	b0ac      	sub	sp, #176	; 0xb0
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014b8:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80014bc:	2200      	movs	r2, #0
 80014be:	601a      	str	r2, [r3, #0]
 80014c0:	605a      	str	r2, [r3, #4]
 80014c2:	609a      	str	r2, [r3, #8]
 80014c4:	60da      	str	r2, [r3, #12]
 80014c6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80014c8:	f107 0318 	add.w	r3, r7, #24
 80014cc:	2284      	movs	r2, #132	; 0x84
 80014ce:	2100      	movs	r1, #0
 80014d0:	4618      	mov	r0, r3
 80014d2:	f007 ffd6 	bl	8009482 <memset>
  if(hpcd->Instance==USB_OTG_FS)
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80014de:	d159      	bne.n	8001594 <HAL_PCD_MspInit+0xe4>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 80014e0:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 80014e4:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 80014e6:	2300      	movs	r3, #0
 80014e8:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	4618      	mov	r0, r3
 80014f2:	f001 fea1 	bl	8003238 <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_PCD_MspInit+0x50>
    {
      Error_Handler();
 80014fc:	f7ff fc5a 	bl	8000db4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001500:	4b26      	ldr	r3, [pc, #152]	; (800159c <HAL_PCD_MspInit+0xec>)
 8001502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001504:	4a25      	ldr	r2, [pc, #148]	; (800159c <HAL_PCD_MspInit+0xec>)
 8001506:	f043 0301 	orr.w	r3, r3, #1
 800150a:	6313      	str	r3, [r2, #48]	; 0x30
 800150c:	4b23      	ldr	r3, [pc, #140]	; (800159c <HAL_PCD_MspInit+0xec>)
 800150e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001510:	f003 0301 	and.w	r3, r3, #1
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	697b      	ldr	r3, [r7, #20]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8001518:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800151c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001520:	2302      	movs	r3, #2
 8001522:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001526:	2300      	movs	r3, #0
 8001528:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800152c:	2303      	movs	r3, #3
 800152e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8001532:	230a      	movs	r3, #10
 8001534:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001538:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800153c:	4619      	mov	r1, r3
 800153e:	4818      	ldr	r0, [pc, #96]	; (80015a0 <HAL_PCD_MspInit+0xf0>)
 8001540:	f000 fe42 	bl	80021c8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8001544:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001548:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800154c:	2300      	movs	r3, #0
 800154e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001552:	2300      	movs	r3, #0
 8001554:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8001558:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800155c:	4619      	mov	r1, r3
 800155e:	4810      	ldr	r0, [pc, #64]	; (80015a0 <HAL_PCD_MspInit+0xf0>)
 8001560:	f000 fe32 	bl	80021c8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001564:	4b0d      	ldr	r3, [pc, #52]	; (800159c <HAL_PCD_MspInit+0xec>)
 8001566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001568:	4a0c      	ldr	r2, [pc, #48]	; (800159c <HAL_PCD_MspInit+0xec>)
 800156a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800156e:	6353      	str	r3, [r2, #52]	; 0x34
 8001570:	4b0a      	ldr	r3, [pc, #40]	; (800159c <HAL_PCD_MspInit+0xec>)
 8001572:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001578:	613b      	str	r3, [r7, #16]
 800157a:	693b      	ldr	r3, [r7, #16]
 800157c:	4b07      	ldr	r3, [pc, #28]	; (800159c <HAL_PCD_MspInit+0xec>)
 800157e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001580:	4a06      	ldr	r2, [pc, #24]	; (800159c <HAL_PCD_MspInit+0xec>)
 8001582:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001586:	6453      	str	r3, [r2, #68]	; 0x44
 8001588:	4b04      	ldr	r3, [pc, #16]	; (800159c <HAL_PCD_MspInit+0xec>)
 800158a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800158c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001590:	60fb      	str	r3, [r7, #12]
 8001592:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8001594:	bf00      	nop
 8001596:	37b0      	adds	r7, #176	; 0xb0
 8001598:	46bd      	mov	sp, r7
 800159a:	bd80      	pop	{r7, pc}
 800159c:	40023800 	.word	0x40023800
 80015a0:	40020000 	.word	0x40020000

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <NMI_Handler+0x4>

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <MemManage_Handler+0x4>

080015b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ce:	4770      	bx	lr

080015d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015d0:	b480      	push	{r7}
 80015d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d4:	bf00      	nop
 80015d6:	46bd      	mov	sp, r7
 80015d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015dc:	4770      	bx	lr

080015de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015de:	b480      	push	{r7}
 80015e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015e2:	bf00      	nop
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr

080015ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015f0:	f000 f8b0 	bl	8001754 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015f4:	bf00      	nop
 80015f6:	bd80      	pop	{r7, pc}

080015f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b086      	sub	sp, #24
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001600:	4a14      	ldr	r2, [pc, #80]	; (8001654 <_sbrk+0x5c>)
 8001602:	4b15      	ldr	r3, [pc, #84]	; (8001658 <_sbrk+0x60>)
 8001604:	1ad3      	subs	r3, r2, r3
 8001606:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001608:	697b      	ldr	r3, [r7, #20]
 800160a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800160c:	4b13      	ldr	r3, [pc, #76]	; (800165c <_sbrk+0x64>)
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	2b00      	cmp	r3, #0
 8001612:	d102      	bne.n	800161a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001614:	4b11      	ldr	r3, [pc, #68]	; (800165c <_sbrk+0x64>)
 8001616:	4a12      	ldr	r2, [pc, #72]	; (8001660 <_sbrk+0x68>)
 8001618:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800161a:	4b10      	ldr	r3, [pc, #64]	; (800165c <_sbrk+0x64>)
 800161c:	681a      	ldr	r2, [r3, #0]
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4413      	add	r3, r2
 8001622:	693a      	ldr	r2, [r7, #16]
 8001624:	429a      	cmp	r2, r3
 8001626:	d207      	bcs.n	8001638 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001628:	f007 ff44 	bl	80094b4 <__errno>
 800162c:	4603      	mov	r3, r0
 800162e:	220c      	movs	r2, #12
 8001630:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001632:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001636:	e009      	b.n	800164c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001638:	4b08      	ldr	r3, [pc, #32]	; (800165c <_sbrk+0x64>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800163e:	4b07      	ldr	r3, [pc, #28]	; (800165c <_sbrk+0x64>)
 8001640:	681a      	ldr	r2, [r3, #0]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	4413      	add	r3, r2
 8001646:	4a05      	ldr	r2, [pc, #20]	; (800165c <_sbrk+0x64>)
 8001648:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800164a:	68fb      	ldr	r3, [r7, #12]
}
 800164c:	4618      	mov	r0, r3
 800164e:	3718      	adds	r7, #24
 8001650:	46bd      	mov	sp, r7
 8001652:	bd80      	pop	{r7, pc}
 8001654:	20050000 	.word	0x20050000
 8001658:	00000800 	.word	0x00000800
 800165c:	20019848 	.word	0x20019848
 8001660:	20019af8 	.word	0x20019af8

08001664 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001664:	b480      	push	{r7}
 8001666:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001668:	4b06      	ldr	r3, [pc, #24]	; (8001684 <SystemInit+0x20>)
 800166a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800166e:	4a05      	ldr	r2, [pc, #20]	; (8001684 <SystemInit+0x20>)
 8001670:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001674:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001678:	bf00      	nop
 800167a:	46bd      	mov	sp, r7
 800167c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001680:	4770      	bx	lr
 8001682:	bf00      	nop
 8001684:	e000ed00 	.word	0xe000ed00

08001688 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001688:	f8df d034 	ldr.w	sp, [pc, #52]	; 80016c0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800168c:	480d      	ldr	r0, [pc, #52]	; (80016c4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800168e:	490e      	ldr	r1, [pc, #56]	; (80016c8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001690:	4a0e      	ldr	r2, [pc, #56]	; (80016cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001692:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001694:	e002      	b.n	800169c <LoopCopyDataInit>

08001696 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001696:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001698:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800169a:	3304      	adds	r3, #4

0800169c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800169c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800169e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016a0:	d3f9      	bcc.n	8001696 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016a2:	4a0b      	ldr	r2, [pc, #44]	; (80016d0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80016a4:	4c0b      	ldr	r4, [pc, #44]	; (80016d4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016a8:	e001      	b.n	80016ae <LoopFillZerobss>

080016aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016ac:	3204      	adds	r2, #4

080016ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016b0:	d3fb      	bcc.n	80016aa <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80016b2:	f7ff ffd7 	bl	8001664 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80016b6:	f007 ff03 	bl	80094c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ba:	f7fe ffe1 	bl	8000680 <main>
  bx  lr    
 80016be:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016c0:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80016c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016c8:	20001edc 	.word	0x20001edc
  ldr r2, =_sidata
 80016cc:	080889dc 	.word	0x080889dc
  ldr r2, =_sbss
 80016d0:	20002020 	.word	0x20002020
  ldr r4, =_ebss
 80016d4:	20019af8 	.word	0x20019af8

080016d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016d8:	e7fe      	b.n	80016d8 <ADC_IRQHandler>

080016da <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016da:	b580      	push	{r7, lr}
 80016dc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016de:	2003      	movs	r0, #3
 80016e0:	f000 f92e 	bl	8001940 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016e4:	2000      	movs	r0, #0
 80016e6:	f000 f805 	bl	80016f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016ea:	f7ff fd65 	bl	80011b8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016ee:	2300      	movs	r3, #0
}
 80016f0:	4618      	mov	r0, r3
 80016f2:	bd80      	pop	{r7, pc}

080016f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016f4:	b580      	push	{r7, lr}
 80016f6:	b082      	sub	sp, #8
 80016f8:	af00      	add	r7, sp, #0
 80016fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016fc:	4b12      	ldr	r3, [pc, #72]	; (8001748 <HAL_InitTick+0x54>)
 80016fe:	681a      	ldr	r2, [r3, #0]
 8001700:	4b12      	ldr	r3, [pc, #72]	; (800174c <HAL_InitTick+0x58>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	4619      	mov	r1, r3
 8001706:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800170a:	fbb3 f3f1 	udiv	r3, r3, r1
 800170e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001712:	4618      	mov	r0, r3
 8001714:	f000 f93b 	bl	800198e <HAL_SYSTICK_Config>
 8001718:	4603      	mov	r3, r0
 800171a:	2b00      	cmp	r3, #0
 800171c:	d001      	beq.n	8001722 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800171e:	2301      	movs	r3, #1
 8001720:	e00e      	b.n	8001740 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	2b0f      	cmp	r3, #15
 8001726:	d80a      	bhi.n	800173e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001728:	2200      	movs	r2, #0
 800172a:	6879      	ldr	r1, [r7, #4]
 800172c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001730:	f000 f911 	bl	8001956 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001734:	4a06      	ldr	r2, [pc, #24]	; (8001750 <HAL_InitTick+0x5c>)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800173a:	2300      	movs	r3, #0
 800173c:	e000      	b.n	8001740 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800173e:	2301      	movs	r3, #1
}
 8001740:	4618      	mov	r0, r3
 8001742:	3708      	adds	r7, #8
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	20000000 	.word	0x20000000
 800174c:	20000008 	.word	0x20000008
 8001750:	20000004 	.word	0x20000004

08001754 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001754:	b480      	push	{r7}
 8001756:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <HAL_IncTick+0x20>)
 800175a:	781b      	ldrb	r3, [r3, #0]
 800175c:	461a      	mov	r2, r3
 800175e:	4b06      	ldr	r3, [pc, #24]	; (8001778 <HAL_IncTick+0x24>)
 8001760:	681b      	ldr	r3, [r3, #0]
 8001762:	4413      	add	r3, r2
 8001764:	4a04      	ldr	r2, [pc, #16]	; (8001778 <HAL_IncTick+0x24>)
 8001766:	6013      	str	r3, [r2, #0]
}
 8001768:	bf00      	nop
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	20000008 	.word	0x20000008
 8001778:	2001984c 	.word	0x2001984c

0800177c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800177c:	b480      	push	{r7}
 800177e:	af00      	add	r7, sp, #0
  return uwTick;
 8001780:	4b03      	ldr	r3, [pc, #12]	; (8001790 <HAL_GetTick+0x14>)
 8001782:	681b      	ldr	r3, [r3, #0]
}
 8001784:	4618      	mov	r0, r3
 8001786:	46bd      	mov	sp, r7
 8001788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178c:	4770      	bx	lr
 800178e:	bf00      	nop
 8001790:	2001984c 	.word	0x2001984c

08001794 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800179c:	f7ff ffee 	bl	800177c <HAL_GetTick>
 80017a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017a6:	68fb      	ldr	r3, [r7, #12]
 80017a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80017ac:	d005      	beq.n	80017ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ae:	4b0a      	ldr	r3, [pc, #40]	; (80017d8 <HAL_Delay+0x44>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	461a      	mov	r2, r3
 80017b4:	68fb      	ldr	r3, [r7, #12]
 80017b6:	4413      	add	r3, r2
 80017b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80017ba:	bf00      	nop
 80017bc:	f7ff ffde 	bl	800177c <HAL_GetTick>
 80017c0:	4602      	mov	r2, r0
 80017c2:	68bb      	ldr	r3, [r7, #8]
 80017c4:	1ad3      	subs	r3, r2, r3
 80017c6:	68fa      	ldr	r2, [r7, #12]
 80017c8:	429a      	cmp	r2, r3
 80017ca:	d8f7      	bhi.n	80017bc <HAL_Delay+0x28>
  {
  }
}
 80017cc:	bf00      	nop
 80017ce:	bf00      	nop
 80017d0:	3710      	adds	r7, #16
 80017d2:	46bd      	mov	sp, r7
 80017d4:	bd80      	pop	{r7, pc}
 80017d6:	bf00      	nop
 80017d8:	20000008 	.word	0x20000008

080017dc <__NVIC_SetPriorityGrouping>:
{
 80017dc:	b480      	push	{r7}
 80017de:	b085      	sub	sp, #20
 80017e0:	af00      	add	r7, sp, #0
 80017e2:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017ec:	4b0b      	ldr	r3, [pc, #44]	; (800181c <__NVIC_SetPriorityGrouping+0x40>)
 80017ee:	68db      	ldr	r3, [r3, #12]
 80017f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017f2:	68ba      	ldr	r2, [r7, #8]
 80017f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80017f8:	4013      	ands	r3, r2
 80017fa:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001800:	68bb      	ldr	r3, [r7, #8]
 8001802:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001804:	4b06      	ldr	r3, [pc, #24]	; (8001820 <__NVIC_SetPriorityGrouping+0x44>)
 8001806:	4313      	orrs	r3, r2
 8001808:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800180a:	4a04      	ldr	r2, [pc, #16]	; (800181c <__NVIC_SetPriorityGrouping+0x40>)
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	60d3      	str	r3, [r2, #12]
}
 8001810:	bf00      	nop
 8001812:	3714      	adds	r7, #20
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr
 800181c:	e000ed00 	.word	0xe000ed00
 8001820:	05fa0000 	.word	0x05fa0000

08001824 <__NVIC_GetPriorityGrouping>:
{
 8001824:	b480      	push	{r7}
 8001826:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001828:	4b04      	ldr	r3, [pc, #16]	; (800183c <__NVIC_GetPriorityGrouping+0x18>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	0a1b      	lsrs	r3, r3, #8
 800182e:	f003 0307 	and.w	r3, r3, #7
}
 8001832:	4618      	mov	r0, r3
 8001834:	46bd      	mov	sp, r7
 8001836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183a:	4770      	bx	lr
 800183c:	e000ed00 	.word	0xe000ed00

08001840 <__NVIC_SetPriority>:
{
 8001840:	b480      	push	{r7}
 8001842:	b083      	sub	sp, #12
 8001844:	af00      	add	r7, sp, #0
 8001846:	4603      	mov	r3, r0
 8001848:	6039      	str	r1, [r7, #0]
 800184a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800184c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001850:	2b00      	cmp	r3, #0
 8001852:	db0a      	blt.n	800186a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001854:	683b      	ldr	r3, [r7, #0]
 8001856:	b2da      	uxtb	r2, r3
 8001858:	490c      	ldr	r1, [pc, #48]	; (800188c <__NVIC_SetPriority+0x4c>)
 800185a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800185e:	0112      	lsls	r2, r2, #4
 8001860:	b2d2      	uxtb	r2, r2
 8001862:	440b      	add	r3, r1
 8001864:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8001868:	e00a      	b.n	8001880 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	b2da      	uxtb	r2, r3
 800186e:	4908      	ldr	r1, [pc, #32]	; (8001890 <__NVIC_SetPriority+0x50>)
 8001870:	79fb      	ldrb	r3, [r7, #7]
 8001872:	f003 030f 	and.w	r3, r3, #15
 8001876:	3b04      	subs	r3, #4
 8001878:	0112      	lsls	r2, r2, #4
 800187a:	b2d2      	uxtb	r2, r2
 800187c:	440b      	add	r3, r1
 800187e:	761a      	strb	r2, [r3, #24]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <NVIC_EncodePriority>:
{
 8001894:	b480      	push	{r7}
 8001896:	b089      	sub	sp, #36	; 0x24
 8001898:	af00      	add	r7, sp, #0
 800189a:	60f8      	str	r0, [r7, #12]
 800189c:	60b9      	str	r1, [r7, #8]
 800189e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	f003 0307 	and.w	r3, r3, #7
 80018a6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018a8:	69fb      	ldr	r3, [r7, #28]
 80018aa:	f1c3 0307 	rsb	r3, r3, #7
 80018ae:	2b04      	cmp	r3, #4
 80018b0:	bf28      	it	cs
 80018b2:	2304      	movcs	r3, #4
 80018b4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018b6:	69fb      	ldr	r3, [r7, #28]
 80018b8:	3304      	adds	r3, #4
 80018ba:	2b06      	cmp	r3, #6
 80018bc:	d902      	bls.n	80018c4 <NVIC_EncodePriority+0x30>
 80018be:	69fb      	ldr	r3, [r7, #28]
 80018c0:	3b03      	subs	r3, #3
 80018c2:	e000      	b.n	80018c6 <NVIC_EncodePriority+0x32>
 80018c4:	2300      	movs	r3, #0
 80018c6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80018cc:	69bb      	ldr	r3, [r7, #24]
 80018ce:	fa02 f303 	lsl.w	r3, r2, r3
 80018d2:	43da      	mvns	r2, r3
 80018d4:	68bb      	ldr	r3, [r7, #8]
 80018d6:	401a      	ands	r2, r3
 80018d8:	697b      	ldr	r3, [r7, #20]
 80018da:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80018e0:	697b      	ldr	r3, [r7, #20]
 80018e2:	fa01 f303 	lsl.w	r3, r1, r3
 80018e6:	43d9      	mvns	r1, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018ec:	4313      	orrs	r3, r2
}
 80018ee:	4618      	mov	r0, r3
 80018f0:	3724      	adds	r7, #36	; 0x24
 80018f2:	46bd      	mov	sp, r7
 80018f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f8:	4770      	bx	lr
	...

080018fc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b082      	sub	sp, #8
 8001900:	af00      	add	r7, sp, #0
 8001902:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001904:	687b      	ldr	r3, [r7, #4]
 8001906:	3b01      	subs	r3, #1
 8001908:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800190c:	d301      	bcc.n	8001912 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800190e:	2301      	movs	r3, #1
 8001910:	e00f      	b.n	8001932 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001912:	4a0a      	ldr	r2, [pc, #40]	; (800193c <SysTick_Config+0x40>)
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	3b01      	subs	r3, #1
 8001918:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800191a:	210f      	movs	r1, #15
 800191c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001920:	f7ff ff8e 	bl	8001840 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001924:	4b05      	ldr	r3, [pc, #20]	; (800193c <SysTick_Config+0x40>)
 8001926:	2200      	movs	r2, #0
 8001928:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800192a:	4b04      	ldr	r3, [pc, #16]	; (800193c <SysTick_Config+0x40>)
 800192c:	2207      	movs	r2, #7
 800192e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001930:	2300      	movs	r3, #0
}
 8001932:	4618      	mov	r0, r3
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	e000e010 	.word	0xe000e010

08001940 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b082      	sub	sp, #8
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001948:	6878      	ldr	r0, [r7, #4]
 800194a:	f7ff ff47 	bl	80017dc <__NVIC_SetPriorityGrouping>
}
 800194e:	bf00      	nop
 8001950:	3708      	adds	r7, #8
 8001952:	46bd      	mov	sp, r7
 8001954:	bd80      	pop	{r7, pc}

08001956 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001956:	b580      	push	{r7, lr}
 8001958:	b086      	sub	sp, #24
 800195a:	af00      	add	r7, sp, #0
 800195c:	4603      	mov	r3, r0
 800195e:	60b9      	str	r1, [r7, #8]
 8001960:	607a      	str	r2, [r7, #4]
 8001962:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001964:	2300      	movs	r3, #0
 8001966:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001968:	f7ff ff5c 	bl	8001824 <__NVIC_GetPriorityGrouping>
 800196c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800196e:	687a      	ldr	r2, [r7, #4]
 8001970:	68b9      	ldr	r1, [r7, #8]
 8001972:	6978      	ldr	r0, [r7, #20]
 8001974:	f7ff ff8e 	bl	8001894 <NVIC_EncodePriority>
 8001978:	4602      	mov	r2, r0
 800197a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800197e:	4611      	mov	r1, r2
 8001980:	4618      	mov	r0, r3
 8001982:	f7ff ff5d 	bl	8001840 <__NVIC_SetPriority>
}
 8001986:	bf00      	nop
 8001988:	3718      	adds	r7, #24
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}

0800198e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800198e:	b580      	push	{r7, lr}
 8001990:	b082      	sub	sp, #8
 8001992:	af00      	add	r7, sp, #0
 8001994:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001996:	6878      	ldr	r0, [r7, #4]
 8001998:	f7ff ffb0 	bl	80018fc <SysTick_Config>
 800199c:	4603      	mov	r3, r0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	3708      	adds	r7, #8
 80019a2:	46bd      	mov	sp, r7
 80019a4:	bd80      	pop	{r7, pc}
	...

080019a8 <HAL_CRC_Init>:
  *         parameters in the CRC_InitTypeDef and create the associated handle.
  * @param  hcrc CRC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRC_Init(CRC_HandleTypeDef *hcrc)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Check the CRC handle allocation */
  if (hcrc == NULL)
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d101      	bne.n	80019ba <HAL_CRC_Init+0x12>
  {
    return HAL_ERROR;
 80019b6:	2301      	movs	r3, #1
 80019b8:	e054      	b.n	8001a64 <HAL_CRC_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_CRC_ALL_INSTANCE(hcrc->Instance));

  if (hcrc->State == HAL_CRC_STATE_RESET)
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	7f5b      	ldrb	r3, [r3, #29]
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	2b00      	cmp	r3, #0
 80019c2:	d105      	bne.n	80019d0 <HAL_CRC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hcrc->Lock = HAL_UNLOCKED;
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	2200      	movs	r2, #0
 80019c8:	771a      	strb	r2, [r3, #28]
    /* Init the low level hardware */
    HAL_CRC_MspInit(hcrc);
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff fc18 	bl	8001200 <HAL_CRC_MspInit>
  }

  hcrc->State = HAL_CRC_STATE_BUSY;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	2202      	movs	r2, #2
 80019d4:	775a      	strb	r2, [r3, #29]

  /* check whether or not non-default generating polynomial has been
   * picked up by user */
  assert_param(IS_DEFAULT_POLYNOMIAL(hcrc->Init.DefaultPolynomialUse));
  if (hcrc->Init.DefaultPolynomialUse == DEFAULT_POLYNOMIAL_ENABLE)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	791b      	ldrb	r3, [r3, #4]
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d10c      	bne.n	80019f8 <HAL_CRC_Init+0x50>
  {
    /* initialize peripheral with default generating polynomial */
    WRITE_REG(hcrc->Instance->POL, DEFAULT_CRC32_POLY);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a22      	ldr	r2, [pc, #136]	; (8001a6c <HAL_CRC_Init+0xc4>)
 80019e4:	615a      	str	r2, [r3, #20]
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, CRC_POLYLENGTH_32B);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f022 0218 	bic.w	r2, r2, #24
 80019f4:	609a      	str	r2, [r3, #8]
 80019f6:	e00c      	b.n	8001a12 <HAL_CRC_Init+0x6a>
  }
  else
  {
    /* initialize CRC peripheral with generating polynomial defined by user */
    if (HAL_CRCEx_Polynomial_Set(hcrc, hcrc->Init.GeneratingPolynomial, hcrc->Init.CRCLength) != HAL_OK)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	6899      	ldr	r1, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	461a      	mov	r2, r3
 8001a02:	6878      	ldr	r0, [r7, #4]
 8001a04:	f000 f834 	bl	8001a70 <HAL_CRCEx_Polynomial_Set>
 8001a08:	4603      	mov	r3, r0
 8001a0a:	2b00      	cmp	r3, #0
 8001a0c:	d001      	beq.n	8001a12 <HAL_CRC_Init+0x6a>
    {
      return HAL_ERROR;
 8001a0e:	2301      	movs	r3, #1
 8001a10:	e028      	b.n	8001a64 <HAL_CRC_Init+0xbc>
  }

  /* check whether or not non-default CRC initial value has been
   * picked up by user */
  assert_param(IS_DEFAULT_INIT_VALUE(hcrc->Init.DefaultInitValueUse));
  if (hcrc->Init.DefaultInitValueUse == DEFAULT_INIT_VALUE_ENABLE)
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	795b      	ldrb	r3, [r3, #5]
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d105      	bne.n	8001a26 <HAL_CRC_Init+0x7e>
  {
    WRITE_REG(hcrc->Instance->INIT, DEFAULT_CRC_INITVALUE);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001a22:	611a      	str	r2, [r3, #16]
 8001a24:	e004      	b.n	8001a30 <HAL_CRC_Init+0x88>
  }
  else
  {
    WRITE_REG(hcrc->Instance->INIT, hcrc->Init.InitValue);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	687a      	ldr	r2, [r7, #4]
 8001a2c:	6912      	ldr	r2, [r2, #16]
 8001a2e:	611a      	str	r2, [r3, #16]
  }


  /* set input data inversion mode */
  assert_param(IS_CRC_INPUTDATA_INVERSION_MODE(hcrc->Init.InputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_IN, hcrc->Init.InputDataInversionMode);
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	689b      	ldr	r3, [r3, #8]
 8001a36:	f023 0160 	bic.w	r1, r3, #96	; 0x60
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	695a      	ldr	r2, [r3, #20]
 8001a3e:	687b      	ldr	r3, [r7, #4]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	430a      	orrs	r2, r1
 8001a44:	609a      	str	r2, [r3, #8]

  /* set output data inversion mode */
  assert_param(IS_CRC_OUTPUTDATA_INVERSION_MODE(hcrc->Init.OutputDataInversionMode));
  MODIFY_REG(hcrc->Instance->CR, CRC_CR_REV_OUT, hcrc->Init.OutputDataInversionMode);
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	681b      	ldr	r3, [r3, #0]
 8001a4a:	689b      	ldr	r3, [r3, #8]
 8001a4c:	f023 0180 	bic.w	r1, r3, #128	; 0x80
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699a      	ldr	r2, [r3, #24]
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	430a      	orrs	r2, r1
 8001a5a:	609a      	str	r2, [r3, #8]
  /* makes sure the input data format (bytes, halfwords or words stream)
   * is properly specified by user */
  assert_param(IS_CRC_INPUTDATA_FORMAT(hcrc->InputDataFormat));

  /* Change CRC peripheral state */
  hcrc->State = HAL_CRC_STATE_READY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2201      	movs	r2, #1
 8001a60:	775a      	strb	r2, [r3, #29]

  /* Return function status */
  return HAL_OK;
 8001a62:	2300      	movs	r3, #0
}
 8001a64:	4618      	mov	r0, r3
 8001a66:	3708      	adds	r7, #8
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	bd80      	pop	{r7, pc}
 8001a6c:	04c11db7 	.word	0x04c11db7

08001a70 <HAL_CRCEx_Polynomial_Set>:
  *          @arg @ref CRC_POLYLENGTH_16B 16-bit long CRC (generating polynomial of degree 16)
  *          @arg @ref CRC_POLYLENGTH_32B 32-bit long CRC (generating polynomial of degree 32)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CRCEx_Polynomial_Set(CRC_HandleTypeDef *hcrc, uint32_t Pol, uint32_t PolyLength)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b087      	sub	sp, #28
 8001a74:	af00      	add	r7, sp, #0
 8001a76:	60f8      	str	r0, [r7, #12]
 8001a78:	60b9      	str	r1, [r7, #8]
 8001a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	75fb      	strb	r3, [r7, #23]
  uint32_t msb = 31U; /* polynomial degree is 32 at most, so msb is initialized to max value */
 8001a80:	231f      	movs	r3, #31
 8001a82:	613b      	str	r3, [r7, #16]
   * definition. HAL_ERROR is reported if Pol degree is
   * larger than that indicated by PolyLength.
   * Look for MSB position: msb will contain the degree of
   *  the second to the largest polynomial member. E.g., for
   *  X^7 + X^6 + X^5 + X^2 + 1, msb = 6. */
  while ((msb-- > 0U) && ((Pol & ((uint32_t)(0x1U) << (msb & 0x1FU))) == 0U))
 8001a84:	bf00      	nop
 8001a86:	693b      	ldr	r3, [r7, #16]
 8001a88:	1e5a      	subs	r2, r3, #1
 8001a8a:	613a      	str	r2, [r7, #16]
 8001a8c:	2b00      	cmp	r3, #0
 8001a8e:	d009      	beq.n	8001aa4 <HAL_CRCEx_Polynomial_Set+0x34>
 8001a90:	693b      	ldr	r3, [r7, #16]
 8001a92:	f003 031f 	and.w	r3, r3, #31
 8001a96:	68ba      	ldr	r2, [r7, #8]
 8001a98:	fa22 f303 	lsr.w	r3, r2, r3
 8001a9c:	f003 0301 	and.w	r3, r3, #1
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d0f0      	beq.n	8001a86 <HAL_CRCEx_Polynomial_Set+0x16>
  {
  }

  switch (PolyLength)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2b18      	cmp	r3, #24
 8001aa8:	d846      	bhi.n	8001b38 <HAL_CRCEx_Polynomial_Set+0xc8>
 8001aaa:	a201      	add	r2, pc, #4	; (adr r2, 8001ab0 <HAL_CRCEx_Polynomial_Set+0x40>)
 8001aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ab0:	08001b3f 	.word	0x08001b3f
 8001ab4:	08001b39 	.word	0x08001b39
 8001ab8:	08001b39 	.word	0x08001b39
 8001abc:	08001b39 	.word	0x08001b39
 8001ac0:	08001b39 	.word	0x08001b39
 8001ac4:	08001b39 	.word	0x08001b39
 8001ac8:	08001b39 	.word	0x08001b39
 8001acc:	08001b39 	.word	0x08001b39
 8001ad0:	08001b2d 	.word	0x08001b2d
 8001ad4:	08001b39 	.word	0x08001b39
 8001ad8:	08001b39 	.word	0x08001b39
 8001adc:	08001b39 	.word	0x08001b39
 8001ae0:	08001b39 	.word	0x08001b39
 8001ae4:	08001b39 	.word	0x08001b39
 8001ae8:	08001b39 	.word	0x08001b39
 8001aec:	08001b39 	.word	0x08001b39
 8001af0:	08001b21 	.word	0x08001b21
 8001af4:	08001b39 	.word	0x08001b39
 8001af8:	08001b39 	.word	0x08001b39
 8001afc:	08001b39 	.word	0x08001b39
 8001b00:	08001b39 	.word	0x08001b39
 8001b04:	08001b39 	.word	0x08001b39
 8001b08:	08001b39 	.word	0x08001b39
 8001b0c:	08001b39 	.word	0x08001b39
 8001b10:	08001b15 	.word	0x08001b15
  {
    case CRC_POLYLENGTH_7B:
      if (msb >= HAL_CRC_LENGTH_7B)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	2b06      	cmp	r3, #6
 8001b18:	d913      	bls.n	8001b42 <HAL_CRCEx_Polynomial_Set+0xd2>
      {
        status =   HAL_ERROR;
 8001b1a:	2301      	movs	r3, #1
 8001b1c:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b1e:	e010      	b.n	8001b42 <HAL_CRCEx_Polynomial_Set+0xd2>
    case CRC_POLYLENGTH_8B:
      if (msb >= HAL_CRC_LENGTH_8B)
 8001b20:	693b      	ldr	r3, [r7, #16]
 8001b22:	2b07      	cmp	r3, #7
 8001b24:	d90f      	bls.n	8001b46 <HAL_CRCEx_Polynomial_Set+0xd6>
      {
        status =   HAL_ERROR;
 8001b26:	2301      	movs	r3, #1
 8001b28:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b2a:	e00c      	b.n	8001b46 <HAL_CRCEx_Polynomial_Set+0xd6>
    case CRC_POLYLENGTH_16B:
      if (msb >= HAL_CRC_LENGTH_16B)
 8001b2c:	693b      	ldr	r3, [r7, #16]
 8001b2e:	2b0f      	cmp	r3, #15
 8001b30:	d90b      	bls.n	8001b4a <HAL_CRCEx_Polynomial_Set+0xda>
      {
        status =   HAL_ERROR;
 8001b32:	2301      	movs	r3, #1
 8001b34:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8001b36:	e008      	b.n	8001b4a <HAL_CRCEx_Polynomial_Set+0xda>

    case CRC_POLYLENGTH_32B:
      /* no polynomial definition vs. polynomial length issue possible */
      break;
    default:
      status =  HAL_ERROR;
 8001b38:	2301      	movs	r3, #1
 8001b3a:	75fb      	strb	r3, [r7, #23]
      break;
 8001b3c:	e006      	b.n	8001b4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b3e:	bf00      	nop
 8001b40:	e004      	b.n	8001b4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b42:	bf00      	nop
 8001b44:	e002      	b.n	8001b4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b46:	bf00      	nop
 8001b48:	e000      	b.n	8001b4c <HAL_CRCEx_Polynomial_Set+0xdc>
      break;
 8001b4a:	bf00      	nop
  }
  if (status == HAL_OK)
 8001b4c:	7dfb      	ldrb	r3, [r7, #23]
 8001b4e:	2b00      	cmp	r3, #0
 8001b50:	d10d      	bne.n	8001b6e <HAL_CRCEx_Polynomial_Set+0xfe>
  {
    /* set generating polynomial */
    WRITE_REG(hcrc->Instance->POL, Pol);
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	68ba      	ldr	r2, [r7, #8]
 8001b58:	615a      	str	r2, [r3, #20]

    /* set generating polynomial size */
    MODIFY_REG(hcrc->Instance->CR, CRC_CR_POLYSIZE, PolyLength);
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f023 0118 	bic.w	r1, r3, #24
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	687a      	ldr	r2, [r7, #4]
 8001b6a:	430a      	orrs	r2, r1
 8001b6c:	609a      	str	r2, [r3, #8]
  }
  /* Return function status */
  return status;
 8001b6e:	7dfb      	ldrb	r3, [r7, #23]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d101      	bne.n	8001b8e <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e06a      	b.n	8001c64 <HAL_ETH_Init+0xe8>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d106      	bne.n	8001ba6 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2223      	movs	r2, #35	; 0x23
 8001b9c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8001ba0:	6878      	ldr	r0, [r7, #4]
 8001ba2:	f7ff fb4d 	bl	8001240 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ba6:	4b31      	ldr	r3, [pc, #196]	; (8001c6c <HAL_ETH_Init+0xf0>)
 8001ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001baa:	4a30      	ldr	r2, [pc, #192]	; (8001c6c <HAL_ETH_Init+0xf0>)
 8001bac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001bb0:	6453      	str	r3, [r2, #68]	; 0x44
 8001bb2:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <HAL_ETH_Init+0xf0>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bb6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001bba:	60bb      	str	r3, [r7, #8]
 8001bbc:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8001bbe:	4b2c      	ldr	r3, [pc, #176]	; (8001c70 <HAL_ETH_Init+0xf4>)
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4a2b      	ldr	r2, [pc, #172]	; (8001c70 <HAL_ETH_Init+0xf4>)
 8001bc4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001bc8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8001bca:	4b29      	ldr	r3, [pc, #164]	; (8001c70 <HAL_ETH_Init+0xf4>)
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	689b      	ldr	r3, [r3, #8]
 8001bd2:	4927      	ldr	r1, [pc, #156]	; (8001c70 <HAL_ETH_Init+0xf4>)
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001bd8:	4b25      	ldr	r3, [pc, #148]	; (8001c70 <HAL_ETH_Init+0xf4>)
 8001bda:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001be4:	681b      	ldr	r3, [r3, #0]
 8001be6:	687a      	ldr	r2, [r7, #4]
 8001be8:	6812      	ldr	r2, [r2, #0]
 8001bea:	f043 0301 	orr.w	r3, r3, #1
 8001bee:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001bf2:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001bf4:	f7ff fdc2 	bl	800177c <HAL_GetTick>
 8001bf8:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001bfa:	e011      	b.n	8001c20 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8001bfc:	f7ff fdbe 	bl	800177c <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001c0a:	d909      	bls.n	8001c20 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2204      	movs	r2, #4
 8001c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	22e0      	movs	r2, #224	; 0xe0
 8001c18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8001c1c:	2301      	movs	r3, #1
 8001c1e:	e021      	b.n	8001c64 <HAL_ETH_Init+0xe8>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f003 0301 	and.w	r3, r3, #1
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d1e4      	bne.n	8001bfc <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001c32:	6878      	ldr	r0, [r7, #4]
 8001c34:	f000 f958 	bl	8001ee8 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f000 f9ff 	bl	800203c <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8001c3e:	6878      	ldr	r0, [r7, #4]
 8001c40:	f000 fa55 	bl	80020ee <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	685b      	ldr	r3, [r3, #4]
 8001c48:	461a      	mov	r2, r3
 8001c4a:	2100      	movs	r1, #0
 8001c4c:	6878      	ldr	r0, [r7, #4]
 8001c4e:	f000 f9bd 	bl	8001fcc <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	2210      	movs	r2, #16
 8001c5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001c62:	2300      	movs	r3, #0
}
 8001c64:	4618      	mov	r0, r3
 8001c66:	3710      	adds	r7, #16
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	bd80      	pop	{r7, pc}
 8001c6c:	40023800 	.word	0x40023800
 8001c70:	40013800 	.word	0x40013800

08001c74 <ETH_SetMACConfig>:
  HAL_Delay(ETH_REG_WRITE_DELAY);
  (heth->Instance)->DMAOMR = tmpreg;
}

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8001c74:	b580      	push	{r7, lr}
 8001c76:	b084      	sub	sp, #16
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	6078      	str	r0, [r7, #4]
 8001c7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8001c86:	68fa      	ldr	r2, [r7, #12]
 8001c88:	4b51      	ldr	r3, [pc, #324]	; (8001dd0 <ETH_SetMACConfig+0x15c>)
 8001c8a:	4013      	ands	r3, r2
 8001c8c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001c8e:	683b      	ldr	r3, [r7, #0]
 8001c90:	7c1b      	ldrb	r3, [r3, #16]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d102      	bne.n	8001c9c <ETH_SetMACConfig+0x28>
 8001c96:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001c9a:	e000      	b.n	8001c9e <ETH_SetMACConfig+0x2a>
 8001c9c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001c9e:	683b      	ldr	r3, [r7, #0]
 8001ca0:	7c5b      	ldrb	r3, [r3, #17]
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d102      	bne.n	8001cac <ETH_SetMACConfig+0x38>
 8001ca6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001caa:	e000      	b.n	8001cae <ETH_SetMACConfig+0x3a>
 8001cac:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001cae:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8001cb4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	7fdb      	ldrb	r3, [r3, #31]
 8001cba:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8001cbc:	431a      	orrs	r2, r3
                        macconf->Speed |
 8001cbe:	683b      	ldr	r3, [r7, #0]
 8001cc0:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8001cc2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cc4:	683a      	ldr	r2, [r7, #0]
 8001cc6:	7f92      	ldrb	r2, [r2, #30]
 8001cc8:	2a00      	cmp	r2, #0
 8001cca:	d102      	bne.n	8001cd2 <ETH_SetMACConfig+0x5e>
 8001ccc:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001cd0:	e000      	b.n	8001cd4 <ETH_SetMACConfig+0x60>
 8001cd2:	2200      	movs	r2, #0
                        macconf->Speed |
 8001cd4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	7f1b      	ldrb	r3, [r3, #28]
 8001cda:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8001cdc:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8001ce2:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001ce4:	683b      	ldr	r3, [r7, #0]
 8001ce6:	791b      	ldrb	r3, [r3, #4]
 8001ce8:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8001cea:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	f892 2020 	ldrb.w	r2, [r2, #32]
 8001cf2:	2a00      	cmp	r2, #0
 8001cf4:	d102      	bne.n	8001cfc <ETH_SetMACConfig+0x88>
 8001cf6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001cfa:	e000      	b.n	8001cfe <ETH_SetMACConfig+0x8a>
 8001cfc:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8001cfe:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d00:	683b      	ldr	r3, [r7, #0]
 8001d02:	7bdb      	ldrb	r3, [r3, #15]
 8001d04:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8001d06:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8001d08:	683b      	ldr	r3, [r7, #0]
 8001d0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8001d0c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8001d0e:	683b      	ldr	r3, [r7, #0]
 8001d10:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8001d14:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8001d16:	4313      	orrs	r3, r2
 8001d18:	68fa      	ldr	r2, [r7, #12]
 8001d1a:	4313      	orrs	r3, r2
 8001d1c:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	68fa      	ldr	r2, [r7, #12]
 8001d24:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001d2e:	2001      	movs	r0, #1
 8001d30:	f7ff fd30 	bl	8001794 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	68fa      	ldr	r2, [r7, #12]
 8001d3a:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	681b      	ldr	r3, [r3, #0]
 8001d40:	699b      	ldr	r3, [r3, #24]
 8001d42:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8001d44:	68fa      	ldr	r2, [r7, #12]
 8001d46:	f64f 7341 	movw	r3, #65345	; 0xff41
 8001d4a:	4013      	ands	r3, r2
 8001d4c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d4e:	683b      	ldr	r3, [r7, #0]
 8001d50:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001d52:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d54:	683a      	ldr	r2, [r7, #0]
 8001d56:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8001d5a:	2a00      	cmp	r2, #0
 8001d5c:	d101      	bne.n	8001d62 <ETH_SetMACConfig+0xee>
 8001d5e:	2280      	movs	r2, #128	; 0x80
 8001d60:	e000      	b.n	8001d64 <ETH_SetMACConfig+0xf0>
 8001d62:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001d64:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8001d6a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d6c:	683a      	ldr	r2, [r7, #0]
 8001d6e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8001d72:	2a01      	cmp	r2, #1
 8001d74:	d101      	bne.n	8001d7a <ETH_SetMACConfig+0x106>
 8001d76:	2208      	movs	r2, #8
 8001d78:	e000      	b.n	8001d7c <ETH_SetMACConfig+0x108>
 8001d7a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8001d7c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8001d7e:	683a      	ldr	r2, [r7, #0]
 8001d80:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8001d84:	2a01      	cmp	r2, #1
 8001d86:	d101      	bne.n	8001d8c <ETH_SetMACConfig+0x118>
 8001d88:	2204      	movs	r2, #4
 8001d8a:	e000      	b.n	8001d8e <ETH_SetMACConfig+0x11a>
 8001d8c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8001d8e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8001d90:	683a      	ldr	r2, [r7, #0]
 8001d92:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8001d96:	2a01      	cmp	r2, #1
 8001d98:	d101      	bne.n	8001d9e <ETH_SetMACConfig+0x12a>
 8001d9a:	2202      	movs	r2, #2
 8001d9c:	e000      	b.n	8001da0 <ETH_SetMACConfig+0x12c>
 8001d9e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8001da0:	4313      	orrs	r3, r2
 8001da2:	68fa      	ldr	r2, [r7, #12]
 8001da4:	4313      	orrs	r3, r2
 8001da6:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	68fa      	ldr	r2, [r7, #12]
 8001dae:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	699b      	ldr	r3, [r3, #24]
 8001db6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001db8:	2001      	movs	r0, #1
 8001dba:	f7ff fceb 	bl	8001794 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	68fa      	ldr	r2, [r7, #12]
 8001dc4:	619a      	str	r2, [r3, #24]
}
 8001dc6:	bf00      	nop
 8001dc8:	3710      	adds	r7, #16
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	ff20810f 	.word	0xff20810f

08001dd4 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 8001dd4:	b580      	push	{r7, lr}
 8001dd6:	b084      	sub	sp, #16
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
 8001ddc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001de6:	699b      	ldr	r3, [r3, #24]
 8001de8:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8001dea:	68fa      	ldr	r2, [r7, #12]
 8001dec:	4b3d      	ldr	r3, [pc, #244]	; (8001ee4 <ETH_SetDMAConfig+0x110>)
 8001dee:	4013      	ands	r3, r2
 8001df0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	7b1b      	ldrb	r3, [r3, #12]
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d102      	bne.n	8001e00 <ETH_SetDMAConfig+0x2c>
 8001dfa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8001dfe:	e000      	b.n	8001e02 <ETH_SetDMAConfig+0x2e>
 8001e00:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e02:	683b      	ldr	r3, [r7, #0]
 8001e04:	7b5b      	ldrb	r3, [r3, #13]
 8001e06:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e08:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e0a:	683a      	ldr	r2, [r7, #0]
 8001e0c:	7f52      	ldrb	r2, [r2, #29]
 8001e0e:	2a00      	cmp	r2, #0
 8001e10:	d102      	bne.n	8001e18 <ETH_SetDMAConfig+0x44>
 8001e12:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8001e16:	e000      	b.n	8001e1a <ETH_SetDMAConfig+0x46>
 8001e18:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8001e1a:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	7b9b      	ldrb	r3, [r3, #14]
 8001e20:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8001e22:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8001e24:	683b      	ldr	r3, [r7, #0]
 8001e26:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8001e28:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e2a:	683b      	ldr	r3, [r7, #0]
 8001e2c:	7f1b      	ldrb	r3, [r3, #28]
 8001e2e:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8001e30:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e32:	683b      	ldr	r3, [r7, #0]
 8001e34:	7f9b      	ldrb	r3, [r3, #30]
 8001e36:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8001e38:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8001e3a:	683b      	ldr	r3, [r7, #0]
 8001e3c:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8001e3e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8001e40:	683b      	ldr	r3, [r7, #0]
 8001e42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e46:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8001e48:	4313      	orrs	r3, r2
 8001e4a:	68fa      	ldr	r2, [r7, #12]
 8001e4c:	4313      	orrs	r3, r2
 8001e4e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e58:	461a      	mov	r2, r3
 8001e5a:	68fb      	ldr	r3, [r7, #12]
 8001e5c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e66:	699b      	ldr	r3, [r3, #24]
 8001e68:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001e6a:	2001      	movs	r0, #1
 8001e6c:	f7ff fc92 	bl	8001794 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001e78:	461a      	mov	r2, r3
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e7e:	683b      	ldr	r3, [r7, #0]
 8001e80:	791b      	ldrb	r3, [r3, #4]
 8001e82:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001e88:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e8a:	683b      	ldr	r3, [r7, #0]
 8001e8c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8001e8e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8001e94:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001e96:	683b      	ldr	r3, [r7, #0]
 8001e98:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8001e9c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8001e9e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001ea0:	683b      	ldr	r3, [r7, #0]
 8001ea2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ea4:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8001ea6:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8001ea8:	683b      	ldr	r3, [r7, #0]
 8001eaa:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8001eac:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8001eae:	687a      	ldr	r2, [r7, #4]
 8001eb0:	6812      	ldr	r2, [r2, #0]
 8001eb2:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001eb6:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001eba:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8001ec8:	2001      	movs	r0, #1
 8001eca:	f7ff fc63 	bl	8001794 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	68fb      	ldr	r3, [r7, #12]
 8001eda:	6013      	str	r3, [r2, #0]
}
 8001edc:	bf00      	nop
 8001ede:	3710      	adds	r7, #16
 8001ee0:	46bd      	mov	sp, r7
 8001ee2:	bd80      	pop	{r7, pc}
 8001ee4:	f8de3f23 	.word	0xf8de3f23

08001ee8 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8001ee8:	b580      	push	{r7, lr}
 8001eea:	b0a6      	sub	sp, #152	; 0x98
 8001eec:	af00      	add	r7, sp, #0
 8001eee:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8001ef0:	2301      	movs	r3, #1
 8001ef2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8001efc:	2300      	movs	r3, #0
 8001efe:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8001f00:	2300      	movs	r3, #0
 8001f02:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8001f06:	2301      	movs	r3, #1
 8001f08:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8001f0c:	2300      	movs	r3, #0
 8001f0e:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8001f12:	2301      	movs	r3, #1
 8001f14:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8001f1e:	2300      	movs	r3, #0
 8001f20:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8001f24:	2300      	movs	r3, #0
 8001f26:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8001f2e:	2300      	movs	r3, #0
 8001f30:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8001f32:	2300      	movs	r3, #0
 8001f34:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8001f38:	2300      	movs	r3, #0
 8001f3a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8001f3e:	2300      	movs	r3, #0
 8001f40:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8001f44:	2300      	movs	r3, #0
 8001f46:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8001f4a:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001f4e:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8001f50:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001f54:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8001f56:	2300      	movs	r3, #0
 8001f58:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8001f5c:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8001f60:	4619      	mov	r1, r3
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f7ff fe86 	bl	8001c74 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8001f70:	2301      	movs	r3, #1
 8001f72:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8001f76:	2301      	movs	r3, #1
 8001f78:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8001f7e:	2300      	movs	r3, #0
 8001f80:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8001f84:	2300      	movs	r3, #0
 8001f86:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8001f8a:	2300      	movs	r3, #0
 8001f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8001f8e:	2301      	movs	r3, #1
 8001f90:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8001f94:	2301      	movs	r3, #1
 8001f96:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8001f98:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001f9c:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8001f9e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001fa2:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8001fa4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001fa8:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8001faa:	2301      	movs	r3, #1
 8001fac:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8001fb4:	2300      	movs	r3, #0
 8001fb6:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8001fb8:	f107 0308 	add.w	r3, r7, #8
 8001fbc:	4619      	mov	r1, r3
 8001fbe:	6878      	ldr	r0, [r7, #4]
 8001fc0:	f7ff ff08 	bl	8001dd4 <ETH_SetDMAConfig>
}
 8001fc4:	bf00      	nop
 8001fc6:	3798      	adds	r7, #152	; 0x98
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}

08001fcc <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b087      	sub	sp, #28
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	60f8      	str	r0, [r7, #12]
 8001fd4:	60b9      	str	r1, [r7, #8]
 8001fd6:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	3305      	adds	r3, #5
 8001fdc:	781b      	ldrb	r3, [r3, #0]
 8001fde:	021b      	lsls	r3, r3, #8
 8001fe0:	687a      	ldr	r2, [r7, #4]
 8001fe2:	3204      	adds	r2, #4
 8001fe4:	7812      	ldrb	r2, [r2, #0]
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8001fea:	68ba      	ldr	r2, [r7, #8]
 8001fec:	4b11      	ldr	r3, [pc, #68]	; (8002034 <ETH_MACAddressConfig+0x68>)
 8001fee:	4413      	add	r3, r2
 8001ff0:	461a      	mov	r2, r3
 8001ff2:	697b      	ldr	r3, [r7, #20]
 8001ff4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	3303      	adds	r3, #3
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	061a      	lsls	r2, r3, #24
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	3302      	adds	r3, #2
 8002002:	781b      	ldrb	r3, [r3, #0]
 8002004:	041b      	lsls	r3, r3, #16
 8002006:	431a      	orrs	r2, r3
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	3301      	adds	r3, #1
 800200c:	781b      	ldrb	r3, [r3, #0]
 800200e:	021b      	lsls	r3, r3, #8
 8002010:	4313      	orrs	r3, r2
 8002012:	687a      	ldr	r2, [r7, #4]
 8002014:	7812      	ldrb	r2, [r2, #0]
 8002016:	4313      	orrs	r3, r2
 8002018:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800201a:	68ba      	ldr	r2, [r7, #8]
 800201c:	4b06      	ldr	r3, [pc, #24]	; (8002038 <ETH_MACAddressConfig+0x6c>)
 800201e:	4413      	add	r3, r2
 8002020:	461a      	mov	r2, r3
 8002022:	697b      	ldr	r3, [r7, #20]
 8002024:	6013      	str	r3, [r2, #0]
}
 8002026:	bf00      	nop
 8002028:	371c      	adds	r7, #28
 800202a:	46bd      	mov	sp, r7
 800202c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002030:	4770      	bx	lr
 8002032:	bf00      	nop
 8002034:	40028040 	.word	0x40028040
 8002038:	40028044 	.word	0x40028044

0800203c <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 800203c:	b480      	push	{r7}
 800203e:	b085      	sub	sp, #20
 8002040:	af00      	add	r7, sp, #0
 8002042:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002044:	2300      	movs	r3, #0
 8002046:	60fb      	str	r3, [r7, #12]
 8002048:	e03e      	b.n	80020c8 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	68d9      	ldr	r1, [r3, #12]
 800204e:	68fa      	ldr	r2, [r7, #12]
 8002050:	4613      	mov	r3, r2
 8002052:	009b      	lsls	r3, r3, #2
 8002054:	4413      	add	r3, r2
 8002056:	00db      	lsls	r3, r3, #3
 8002058:	440b      	add	r3, r1
 800205a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 800205c:	68bb      	ldr	r3, [r7, #8]
 800205e:	2200      	movs	r2, #0
 8002060:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002062:	68bb      	ldr	r3, [r7, #8]
 8002064:	2200      	movs	r2, #0
 8002066:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	2200      	movs	r2, #0
 800206c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	2200      	movs	r2, #0
 8002072:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002074:	68b9      	ldr	r1, [r7, #8]
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	68fa      	ldr	r2, [r7, #12]
 800207a:	3206      	adds	r2, #6
 800207c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002080:	68bb      	ldr	r3, [r7, #8]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	2b02      	cmp	r3, #2
 8002090:	d80c      	bhi.n	80020ac <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	68d9      	ldr	r1, [r3, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	1c5a      	adds	r2, r3, #1
 800209a:	4613      	mov	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	4413      	add	r3, r2
 80020a0:	00db      	lsls	r3, r3, #3
 80020a2:	440b      	add	r3, r1
 80020a4:	461a      	mov	r2, r3
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	60da      	str	r2, [r3, #12]
 80020aa:	e004      	b.n	80020b6 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	68db      	ldr	r3, [r3, #12]
 80020b0:	461a      	mov	r2, r3
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80020b6:	68bb      	ldr	r3, [r7, #8]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	3301      	adds	r3, #1
 80020c6:	60fb      	str	r3, [r7, #12]
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	2b03      	cmp	r3, #3
 80020cc:	d9bd      	bls.n	800204a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	2200      	movs	r2, #0
 80020d2:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	68da      	ldr	r2, [r3, #12]
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020e0:	611a      	str	r2, [r3, #16]
}
 80020e2:	bf00      	nop
 80020e4:	3714      	adds	r7, #20
 80020e6:	46bd      	mov	sp, r7
 80020e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ec:	4770      	bx	lr

080020ee <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80020ee:	b480      	push	{r7}
 80020f0:	b085      	sub	sp, #20
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80020f6:	2300      	movs	r3, #0
 80020f8:	60fb      	str	r3, [r7, #12]
 80020fa:	e046      	b.n	800218a <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6919      	ldr	r1, [r3, #16]
 8002100:	68fa      	ldr	r2, [r7, #12]
 8002102:	4613      	mov	r3, r2
 8002104:	009b      	lsls	r3, r3, #2
 8002106:	4413      	add	r3, r2
 8002108:	00db      	lsls	r3, r3, #3
 800210a:	440b      	add	r3, r1
 800210c:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002114:	68bb      	ldr	r3, [r7, #8]
 8002116:	2200      	movs	r2, #0
 8002118:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 800211a:	68bb      	ldr	r3, [r7, #8]
 800211c:	2200      	movs	r2, #0
 800211e:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002120:	68bb      	ldr	r3, [r7, #8]
 8002122:	2200      	movs	r2, #0
 8002124:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002126:	68bb      	ldr	r3, [r7, #8]
 8002128:	2200      	movs	r2, #0
 800212a:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 800212c:	68bb      	ldr	r3, [r7, #8]
 800212e:	2200      	movs	r2, #0
 8002130:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002132:	68bb      	ldr	r3, [r7, #8]
 8002134:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002138:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 800213a:	68bb      	ldr	r3, [r7, #8]
 800213c:	f244 52f4 	movw	r2, #17908	; 0x45f4
 8002140:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002142:	68bb      	ldr	r3, [r7, #8]
 8002144:	685b      	ldr	r3, [r3, #4]
 8002146:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800214a:	68bb      	ldr	r3, [r7, #8]
 800214c:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800214e:	68b9      	ldr	r1, [r7, #8]
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	3212      	adds	r2, #18
 8002156:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b02      	cmp	r3, #2
 800215e:	d80c      	bhi.n	800217a <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6919      	ldr	r1, [r3, #16]
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	1c5a      	adds	r2, r3, #1
 8002168:	4613      	mov	r3, r2
 800216a:	009b      	lsls	r3, r3, #2
 800216c:	4413      	add	r3, r2
 800216e:	00db      	lsls	r3, r3, #3
 8002170:	440b      	add	r3, r1
 8002172:	461a      	mov	r2, r3
 8002174:	68bb      	ldr	r3, [r7, #8]
 8002176:	60da      	str	r2, [r3, #12]
 8002178:	e004      	b.n	8002184 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	691b      	ldr	r3, [r3, #16]
 800217e:	461a      	mov	r2, r3
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002184:	68fb      	ldr	r3, [r7, #12]
 8002186:	3301      	adds	r3, #1
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	68fb      	ldr	r3, [r7, #12]
 800218c:	2b03      	cmp	r3, #3
 800218e:	d9b5      	bls.n	80020fc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	2200      	movs	r2, #0
 8002194:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	2200      	movs	r2, #0
 800219a:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	2200      	movs	r2, #0
 80021a0:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	2200      	movs	r2, #0
 80021a6:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	2200      	movs	r2, #0
 80021ac:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	691a      	ldr	r2, [r3, #16]
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80021ba:	60da      	str	r2, [r3, #12]
}
 80021bc:	bf00      	nop
 80021be:	3714      	adds	r7, #20
 80021c0:	46bd      	mov	sp, r7
 80021c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021c6:	4770      	bx	lr

080021c8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b089      	sub	sp, #36	; 0x24
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80021d2:	2300      	movs	r3, #0
 80021d4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80021d6:	2300      	movs	r3, #0
 80021d8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80021de:	2300      	movs	r3, #0
 80021e0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 80021e2:	2300      	movs	r3, #0
 80021e4:	61fb      	str	r3, [r7, #28]
 80021e6:	e175      	b.n	80024d4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80021e8:	2201      	movs	r2, #1
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	fa02 f303 	lsl.w	r3, r2, r3
 80021f0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f2:	683b      	ldr	r3, [r7, #0]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	697a      	ldr	r2, [r7, #20]
 80021f8:	4013      	ands	r3, r2
 80021fa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80021fc:	693a      	ldr	r2, [r7, #16]
 80021fe:	697b      	ldr	r3, [r7, #20]
 8002200:	429a      	cmp	r2, r3
 8002202:	f040 8164 	bne.w	80024ce <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	685b      	ldr	r3, [r3, #4]
 800220a:	f003 0303 	and.w	r3, r3, #3
 800220e:	2b01      	cmp	r3, #1
 8002210:	d005      	beq.n	800221e <HAL_GPIO_Init+0x56>
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	f003 0303 	and.w	r3, r3, #3
 800221a:	2b02      	cmp	r3, #2
 800221c:	d130      	bne.n	8002280 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8002224:	69fb      	ldr	r3, [r7, #28]
 8002226:	005b      	lsls	r3, r3, #1
 8002228:	2203      	movs	r2, #3
 800222a:	fa02 f303 	lsl.w	r3, r2, r3
 800222e:	43db      	mvns	r3, r3
 8002230:	69ba      	ldr	r2, [r7, #24]
 8002232:	4013      	ands	r3, r2
 8002234:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8002236:	683b      	ldr	r3, [r7, #0]
 8002238:	68da      	ldr	r2, [r3, #12]
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	005b      	lsls	r3, r3, #1
 800223e:	fa02 f303 	lsl.w	r3, r2, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4313      	orrs	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	69ba      	ldr	r2, [r7, #24]
 800224c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002254:	2201      	movs	r2, #1
 8002256:	69fb      	ldr	r3, [r7, #28]
 8002258:	fa02 f303 	lsl.w	r3, r2, r3
 800225c:	43db      	mvns	r3, r3
 800225e:	69ba      	ldr	r2, [r7, #24]
 8002260:	4013      	ands	r3, r2
 8002262:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	091b      	lsrs	r3, r3, #4
 800226a:	f003 0201 	and.w	r2, r3, #1
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	fa02 f303 	lsl.w	r3, r2, r3
 8002274:	69ba      	ldr	r2, [r7, #24]
 8002276:	4313      	orrs	r3, r2
 8002278:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	69ba      	ldr	r2, [r7, #24]
 800227e:	605a      	str	r2, [r3, #4]
      }
      
      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002280:	683b      	ldr	r3, [r7, #0]
 8002282:	685b      	ldr	r3, [r3, #4]
 8002284:	f003 0303 	and.w	r3, r3, #3
 8002288:	2b03      	cmp	r3, #3
 800228a:	d017      	beq.n	80022bc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	68db      	ldr	r3, [r3, #12]
 8002290:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002292:	69fb      	ldr	r3, [r7, #28]
 8002294:	005b      	lsls	r3, r3, #1
 8002296:	2203      	movs	r2, #3
 8002298:	fa02 f303 	lsl.w	r3, r2, r3
 800229c:	43db      	mvns	r3, r3
 800229e:	69ba      	ldr	r2, [r7, #24]
 80022a0:	4013      	ands	r3, r2
 80022a2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80022a4:	683b      	ldr	r3, [r7, #0]
 80022a6:	689a      	ldr	r2, [r3, #8]
 80022a8:	69fb      	ldr	r3, [r7, #28]
 80022aa:	005b      	lsls	r3, r3, #1
 80022ac:	fa02 f303 	lsl.w	r3, r2, r3
 80022b0:	69ba      	ldr	r2, [r7, #24]
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	69ba      	ldr	r2, [r7, #24]
 80022ba:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022bc:	683b      	ldr	r3, [r7, #0]
 80022be:	685b      	ldr	r3, [r3, #4]
 80022c0:	f003 0303 	and.w	r3, r3, #3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d123      	bne.n	8002310 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80022c8:	69fb      	ldr	r3, [r7, #28]
 80022ca:	08da      	lsrs	r2, r3, #3
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	3208      	adds	r2, #8
 80022d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80022d6:	69fb      	ldr	r3, [r7, #28]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	009b      	lsls	r3, r3, #2
 80022de:	220f      	movs	r2, #15
 80022e0:	fa02 f303 	lsl.w	r3, r2, r3
 80022e4:	43db      	mvns	r3, r3
 80022e6:	69ba      	ldr	r2, [r7, #24]
 80022e8:	4013      	ands	r3, r2
 80022ea:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	691a      	ldr	r2, [r3, #16]
 80022f0:	69fb      	ldr	r3, [r7, #28]
 80022f2:	f003 0307 	and.w	r3, r3, #7
 80022f6:	009b      	lsls	r3, r3, #2
 80022f8:	fa02 f303 	lsl.w	r3, r2, r3
 80022fc:	69ba      	ldr	r2, [r7, #24]
 80022fe:	4313      	orrs	r3, r2
 8002300:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	08da      	lsrs	r2, r3, #3
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	3208      	adds	r2, #8
 800230a:	69b9      	ldr	r1, [r7, #24]
 800230c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8002316:	69fb      	ldr	r3, [r7, #28]
 8002318:	005b      	lsls	r3, r3, #1
 800231a:	2203      	movs	r2, #3
 800231c:	fa02 f303 	lsl.w	r3, r2, r3
 8002320:	43db      	mvns	r3, r3
 8002322:	69ba      	ldr	r2, [r7, #24]
 8002324:	4013      	ands	r3, r2
 8002326:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8002328:	683b      	ldr	r3, [r7, #0]
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	f003 0203 	and.w	r2, r3, #3
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	005b      	lsls	r3, r3, #1
 8002334:	fa02 f303 	lsl.w	r3, r2, r3
 8002338:	69ba      	ldr	r2, [r7, #24]
 800233a:	4313      	orrs	r3, r2
 800233c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	69ba      	ldr	r2, [r7, #24]
 8002342:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002344:	683b      	ldr	r3, [r7, #0]
 8002346:	685b      	ldr	r3, [r3, #4]
 8002348:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800234c:	2b00      	cmp	r3, #0
 800234e:	f000 80be 	beq.w	80024ce <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002352:	4b66      	ldr	r3, [pc, #408]	; (80024ec <HAL_GPIO_Init+0x324>)
 8002354:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002356:	4a65      	ldr	r2, [pc, #404]	; (80024ec <HAL_GPIO_Init+0x324>)
 8002358:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800235c:	6453      	str	r3, [r2, #68]	; 0x44
 800235e:	4b63      	ldr	r3, [pc, #396]	; (80024ec <HAL_GPIO_Init+0x324>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002362:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002366:	60fb      	str	r3, [r7, #12]
 8002368:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800236a:	4a61      	ldr	r2, [pc, #388]	; (80024f0 <HAL_GPIO_Init+0x328>)
 800236c:	69fb      	ldr	r3, [r7, #28]
 800236e:	089b      	lsrs	r3, r3, #2
 8002370:	3302      	adds	r3, #2
 8002372:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002376:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8002378:	69fb      	ldr	r3, [r7, #28]
 800237a:	f003 0303 	and.w	r3, r3, #3
 800237e:	009b      	lsls	r3, r3, #2
 8002380:	220f      	movs	r2, #15
 8002382:	fa02 f303 	lsl.w	r3, r2, r3
 8002386:	43db      	mvns	r3, r3
 8002388:	69ba      	ldr	r2, [r7, #24]
 800238a:	4013      	ands	r3, r2
 800238c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	4a58      	ldr	r2, [pc, #352]	; (80024f4 <HAL_GPIO_Init+0x32c>)
 8002392:	4293      	cmp	r3, r2
 8002394:	d037      	beq.n	8002406 <HAL_GPIO_Init+0x23e>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a57      	ldr	r2, [pc, #348]	; (80024f8 <HAL_GPIO_Init+0x330>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d031      	beq.n	8002402 <HAL_GPIO_Init+0x23a>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a56      	ldr	r2, [pc, #344]	; (80024fc <HAL_GPIO_Init+0x334>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d02b      	beq.n	80023fe <HAL_GPIO_Init+0x236>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a55      	ldr	r2, [pc, #340]	; (8002500 <HAL_GPIO_Init+0x338>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d025      	beq.n	80023fa <HAL_GPIO_Init+0x232>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a54      	ldr	r2, [pc, #336]	; (8002504 <HAL_GPIO_Init+0x33c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d01f      	beq.n	80023f6 <HAL_GPIO_Init+0x22e>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a53      	ldr	r2, [pc, #332]	; (8002508 <HAL_GPIO_Init+0x340>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d019      	beq.n	80023f2 <HAL_GPIO_Init+0x22a>
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	4a52      	ldr	r2, [pc, #328]	; (800250c <HAL_GPIO_Init+0x344>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d013      	beq.n	80023ee <HAL_GPIO_Init+0x226>
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	4a51      	ldr	r2, [pc, #324]	; (8002510 <HAL_GPIO_Init+0x348>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d00d      	beq.n	80023ea <HAL_GPIO_Init+0x222>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a50      	ldr	r2, [pc, #320]	; (8002514 <HAL_GPIO_Init+0x34c>)
 80023d2:	4293      	cmp	r3, r2
 80023d4:	d007      	beq.n	80023e6 <HAL_GPIO_Init+0x21e>
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	4a4f      	ldr	r2, [pc, #316]	; (8002518 <HAL_GPIO_Init+0x350>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d101      	bne.n	80023e2 <HAL_GPIO_Init+0x21a>
 80023de:	2309      	movs	r3, #9
 80023e0:	e012      	b.n	8002408 <HAL_GPIO_Init+0x240>
 80023e2:	230a      	movs	r3, #10
 80023e4:	e010      	b.n	8002408 <HAL_GPIO_Init+0x240>
 80023e6:	2308      	movs	r3, #8
 80023e8:	e00e      	b.n	8002408 <HAL_GPIO_Init+0x240>
 80023ea:	2307      	movs	r3, #7
 80023ec:	e00c      	b.n	8002408 <HAL_GPIO_Init+0x240>
 80023ee:	2306      	movs	r3, #6
 80023f0:	e00a      	b.n	8002408 <HAL_GPIO_Init+0x240>
 80023f2:	2305      	movs	r3, #5
 80023f4:	e008      	b.n	8002408 <HAL_GPIO_Init+0x240>
 80023f6:	2304      	movs	r3, #4
 80023f8:	e006      	b.n	8002408 <HAL_GPIO_Init+0x240>
 80023fa:	2303      	movs	r3, #3
 80023fc:	e004      	b.n	8002408 <HAL_GPIO_Init+0x240>
 80023fe:	2302      	movs	r3, #2
 8002400:	e002      	b.n	8002408 <HAL_GPIO_Init+0x240>
 8002402:	2301      	movs	r3, #1
 8002404:	e000      	b.n	8002408 <HAL_GPIO_Init+0x240>
 8002406:	2300      	movs	r3, #0
 8002408:	69fa      	ldr	r2, [r7, #28]
 800240a:	f002 0203 	and.w	r2, r2, #3
 800240e:	0092      	lsls	r2, r2, #2
 8002410:	4093      	lsls	r3, r2
 8002412:	69ba      	ldr	r2, [r7, #24]
 8002414:	4313      	orrs	r3, r2
 8002416:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002418:	4935      	ldr	r1, [pc, #212]	; (80024f0 <HAL_GPIO_Init+0x328>)
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	089b      	lsrs	r3, r3, #2
 800241e:	3302      	adds	r3, #2
 8002420:	69ba      	ldr	r2, [r7, #24]
 8002422:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002426:	4b3d      	ldr	r3, [pc, #244]	; (800251c <HAL_GPIO_Init+0x354>)
 8002428:	689b      	ldr	r3, [r3, #8]
 800242a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	43db      	mvns	r3, r3
 8002430:	69ba      	ldr	r2, [r7, #24]
 8002432:	4013      	ands	r3, r2
 8002434:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	685b      	ldr	r3, [r3, #4]
 800243a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800243e:	2b00      	cmp	r3, #0
 8002440:	d003      	beq.n	800244a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002442:	69ba      	ldr	r2, [r7, #24]
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	4313      	orrs	r3, r2
 8002448:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800244a:	4a34      	ldr	r2, [pc, #208]	; (800251c <HAL_GPIO_Init+0x354>)
 800244c:	69bb      	ldr	r3, [r7, #24]
 800244e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002450:	4b32      	ldr	r3, [pc, #200]	; (800251c <HAL_GPIO_Init+0x354>)
 8002452:	68db      	ldr	r3, [r3, #12]
 8002454:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	43db      	mvns	r3, r3
 800245a:	69ba      	ldr	r2, [r7, #24]
 800245c:	4013      	ands	r3, r2
 800245e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d003      	beq.n	8002474 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800246c:	69ba      	ldr	r2, [r7, #24]
 800246e:	693b      	ldr	r3, [r7, #16]
 8002470:	4313      	orrs	r3, r2
 8002472:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002474:	4a29      	ldr	r2, [pc, #164]	; (800251c <HAL_GPIO_Init+0x354>)
 8002476:	69bb      	ldr	r3, [r7, #24]
 8002478:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800247a:	4b28      	ldr	r3, [pc, #160]	; (800251c <HAL_GPIO_Init+0x354>)
 800247c:	685b      	ldr	r3, [r3, #4]
 800247e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	43db      	mvns	r3, r3
 8002484:	69ba      	ldr	r2, [r7, #24]
 8002486:	4013      	ands	r3, r2
 8002488:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	685b      	ldr	r3, [r3, #4]
 800248e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002492:	2b00      	cmp	r3, #0
 8002494:	d003      	beq.n	800249e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002496:	69ba      	ldr	r2, [r7, #24]
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4313      	orrs	r3, r2
 800249c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800249e:	4a1f      	ldr	r2, [pc, #124]	; (800251c <HAL_GPIO_Init+0x354>)
 80024a0:	69bb      	ldr	r3, [r7, #24]
 80024a2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80024a4:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_GPIO_Init+0x354>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024aa:	693b      	ldr	r3, [r7, #16]
 80024ac:	43db      	mvns	r3, r3
 80024ae:	69ba      	ldr	r2, [r7, #24]
 80024b0:	4013      	ands	r3, r2
 80024b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80024b4:	683b      	ldr	r3, [r7, #0]
 80024b6:	685b      	ldr	r3, [r3, #4]
 80024b8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d003      	beq.n	80024c8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80024c0:	69ba      	ldr	r2, [r7, #24]
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024c8:	4a14      	ldr	r2, [pc, #80]	; (800251c <HAL_GPIO_Init+0x354>)
 80024ca:	69bb      	ldr	r3, [r7, #24]
 80024cc:	6013      	str	r3, [r2, #0]
  for(position = 0; position < GPIO_NUMBER; position++)
 80024ce:	69fb      	ldr	r3, [r7, #28]
 80024d0:	3301      	adds	r3, #1
 80024d2:	61fb      	str	r3, [r7, #28]
 80024d4:	69fb      	ldr	r3, [r7, #28]
 80024d6:	2b0f      	cmp	r3, #15
 80024d8:	f67f ae86 	bls.w	80021e8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80024dc:	bf00      	nop
 80024de:	bf00      	nop
 80024e0:	3724      	adds	r7, #36	; 0x24
 80024e2:	46bd      	mov	sp, r7
 80024e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024e8:	4770      	bx	lr
 80024ea:	bf00      	nop
 80024ec:	40023800 	.word	0x40023800
 80024f0:	40013800 	.word	0x40013800
 80024f4:	40020000 	.word	0x40020000
 80024f8:	40020400 	.word	0x40020400
 80024fc:	40020800 	.word	0x40020800
 8002500:	40020c00 	.word	0x40020c00
 8002504:	40021000 	.word	0x40021000
 8002508:	40021400 	.word	0x40021400
 800250c:	40021800 	.word	0x40021800
 8002510:	40021c00 	.word	0x40021c00
 8002514:	40022000 	.word	0x40022000
 8002518:	40022400 	.word	0x40022400
 800251c:	40013c00 	.word	0x40013c00

08002520 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002520:	b480      	push	{r7}
 8002522:	b083      	sub	sp, #12
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	460b      	mov	r3, r1
 800252a:	807b      	strh	r3, [r7, #2]
 800252c:	4613      	mov	r3, r2
 800252e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002530:	787b      	ldrb	r3, [r7, #1]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d003      	beq.n	800253e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002536:	887a      	ldrh	r2, [r7, #2]
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800253c:	e003      	b.n	8002546 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800253e:	887b      	ldrh	r3, [r7, #2]
 8002540:	041a      	lsls	r2, r3, #16
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	619a      	str	r2, [r3, #24]
}
 8002546:	bf00      	nop
 8002548:	370c      	adds	r7, #12
 800254a:	46bd      	mov	sp, r7
 800254c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002550:	4770      	bx	lr

08002552 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002552:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002554:	b08f      	sub	sp, #60	; 0x3c
 8002556:	af0a      	add	r7, sp, #40	; 0x28
 8002558:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2b00      	cmp	r3, #0
 800255e:	d101      	bne.n	8002564 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e116      	b.n	8002792 <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002570:	b2db      	uxtb	r3, r3
 8002572:	2b00      	cmp	r3, #0
 8002574:	d106      	bne.n	8002584 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	2200      	movs	r2, #0
 800257a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800257e:	6878      	ldr	r0, [r7, #4]
 8002580:	f7fe ff96 	bl	80014b0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	2203      	movs	r2, #3
 8002588:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800258c:	68bb      	ldr	r3, [r7, #8]
 800258e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002590:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002594:	2b00      	cmp	r3, #0
 8002596:	d102      	bne.n	800259e <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 f992 	bl	80048cc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	603b      	str	r3, [r7, #0]
 80025ae:	687e      	ldr	r6, [r7, #4]
 80025b0:	466d      	mov	r5, sp
 80025b2:	f106 0410 	add.w	r4, r6, #16
 80025b6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025b8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80025bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80025be:	e894 0003 	ldmia.w	r4, {r0, r1}
 80025c2:	e885 0003 	stmia.w	r5, {r0, r1}
 80025c6:	1d33      	adds	r3, r6, #4
 80025c8:	cb0e      	ldmia	r3, {r1, r2, r3}
 80025ca:	6838      	ldr	r0, [r7, #0]
 80025cc:	f002 f926 	bl	800481c <USB_CoreInit>
 80025d0:	4603      	mov	r3, r0
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d005      	beq.n	80025e2 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	2202      	movs	r2, #2
 80025da:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025de:	2301      	movs	r3, #1
 80025e0:	e0d7      	b.n	8002792 <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	681b      	ldr	r3, [r3, #0]
 80025e6:	2100      	movs	r1, #0
 80025e8:	4618      	mov	r0, r3
 80025ea:	f002 f980 	bl	80048ee <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025ee:	2300      	movs	r3, #0
 80025f0:	73fb      	strb	r3, [r7, #15]
 80025f2:	e04a      	b.n	800268a <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025f4:	7bfa      	ldrb	r2, [r7, #15]
 80025f6:	6879      	ldr	r1, [r7, #4]
 80025f8:	4613      	mov	r3, r2
 80025fa:	00db      	lsls	r3, r3, #3
 80025fc:	4413      	add	r3, r2
 80025fe:	009b      	lsls	r3, r3, #2
 8002600:	440b      	add	r3, r1
 8002602:	333d      	adds	r3, #61	; 0x3d
 8002604:	2201      	movs	r2, #1
 8002606:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002608:	7bfa      	ldrb	r2, [r7, #15]
 800260a:	6879      	ldr	r1, [r7, #4]
 800260c:	4613      	mov	r3, r2
 800260e:	00db      	lsls	r3, r3, #3
 8002610:	4413      	add	r3, r2
 8002612:	009b      	lsls	r3, r3, #2
 8002614:	440b      	add	r3, r1
 8002616:	333c      	adds	r3, #60	; 0x3c
 8002618:	7bfa      	ldrb	r2, [r7, #15]
 800261a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800261c:	7bfa      	ldrb	r2, [r7, #15]
 800261e:	7bfb      	ldrb	r3, [r7, #15]
 8002620:	b298      	uxth	r0, r3
 8002622:	6879      	ldr	r1, [r7, #4]
 8002624:	4613      	mov	r3, r2
 8002626:	00db      	lsls	r3, r3, #3
 8002628:	4413      	add	r3, r2
 800262a:	009b      	lsls	r3, r3, #2
 800262c:	440b      	add	r3, r1
 800262e:	3344      	adds	r3, #68	; 0x44
 8002630:	4602      	mov	r2, r0
 8002632:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002634:	7bfa      	ldrb	r2, [r7, #15]
 8002636:	6879      	ldr	r1, [r7, #4]
 8002638:	4613      	mov	r3, r2
 800263a:	00db      	lsls	r3, r3, #3
 800263c:	4413      	add	r3, r2
 800263e:	009b      	lsls	r3, r3, #2
 8002640:	440b      	add	r3, r1
 8002642:	3340      	adds	r3, #64	; 0x40
 8002644:	2200      	movs	r2, #0
 8002646:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002648:	7bfa      	ldrb	r2, [r7, #15]
 800264a:	6879      	ldr	r1, [r7, #4]
 800264c:	4613      	mov	r3, r2
 800264e:	00db      	lsls	r3, r3, #3
 8002650:	4413      	add	r3, r2
 8002652:	009b      	lsls	r3, r3, #2
 8002654:	440b      	add	r3, r1
 8002656:	3348      	adds	r3, #72	; 0x48
 8002658:	2200      	movs	r2, #0
 800265a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	334c      	adds	r3, #76	; 0x4c
 800266c:	2200      	movs	r2, #0
 800266e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002670:	7bfa      	ldrb	r2, [r7, #15]
 8002672:	6879      	ldr	r1, [r7, #4]
 8002674:	4613      	mov	r3, r2
 8002676:	00db      	lsls	r3, r3, #3
 8002678:	4413      	add	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	440b      	add	r3, r1
 800267e:	3354      	adds	r3, #84	; 0x54
 8002680:	2200      	movs	r2, #0
 8002682:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002684:	7bfb      	ldrb	r3, [r7, #15]
 8002686:	3301      	adds	r3, #1
 8002688:	73fb      	strb	r3, [r7, #15]
 800268a:	7bfa      	ldrb	r2, [r7, #15]
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	429a      	cmp	r2, r3
 8002692:	d3af      	bcc.n	80025f4 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002694:	2300      	movs	r3, #0
 8002696:	73fb      	strb	r3, [r7, #15]
 8002698:	e044      	b.n	8002724 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800269a:	7bfa      	ldrb	r2, [r7, #15]
 800269c:	6879      	ldr	r1, [r7, #4]
 800269e:	4613      	mov	r3, r2
 80026a0:	00db      	lsls	r3, r3, #3
 80026a2:	4413      	add	r3, r2
 80026a4:	009b      	lsls	r3, r3, #2
 80026a6:	440b      	add	r3, r1
 80026a8:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80026ac:	2200      	movs	r2, #0
 80026ae:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80026b0:	7bfa      	ldrb	r2, [r7, #15]
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	4613      	mov	r3, r2
 80026b6:	00db      	lsls	r3, r3, #3
 80026b8:	4413      	add	r3, r2
 80026ba:	009b      	lsls	r3, r3, #2
 80026bc:	440b      	add	r3, r1
 80026be:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80026c2:	7bfa      	ldrb	r2, [r7, #15]
 80026c4:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80026c6:	7bfa      	ldrb	r2, [r7, #15]
 80026c8:	6879      	ldr	r1, [r7, #4]
 80026ca:	4613      	mov	r3, r2
 80026cc:	00db      	lsls	r3, r3, #3
 80026ce:	4413      	add	r3, r2
 80026d0:	009b      	lsls	r3, r3, #2
 80026d2:	440b      	add	r3, r1
 80026d4:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80026d8:	2200      	movs	r2, #0
 80026da:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80026dc:	7bfa      	ldrb	r2, [r7, #15]
 80026de:	6879      	ldr	r1, [r7, #4]
 80026e0:	4613      	mov	r3, r2
 80026e2:	00db      	lsls	r3, r3, #3
 80026e4:	4413      	add	r3, r2
 80026e6:	009b      	lsls	r3, r3, #2
 80026e8:	440b      	add	r3, r1
 80026ea:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026ee:	2200      	movs	r2, #0
 80026f0:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026f2:	7bfa      	ldrb	r2, [r7, #15]
 80026f4:	6879      	ldr	r1, [r7, #4]
 80026f6:	4613      	mov	r3, r2
 80026f8:	00db      	lsls	r3, r3, #3
 80026fa:	4413      	add	r3, r2
 80026fc:	009b      	lsls	r3, r3, #2
 80026fe:	440b      	add	r3, r1
 8002700:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002704:	2200      	movs	r2, #0
 8002706:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002708:	7bfa      	ldrb	r2, [r7, #15]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	4613      	mov	r3, r2
 800270e:	00db      	lsls	r3, r3, #3
 8002710:	4413      	add	r3, r2
 8002712:	009b      	lsls	r3, r3, #2
 8002714:	440b      	add	r3, r1
 8002716:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800271a:	2200      	movs	r2, #0
 800271c:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800271e:	7bfb      	ldrb	r3, [r7, #15]
 8002720:	3301      	adds	r3, #1
 8002722:	73fb      	strb	r3, [r7, #15]
 8002724:	7bfa      	ldrb	r2, [r7, #15]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	685b      	ldr	r3, [r3, #4]
 800272a:	429a      	cmp	r2, r3
 800272c:	d3b5      	bcc.n	800269a <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	603b      	str	r3, [r7, #0]
 8002734:	687e      	ldr	r6, [r7, #4]
 8002736:	466d      	mov	r5, sp
 8002738:	f106 0410 	add.w	r4, r6, #16
 800273c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800273e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002740:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002742:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002744:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002748:	e885 0003 	stmia.w	r5, {r0, r1}
 800274c:	1d33      	adds	r3, r6, #4
 800274e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002750:	6838      	ldr	r0, [r7, #0]
 8002752:	f002 f919 	bl	8004988 <USB_DevInit>
 8002756:	4603      	mov	r3, r0
 8002758:	2b00      	cmp	r3, #0
 800275a:	d005      	beq.n	8002768 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2202      	movs	r2, #2
 8002760:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002764:	2301      	movs	r3, #1
 8002766:	e014      	b.n	8002792 <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	2200      	movs	r2, #0
 800276c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2201      	movs	r2, #1
 8002774:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800277c:	2b01      	cmp	r3, #1
 800277e:	d102      	bne.n	8002786 <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002780:	6878      	ldr	r0, [r7, #4]
 8002782:	f000 f80b 	bl	800279c <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681b      	ldr	r3, [r3, #0]
 800278a:	4618      	mov	r0, r3
 800278c:	f002 fad7 	bl	8004d3e <USB_DevDisconnect>

  return HAL_OK;
 8002790:	2300      	movs	r3, #0
}
 8002792:	4618      	mov	r0, r3
 8002794:	3714      	adds	r7, #20
 8002796:	46bd      	mov	sp, r7
 8002798:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0800279c <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	2201      	movs	r2, #1
 80027ae:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
  hpcd->LPM_State = LPM_L0;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 80027c2:	68fb      	ldr	r3, [r7, #12]
 80027c4:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <HAL_PCDEx_ActivateLPM+0x44>)
 80027cc:	4313      	orrs	r3, r2
 80027ce:	68fa      	ldr	r2, [r7, #12]
 80027d0:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 80027d2:	2300      	movs	r3, #0
}
 80027d4:	4618      	mov	r0, r3
 80027d6:	3714      	adds	r7, #20
 80027d8:	46bd      	mov	sp, r7
 80027da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027de:	4770      	bx	lr
 80027e0:	10000003 	.word	0x10000003

080027e4 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 80027e4:	b480      	push	{r7}
 80027e6:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80027e8:	4b05      	ldr	r3, [pc, #20]	; (8002800 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4a04      	ldr	r2, [pc, #16]	; (8002800 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80027ee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027f2:	6013      	str	r3, [r2, #0]
}
 80027f4:	bf00      	nop
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40007000 	.word	0x40007000

08002804 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002804:	b580      	push	{r7, lr}
 8002806:	b082      	sub	sp, #8
 8002808:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 800280a:	2300      	movs	r3, #0
 800280c:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 800280e:	4b23      	ldr	r3, [pc, #140]	; (800289c <HAL_PWREx_EnableOverDrive+0x98>)
 8002810:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002812:	4a22      	ldr	r2, [pc, #136]	; (800289c <HAL_PWREx_EnableOverDrive+0x98>)
 8002814:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002818:	6413      	str	r3, [r2, #64]	; 0x40
 800281a:	4b20      	ldr	r3, [pc, #128]	; (800289c <HAL_PWREx_EnableOverDrive+0x98>)
 800281c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002822:	603b      	str	r3, [r7, #0]
 8002824:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8002826:	4b1e      	ldr	r3, [pc, #120]	; (80028a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002828:	681b      	ldr	r3, [r3, #0]
 800282a:	4a1d      	ldr	r2, [pc, #116]	; (80028a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800282c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002830:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002832:	f7fe ffa3 	bl	800177c <HAL_GetTick>
 8002836:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8002838:	e009      	b.n	800284e <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800283a:	f7fe ff9f 	bl	800177c <HAL_GetTick>
 800283e:	4602      	mov	r2, r0
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	1ad3      	subs	r3, r2, r3
 8002844:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002848:	d901      	bls.n	800284e <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e022      	b.n	8002894 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800284e:	4b14      	ldr	r3, [pc, #80]	; (80028a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002850:	685b      	ldr	r3, [r3, #4]
 8002852:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002856:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800285a:	d1ee      	bne.n	800283a <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800285c:	4b10      	ldr	r3, [pc, #64]	; (80028a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	4a0f      	ldr	r2, [pc, #60]	; (80028a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002862:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002866:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002868:	f7fe ff88 	bl	800177c <HAL_GetTick>
 800286c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800286e:	e009      	b.n	8002884 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8002870:	f7fe ff84 	bl	800177c <HAL_GetTick>
 8002874:	4602      	mov	r2, r0
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	1ad3      	subs	r3, r2, r3
 800287a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800287e:	d901      	bls.n	8002884 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8002880:	2303      	movs	r3, #3
 8002882:	e007      	b.n	8002894 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8002884:	4b06      	ldr	r3, [pc, #24]	; (80028a0 <HAL_PWREx_EnableOverDrive+0x9c>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800288c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8002890:	d1ee      	bne.n	8002870 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8002892:	2300      	movs	r3, #0
}
 8002894:	4618      	mov	r0, r3
 8002896:	3708      	adds	r7, #8
 8002898:	46bd      	mov	sp, r7
 800289a:	bd80      	pop	{r7, pc}
 800289c:	40023800 	.word	0x40023800
 80028a0:	40007000 	.word	0x40007000

080028a4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b086      	sub	sp, #24
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80028ac:	2300      	movs	r3, #0
 80028ae:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e291      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	681b      	ldr	r3, [r3, #0]
 80028be:	f003 0301 	and.w	r3, r3, #1
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	f000 8087 	beq.w	80029d6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80028c8:	4b96      	ldr	r3, [pc, #600]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 80028ca:	689b      	ldr	r3, [r3, #8]
 80028cc:	f003 030c 	and.w	r3, r3, #12
 80028d0:	2b04      	cmp	r3, #4
 80028d2:	d00c      	beq.n	80028ee <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80028d4:	4b93      	ldr	r3, [pc, #588]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 80028d6:	689b      	ldr	r3, [r3, #8]
 80028d8:	f003 030c 	and.w	r3, r3, #12
 80028dc:	2b08      	cmp	r3, #8
 80028de:	d112      	bne.n	8002906 <HAL_RCC_OscConfig+0x62>
 80028e0:	4b90      	ldr	r3, [pc, #576]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 80028e2:	685b      	ldr	r3, [r3, #4]
 80028e4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80028ec:	d10b      	bne.n	8002906 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028ee:	4b8d      	ldr	r3, [pc, #564]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d06c      	beq.n	80029d4 <HAL_RCC_OscConfig+0x130>
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	685b      	ldr	r3, [r3, #4]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d168      	bne.n	80029d4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002902:	2301      	movs	r3, #1
 8002904:	e26b      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800290e:	d106      	bne.n	800291e <HAL_RCC_OscConfig+0x7a>
 8002910:	4b84      	ldr	r3, [pc, #528]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	4a83      	ldr	r2, [pc, #524]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002916:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800291a:	6013      	str	r3, [r2, #0]
 800291c:	e02e      	b.n	800297c <HAL_RCC_OscConfig+0xd8>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	685b      	ldr	r3, [r3, #4]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d10c      	bne.n	8002940 <HAL_RCC_OscConfig+0x9c>
 8002926:	4b7f      	ldr	r3, [pc, #508]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	4a7e      	ldr	r2, [pc, #504]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 800292c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002930:	6013      	str	r3, [r2, #0]
 8002932:	4b7c      	ldr	r3, [pc, #496]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	4a7b      	ldr	r2, [pc, #492]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002938:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800293c:	6013      	str	r3, [r2, #0]
 800293e:	e01d      	b.n	800297c <HAL_RCC_OscConfig+0xd8>
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	685b      	ldr	r3, [r3, #4]
 8002944:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002948:	d10c      	bne.n	8002964 <HAL_RCC_OscConfig+0xc0>
 800294a:	4b76      	ldr	r3, [pc, #472]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	4a75      	ldr	r2, [pc, #468]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002950:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002954:	6013      	str	r3, [r2, #0]
 8002956:	4b73      	ldr	r3, [pc, #460]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	4a72      	ldr	r2, [pc, #456]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 800295c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002960:	6013      	str	r3, [r2, #0]
 8002962:	e00b      	b.n	800297c <HAL_RCC_OscConfig+0xd8>
 8002964:	4b6f      	ldr	r3, [pc, #444]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a6e      	ldr	r2, [pc, #440]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 800296a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800296e:	6013      	str	r3, [r2, #0]
 8002970:	4b6c      	ldr	r3, [pc, #432]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a6b      	ldr	r2, [pc, #428]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002976:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800297a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	685b      	ldr	r3, [r3, #4]
 8002980:	2b00      	cmp	r3, #0
 8002982:	d013      	beq.n	80029ac <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002984:	f7fe fefa 	bl	800177c <HAL_GetTick>
 8002988:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800298a:	e008      	b.n	800299e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800298c:	f7fe fef6 	bl	800177c <HAL_GetTick>
 8002990:	4602      	mov	r2, r0
 8002992:	693b      	ldr	r3, [r7, #16]
 8002994:	1ad3      	subs	r3, r2, r3
 8002996:	2b64      	cmp	r3, #100	; 0x64
 8002998:	d901      	bls.n	800299e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800299a:	2303      	movs	r3, #3
 800299c:	e21f      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800299e:	4b61      	ldr	r3, [pc, #388]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d0f0      	beq.n	800298c <HAL_RCC_OscConfig+0xe8>
 80029aa:	e014      	b.n	80029d6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80029ac:	f7fe fee6 	bl	800177c <HAL_GetTick>
 80029b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029b2:	e008      	b.n	80029c6 <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80029b4:	f7fe fee2 	bl	800177c <HAL_GetTick>
 80029b8:	4602      	mov	r2, r0
 80029ba:	693b      	ldr	r3, [r7, #16]
 80029bc:	1ad3      	subs	r3, r2, r3
 80029be:	2b64      	cmp	r3, #100	; 0x64
 80029c0:	d901      	bls.n	80029c6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80029c2:	2303      	movs	r3, #3
 80029c4:	e20b      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80029c6:	4b57      	ldr	r3, [pc, #348]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d1f0      	bne.n	80029b4 <HAL_RCC_OscConfig+0x110>
 80029d2:	e000      	b.n	80029d6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80029d4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0302 	and.w	r3, r3, #2
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d069      	beq.n	8002ab6 <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80029e2:	4b50      	ldr	r3, [pc, #320]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 80029e4:	689b      	ldr	r3, [r3, #8]
 80029e6:	f003 030c 	and.w	r3, r3, #12
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d00b      	beq.n	8002a06 <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80029ee:	4b4d      	ldr	r3, [pc, #308]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 80029f0:	689b      	ldr	r3, [r3, #8]
 80029f2:	f003 030c 	and.w	r3, r3, #12
 80029f6:	2b08      	cmp	r3, #8
 80029f8:	d11c      	bne.n	8002a34 <HAL_RCC_OscConfig+0x190>
 80029fa:	4b4a      	ldr	r3, [pc, #296]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a02:	2b00      	cmp	r3, #0
 8002a04:	d116      	bne.n	8002a34 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a06:	4b47      	ldr	r3, [pc, #284]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f003 0302 	and.w	r3, r3, #2
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d005      	beq.n	8002a1e <HAL_RCC_OscConfig+0x17a>
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	68db      	ldr	r3, [r3, #12]
 8002a16:	2b01      	cmp	r3, #1
 8002a18:	d001      	beq.n	8002a1e <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002a1a:	2301      	movs	r3, #1
 8002a1c:	e1df      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a1e:	4b41      	ldr	r3, [pc, #260]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	691b      	ldr	r3, [r3, #16]
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	493d      	ldr	r1, [pc, #244]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a2e:	4313      	orrs	r3, r2
 8002a30:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a32:	e040      	b.n	8002ab6 <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002a34:	687b      	ldr	r3, [r7, #4]
 8002a36:	68db      	ldr	r3, [r3, #12]
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d023      	beq.n	8002a84 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002a3c:	4b39      	ldr	r3, [pc, #228]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a3e:	681b      	ldr	r3, [r3, #0]
 8002a40:	4a38      	ldr	r2, [pc, #224]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a42:	f043 0301 	orr.w	r3, r3, #1
 8002a46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a48:	f7fe fe98 	bl	800177c <HAL_GetTick>
 8002a4c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a4e:	e008      	b.n	8002a62 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a50:	f7fe fe94 	bl	800177c <HAL_GetTick>
 8002a54:	4602      	mov	r2, r0
 8002a56:	693b      	ldr	r3, [r7, #16]
 8002a58:	1ad3      	subs	r3, r2, r3
 8002a5a:	2b02      	cmp	r3, #2
 8002a5c:	d901      	bls.n	8002a62 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002a5e:	2303      	movs	r3, #3
 8002a60:	e1bd      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a62:	4b30      	ldr	r3, [pc, #192]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	f003 0302 	and.w	r3, r3, #2
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d0f0      	beq.n	8002a50 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a6e:	4b2d      	ldr	r3, [pc, #180]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	691b      	ldr	r3, [r3, #16]
 8002a7a:	00db      	lsls	r3, r3, #3
 8002a7c:	4929      	ldr	r1, [pc, #164]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]
 8002a82:	e018      	b.n	8002ab6 <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002a84:	4b27      	ldr	r3, [pc, #156]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	4a26      	ldr	r2, [pc, #152]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002a8a:	f023 0301 	bic.w	r3, r3, #1
 8002a8e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a90:	f7fe fe74 	bl	800177c <HAL_GetTick>
 8002a94:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002a96:	e008      	b.n	8002aaa <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002a98:	f7fe fe70 	bl	800177c <HAL_GetTick>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	693b      	ldr	r3, [r7, #16]
 8002aa0:	1ad3      	subs	r3, r2, r3
 8002aa2:	2b02      	cmp	r3, #2
 8002aa4:	d901      	bls.n	8002aaa <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002aa6:	2303      	movs	r3, #3
 8002aa8:	e199      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002aaa:	4b1e      	ldr	r3, [pc, #120]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	f003 0302 	and.w	r3, r3, #2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d1f0      	bne.n	8002a98 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f003 0308 	and.w	r3, r3, #8
 8002abe:	2b00      	cmp	r3, #0
 8002ac0:	d038      	beq.n	8002b34 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	695b      	ldr	r3, [r3, #20]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d019      	beq.n	8002afe <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002aca:	4b16      	ldr	r3, [pc, #88]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002acc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ace:	4a15      	ldr	r2, [pc, #84]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002ad0:	f043 0301 	orr.w	r3, r3, #1
 8002ad4:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ad6:	f7fe fe51 	bl	800177c <HAL_GetTick>
 8002ada:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002adc:	e008      	b.n	8002af0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ade:	f7fe fe4d 	bl	800177c <HAL_GetTick>
 8002ae2:	4602      	mov	r2, r0
 8002ae4:	693b      	ldr	r3, [r7, #16]
 8002ae6:	1ad3      	subs	r3, r2, r3
 8002ae8:	2b02      	cmp	r3, #2
 8002aea:	d901      	bls.n	8002af0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002aec:	2303      	movs	r3, #3
 8002aee:	e176      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002af0:	4b0c      	ldr	r3, [pc, #48]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002af2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002af4:	f003 0302 	and.w	r3, r3, #2
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	d0f0      	beq.n	8002ade <HAL_RCC_OscConfig+0x23a>
 8002afc:	e01a      	b.n	8002b34 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002afe:	4b09      	ldr	r3, [pc, #36]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002b00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b02:	4a08      	ldr	r2, [pc, #32]	; (8002b24 <HAL_RCC_OscConfig+0x280>)
 8002b04:	f023 0301 	bic.w	r3, r3, #1
 8002b08:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b0a:	f7fe fe37 	bl	800177c <HAL_GetTick>
 8002b0e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b10:	e00a      	b.n	8002b28 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002b12:	f7fe fe33 	bl	800177c <HAL_GetTick>
 8002b16:	4602      	mov	r2, r0
 8002b18:	693b      	ldr	r3, [r7, #16]
 8002b1a:	1ad3      	subs	r3, r2, r3
 8002b1c:	2b02      	cmp	r3, #2
 8002b1e:	d903      	bls.n	8002b28 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002b20:	2303      	movs	r3, #3
 8002b22:	e15c      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
 8002b24:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b28:	4b91      	ldr	r3, [pc, #580]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002b2a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b2c:	f003 0302 	and.w	r3, r3, #2
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d1ee      	bne.n	8002b12 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f003 0304 	and.w	r3, r3, #4
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	f000 80a4 	beq.w	8002c8a <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002b42:	4b8b      	ldr	r3, [pc, #556]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d10d      	bne.n	8002b6a <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002b4e:	4b88      	ldr	r3, [pc, #544]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b52:	4a87      	ldr	r2, [pc, #540]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002b54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002b58:	6413      	str	r3, [r2, #64]	; 0x40
 8002b5a:	4b85      	ldr	r3, [pc, #532]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002b62:	60bb      	str	r3, [r7, #8]
 8002b64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002b66:	2301      	movs	r3, #1
 8002b68:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b6a:	4b82      	ldr	r3, [pc, #520]	; (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d118      	bne.n	8002ba8 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002b76:	4b7f      	ldr	r3, [pc, #508]	; (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a7e      	ldr	r2, [pc, #504]	; (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002b7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002b80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002b82:	f7fe fdfb 	bl	800177c <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002b8a:	f7fe fdf7 	bl	800177c <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b64      	cmp	r3, #100	; 0x64
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e120      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002b9c:	4b75      	ldr	r3, [pc, #468]	; (8002d74 <HAL_RCC_OscConfig+0x4d0>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	689b      	ldr	r3, [r3, #8]
 8002bac:	2b01      	cmp	r3, #1
 8002bae:	d106      	bne.n	8002bbe <HAL_RCC_OscConfig+0x31a>
 8002bb0:	4b6f      	ldr	r3, [pc, #444]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002bb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bb4:	4a6e      	ldr	r2, [pc, #440]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002bb6:	f043 0301 	orr.w	r3, r3, #1
 8002bba:	6713      	str	r3, [r2, #112]	; 0x70
 8002bbc:	e02d      	b.n	8002c1a <HAL_RCC_OscConfig+0x376>
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	689b      	ldr	r3, [r3, #8]
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d10c      	bne.n	8002be0 <HAL_RCC_OscConfig+0x33c>
 8002bc6:	4b6a      	ldr	r3, [pc, #424]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002bc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bca:	4a69      	ldr	r2, [pc, #420]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002bcc:	f023 0301 	bic.w	r3, r3, #1
 8002bd0:	6713      	str	r3, [r2, #112]	; 0x70
 8002bd2:	4b67      	ldr	r3, [pc, #412]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bd6:	4a66      	ldr	r2, [pc, #408]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002bd8:	f023 0304 	bic.w	r3, r3, #4
 8002bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8002bde:	e01c      	b.n	8002c1a <HAL_RCC_OscConfig+0x376>
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	689b      	ldr	r3, [r3, #8]
 8002be4:	2b05      	cmp	r3, #5
 8002be6:	d10c      	bne.n	8002c02 <HAL_RCC_OscConfig+0x35e>
 8002be8:	4b61      	ldr	r3, [pc, #388]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bec:	4a60      	ldr	r2, [pc, #384]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002bee:	f043 0304 	orr.w	r3, r3, #4
 8002bf2:	6713      	str	r3, [r2, #112]	; 0x70
 8002bf4:	4b5e      	ldr	r3, [pc, #376]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002bf6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002bf8:	4a5d      	ldr	r2, [pc, #372]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002bfa:	f043 0301 	orr.w	r3, r3, #1
 8002bfe:	6713      	str	r3, [r2, #112]	; 0x70
 8002c00:	e00b      	b.n	8002c1a <HAL_RCC_OscConfig+0x376>
 8002c02:	4b5b      	ldr	r3, [pc, #364]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002c04:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c06:	4a5a      	ldr	r2, [pc, #360]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002c08:	f023 0301 	bic.w	r3, r3, #1
 8002c0c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c0e:	4b58      	ldr	r3, [pc, #352]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002c10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c12:	4a57      	ldr	r2, [pc, #348]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002c14:	f023 0304 	bic.w	r3, r3, #4
 8002c18:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	689b      	ldr	r3, [r3, #8]
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d015      	beq.n	8002c4e <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c22:	f7fe fdab 	bl	800177c <HAL_GetTick>
 8002c26:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c28:	e00a      	b.n	8002c40 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c2a:	f7fe fda7 	bl	800177c <HAL_GetTick>
 8002c2e:	4602      	mov	r2, r0
 8002c30:	693b      	ldr	r3, [r7, #16]
 8002c32:	1ad3      	subs	r3, r2, r3
 8002c34:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c38:	4293      	cmp	r3, r2
 8002c3a:	d901      	bls.n	8002c40 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002c3c:	2303      	movs	r3, #3
 8002c3e:	e0ce      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c40:	4b4b      	ldr	r3, [pc, #300]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002c42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c44:	f003 0302 	and.w	r3, r3, #2
 8002c48:	2b00      	cmp	r3, #0
 8002c4a:	d0ee      	beq.n	8002c2a <HAL_RCC_OscConfig+0x386>
 8002c4c:	e014      	b.n	8002c78 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c4e:	f7fe fd95 	bl	800177c <HAL_GetTick>
 8002c52:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c54:	e00a      	b.n	8002c6c <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002c56:	f7fe fd91 	bl	800177c <HAL_GetTick>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	693b      	ldr	r3, [r7, #16]
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c64:	4293      	cmp	r3, r2
 8002c66:	d901      	bls.n	8002c6c <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002c68:	2303      	movs	r3, #3
 8002c6a:	e0b8      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002c6c:	4b40      	ldr	r3, [pc, #256]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002c6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c70:	f003 0302 	and.w	r3, r3, #2
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d1ee      	bne.n	8002c56 <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002c78:	7dfb      	ldrb	r3, [r7, #23]
 8002c7a:	2b01      	cmp	r3, #1
 8002c7c:	d105      	bne.n	8002c8a <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002c7e:	4b3c      	ldr	r3, [pc, #240]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002c80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c82:	4a3b      	ldr	r2, [pc, #236]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002c84:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002c88:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	699b      	ldr	r3, [r3, #24]
 8002c8e:	2b00      	cmp	r3, #0
 8002c90:	f000 80a4 	beq.w	8002ddc <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002c94:	4b36      	ldr	r3, [pc, #216]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 030c 	and.w	r3, r3, #12
 8002c9c:	2b08      	cmp	r3, #8
 8002c9e:	d06b      	beq.n	8002d78 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	699b      	ldr	r3, [r3, #24]
 8002ca4:	2b02      	cmp	r3, #2
 8002ca6:	d149      	bne.n	8002d3c <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ca8:	4b31      	ldr	r3, [pc, #196]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	4a30      	ldr	r2, [pc, #192]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002cae:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002cb2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002cb4:	f7fe fd62 	bl	800177c <HAL_GetTick>
 8002cb8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cba:	e008      	b.n	8002cce <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002cbc:	f7fe fd5e 	bl	800177c <HAL_GetTick>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	693b      	ldr	r3, [r7, #16]
 8002cc4:	1ad3      	subs	r3, r2, r3
 8002cc6:	2b02      	cmp	r3, #2
 8002cc8:	d901      	bls.n	8002cce <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8002cca:	2303      	movs	r3, #3
 8002ccc:	e087      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002cce:	4b28      	ldr	r3, [pc, #160]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d1f0      	bne.n	8002cbc <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	69da      	ldr	r2, [r3, #28]
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	6a1b      	ldr	r3, [r3, #32]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002ce8:	019b      	lsls	r3, r3, #6
 8002cea:	431a      	orrs	r2, r3
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002cf0:	085b      	lsrs	r3, r3, #1
 8002cf2:	3b01      	subs	r3, #1
 8002cf4:	041b      	lsls	r3, r3, #16
 8002cf6:	431a      	orrs	r2, r3
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cfc:	061b      	lsls	r3, r3, #24
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	4a1b      	ldr	r2, [pc, #108]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002d02:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8002d06:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d08:	4b19      	ldr	r3, [pc, #100]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	4a18      	ldr	r2, [pc, #96]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002d0e:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8002d12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d14:	f7fe fd32 	bl	800177c <HAL_GetTick>
 8002d18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d1a:	e008      	b.n	8002d2e <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d1c:	f7fe fd2e 	bl	800177c <HAL_GetTick>
 8002d20:	4602      	mov	r2, r0
 8002d22:	693b      	ldr	r3, [r7, #16]
 8002d24:	1ad3      	subs	r3, r2, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d901      	bls.n	8002d2e <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002d2a:	2303      	movs	r3, #3
 8002d2c:	e057      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d2e:	4b10      	ldr	r3, [pc, #64]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d0f0      	beq.n	8002d1c <HAL_RCC_OscConfig+0x478>
 8002d3a:	e04f      	b.n	8002ddc <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d3c:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a0b      	ldr	r2, [pc, #44]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002d42:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d46:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d48:	f7fe fd18 	bl	800177c <HAL_GetTick>
 8002d4c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d4e:	e008      	b.n	8002d62 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002d50:	f7fe fd14 	bl	800177c <HAL_GetTick>
 8002d54:	4602      	mov	r2, r0
 8002d56:	693b      	ldr	r3, [r7, #16]
 8002d58:	1ad3      	subs	r3, r2, r3
 8002d5a:	2b02      	cmp	r3, #2
 8002d5c:	d901      	bls.n	8002d62 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002d5e:	2303      	movs	r3, #3
 8002d60:	e03d      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d62:	4b03      	ldr	r3, [pc, #12]	; (8002d70 <HAL_RCC_OscConfig+0x4cc>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	d1f0      	bne.n	8002d50 <HAL_RCC_OscConfig+0x4ac>
 8002d6e:	e035      	b.n	8002ddc <HAL_RCC_OscConfig+0x538>
 8002d70:	40023800 	.word	0x40023800
 8002d74:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002d78:	4b1b      	ldr	r3, [pc, #108]	; (8002de8 <HAL_RCC_OscConfig+0x544>)
 8002d7a:	685b      	ldr	r3, [r3, #4]
 8002d7c:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	699b      	ldr	r3, [r3, #24]
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d028      	beq.n	8002dd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d121      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002d9e:	429a      	cmp	r2, r3
 8002da0:	d11a      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002da2:	68fa      	ldr	r2, [r7, #12]
 8002da4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002da8:	4013      	ands	r3, r2
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002dae:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002db0:	4293      	cmp	r3, r2
 8002db2:	d111      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002dbe:	085b      	lsrs	r3, r3, #1
 8002dc0:	3b01      	subs	r3, #1
 8002dc2:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002dc4:	429a      	cmp	r2, r3
 8002dc6:	d107      	bne.n	8002dd8 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002dd2:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8002dd4:	429a      	cmp	r2, r3
 8002dd6:	d001      	beq.n	8002ddc <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8002dd8:	2301      	movs	r3, #1
 8002dda:	e000      	b.n	8002dde <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8002ddc:	2300      	movs	r3, #0
}
 8002dde:	4618      	mov	r0, r3
 8002de0:	3718      	adds	r7, #24
 8002de2:	46bd      	mov	sp, r7
 8002de4:	bd80      	pop	{r7, pc}
 8002de6:	bf00      	nop
 8002de8:	40023800 	.word	0x40023800

08002dec <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002dec:	b580      	push	{r7, lr}
 8002dee:	b084      	sub	sp, #16
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	6078      	str	r0, [r7, #4]
 8002df4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8002df6:	2300      	movs	r3, #0
 8002df8:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d101      	bne.n	8002e04 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002e00:	2301      	movs	r3, #1
 8002e02:	e0d0      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002e04:	4b6a      	ldr	r3, [pc, #424]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f003 030f 	and.w	r3, r3, #15
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d910      	bls.n	8002e34 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e12:	4b67      	ldr	r3, [pc, #412]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	f023 020f 	bic.w	r2, r3, #15
 8002e1a:	4965      	ldr	r1, [pc, #404]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e1c:	683b      	ldr	r3, [r7, #0]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e22:	4b63      	ldr	r3, [pc, #396]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002e24:	681b      	ldr	r3, [r3, #0]
 8002e26:	f003 030f 	and.w	r3, r3, #15
 8002e2a:	683a      	ldr	r2, [r7, #0]
 8002e2c:	429a      	cmp	r2, r3
 8002e2e:	d001      	beq.n	8002e34 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002e30:	2301      	movs	r3, #1
 8002e32:	e0b8      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f003 0302 	and.w	r3, r3, #2
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d020      	beq.n	8002e82 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f003 0304 	and.w	r3, r3, #4
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d005      	beq.n	8002e58 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e4c:	4b59      	ldr	r3, [pc, #356]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e4e:	689b      	ldr	r3, [r3, #8]
 8002e50:	4a58      	ldr	r2, [pc, #352]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e52:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e56:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	f003 0308 	and.w	r3, r3, #8
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d005      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002e64:	4b53      	ldr	r3, [pc, #332]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e66:	689b      	ldr	r3, [r3, #8]
 8002e68:	4a52      	ldr	r2, [pc, #328]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002e6e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002e70:	4b50      	ldr	r3, [pc, #320]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	689b      	ldr	r3, [r3, #8]
 8002e7c:	494d      	ldr	r1, [pc, #308]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d040      	beq.n	8002f10 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	2b01      	cmp	r3, #1
 8002e94:	d107      	bne.n	8002ea6 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002e96:	4b47      	ldr	r3, [pc, #284]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d115      	bne.n	8002ece <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002ea2:	2301      	movs	r3, #1
 8002ea4:	e07f      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d107      	bne.n	8002ebe <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002eae:	4b41      	ldr	r3, [pc, #260]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d109      	bne.n	8002ece <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eba:	2301      	movs	r3, #1
 8002ebc:	e073      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ebe:	4b3d      	ldr	r3, [pc, #244]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0302 	and.w	r3, r3, #2
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d101      	bne.n	8002ece <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8002eca:	2301      	movs	r3, #1
 8002ecc:	e06b      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002ece:	4b39      	ldr	r3, [pc, #228]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f023 0203 	bic.w	r2, r3, #3
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	685b      	ldr	r3, [r3, #4]
 8002eda:	4936      	ldr	r1, [pc, #216]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002edc:	4313      	orrs	r3, r2
 8002ede:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002ee0:	f7fe fc4c 	bl	800177c <HAL_GetTick>
 8002ee4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002ee6:	e00a      	b.n	8002efe <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002ee8:	f7fe fc48 	bl	800177c <HAL_GetTick>
 8002eec:	4602      	mov	r2, r0
 8002eee:	68fb      	ldr	r3, [r7, #12]
 8002ef0:	1ad3      	subs	r3, r2, r3
 8002ef2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ef6:	4293      	cmp	r3, r2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e053      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002efe:	4b2d      	ldr	r3, [pc, #180]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f00:	689b      	ldr	r3, [r3, #8]
 8002f02:	f003 020c 	and.w	r2, r3, #12
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	685b      	ldr	r3, [r3, #4]
 8002f0a:	009b      	lsls	r3, r3, #2
 8002f0c:	429a      	cmp	r2, r3
 8002f0e:	d1eb      	bne.n	8002ee8 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002f10:	4b27      	ldr	r3, [pc, #156]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 030f 	and.w	r3, r3, #15
 8002f18:	683a      	ldr	r2, [r7, #0]
 8002f1a:	429a      	cmp	r2, r3
 8002f1c:	d210      	bcs.n	8002f40 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f1e:	4b24      	ldr	r3, [pc, #144]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f023 020f 	bic.w	r2, r3, #15
 8002f26:	4922      	ldr	r1, [pc, #136]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f28:	683b      	ldr	r3, [r7, #0]
 8002f2a:	4313      	orrs	r3, r2
 8002f2c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f2e:	4b20      	ldr	r3, [pc, #128]	; (8002fb0 <HAL_RCC_ClockConfig+0x1c4>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f003 030f 	and.w	r3, r3, #15
 8002f36:	683a      	ldr	r2, [r7, #0]
 8002f38:	429a      	cmp	r2, r3
 8002f3a:	d001      	beq.n	8002f40 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	e032      	b.n	8002fa6 <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d008      	beq.n	8002f5e <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f4c:	4b19      	ldr	r3, [pc, #100]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f4e:	689b      	ldr	r3, [r3, #8]
 8002f50:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	68db      	ldr	r3, [r3, #12]
 8002f58:	4916      	ldr	r1, [pc, #88]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f5a:	4313      	orrs	r3, r2
 8002f5c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f003 0308 	and.w	r3, r3, #8
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d009      	beq.n	8002f7e <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002f6a:	4b12      	ldr	r3, [pc, #72]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f6c:	689b      	ldr	r3, [r3, #8]
 8002f6e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	691b      	ldr	r3, [r3, #16]
 8002f76:	00db      	lsls	r3, r3, #3
 8002f78:	490e      	ldr	r1, [pc, #56]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f7a:	4313      	orrs	r3, r2
 8002f7c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002f7e:	f000 f821 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 8002f82:	4602      	mov	r2, r0
 8002f84:	4b0b      	ldr	r3, [pc, #44]	; (8002fb4 <HAL_RCC_ClockConfig+0x1c8>)
 8002f86:	689b      	ldr	r3, [r3, #8]
 8002f88:	091b      	lsrs	r3, r3, #4
 8002f8a:	f003 030f 	and.w	r3, r3, #15
 8002f8e:	490a      	ldr	r1, [pc, #40]	; (8002fb8 <HAL_RCC_ClockConfig+0x1cc>)
 8002f90:	5ccb      	ldrb	r3, [r1, r3]
 8002f92:	fa22 f303 	lsr.w	r3, r2, r3
 8002f96:	4a09      	ldr	r2, [pc, #36]	; (8002fbc <HAL_RCC_ClockConfig+0x1d0>)
 8002f98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002f9a:	4b09      	ldr	r3, [pc, #36]	; (8002fc0 <HAL_RCC_ClockConfig+0x1d4>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	f7fe fba8 	bl	80016f4 <HAL_InitTick>

  return HAL_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3710      	adds	r7, #16
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
 8002fae:	bf00      	nop
 8002fb0:	40023c00 	.word	0x40023c00
 8002fb4:	40023800 	.word	0x40023800
 8002fb8:	08009f6c 	.word	0x08009f6c
 8002fbc:	20000000 	.word	0x20000000
 8002fc0:	20000004 	.word	0x20000004

08002fc4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002fc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002fc8:	b094      	sub	sp, #80	; 0x50
 8002fca:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8002fcc:	2300      	movs	r3, #0
 8002fce:	647b      	str	r3, [r7, #68]	; 0x44
 8002fd0:	2300      	movs	r3, #0
 8002fd2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fd4:	2300      	movs	r3, #0
 8002fd6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8002fd8:	2300      	movs	r3, #0
 8002fda:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002fdc:	4b79      	ldr	r3, [pc, #484]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fde:	689b      	ldr	r3, [r3, #8]
 8002fe0:	f003 030c 	and.w	r3, r3, #12
 8002fe4:	2b08      	cmp	r3, #8
 8002fe6:	d00d      	beq.n	8003004 <HAL_RCC_GetSysClockFreq+0x40>
 8002fe8:	2b08      	cmp	r3, #8
 8002fea:	f200 80e1 	bhi.w	80031b0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002fee:	2b00      	cmp	r3, #0
 8002ff0:	d002      	beq.n	8002ff8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ff2:	2b04      	cmp	r3, #4
 8002ff4:	d003      	beq.n	8002ffe <HAL_RCC_GetSysClockFreq+0x3a>
 8002ff6:	e0db      	b.n	80031b0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ff8:	4b73      	ldr	r3, [pc, #460]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ffa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ffc:	e0db      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ffe:	4b73      	ldr	r3, [pc, #460]	; (80031cc <HAL_RCC_GetSysClockFreq+0x208>)
 8003000:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003002:	e0d8      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003004:	4b6f      	ldr	r3, [pc, #444]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003006:	685b      	ldr	r3, [r3, #4]
 8003008:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800300c:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 800300e:	4b6d      	ldr	r3, [pc, #436]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003010:	685b      	ldr	r3, [r3, #4]
 8003012:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003016:	2b00      	cmp	r3, #0
 8003018:	d063      	beq.n	80030e2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800301a:	4b6a      	ldr	r3, [pc, #424]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	099b      	lsrs	r3, r3, #6
 8003020:	2200      	movs	r2, #0
 8003022:	63bb      	str	r3, [r7, #56]	; 0x38
 8003024:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003026:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003028:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800302c:	633b      	str	r3, [r7, #48]	; 0x30
 800302e:	2300      	movs	r3, #0
 8003030:	637b      	str	r3, [r7, #52]	; 0x34
 8003032:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003036:	4622      	mov	r2, r4
 8003038:	462b      	mov	r3, r5
 800303a:	f04f 0000 	mov.w	r0, #0
 800303e:	f04f 0100 	mov.w	r1, #0
 8003042:	0159      	lsls	r1, r3, #5
 8003044:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003048:	0150      	lsls	r0, r2, #5
 800304a:	4602      	mov	r2, r0
 800304c:	460b      	mov	r3, r1
 800304e:	4621      	mov	r1, r4
 8003050:	1a51      	subs	r1, r2, r1
 8003052:	6139      	str	r1, [r7, #16]
 8003054:	4629      	mov	r1, r5
 8003056:	eb63 0301 	sbc.w	r3, r3, r1
 800305a:	617b      	str	r3, [r7, #20]
 800305c:	f04f 0200 	mov.w	r2, #0
 8003060:	f04f 0300 	mov.w	r3, #0
 8003064:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003068:	4659      	mov	r1, fp
 800306a:	018b      	lsls	r3, r1, #6
 800306c:	4651      	mov	r1, sl
 800306e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003072:	4651      	mov	r1, sl
 8003074:	018a      	lsls	r2, r1, #6
 8003076:	4651      	mov	r1, sl
 8003078:	ebb2 0801 	subs.w	r8, r2, r1
 800307c:	4659      	mov	r1, fp
 800307e:	eb63 0901 	sbc.w	r9, r3, r1
 8003082:	f04f 0200 	mov.w	r2, #0
 8003086:	f04f 0300 	mov.w	r3, #0
 800308a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800308e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003092:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003096:	4690      	mov	r8, r2
 8003098:	4699      	mov	r9, r3
 800309a:	4623      	mov	r3, r4
 800309c:	eb18 0303 	adds.w	r3, r8, r3
 80030a0:	60bb      	str	r3, [r7, #8]
 80030a2:	462b      	mov	r3, r5
 80030a4:	eb49 0303 	adc.w	r3, r9, r3
 80030a8:	60fb      	str	r3, [r7, #12]
 80030aa:	f04f 0200 	mov.w	r2, #0
 80030ae:	f04f 0300 	mov.w	r3, #0
 80030b2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030b6:	4629      	mov	r1, r5
 80030b8:	024b      	lsls	r3, r1, #9
 80030ba:	4621      	mov	r1, r4
 80030bc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030c0:	4621      	mov	r1, r4
 80030c2:	024a      	lsls	r2, r1, #9
 80030c4:	4610      	mov	r0, r2
 80030c6:	4619      	mov	r1, r3
 80030c8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80030ca:	2200      	movs	r2, #0
 80030cc:	62bb      	str	r3, [r7, #40]	; 0x28
 80030ce:	62fa      	str	r2, [r7, #44]	; 0x2c
 80030d0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80030d4:	f7fd f8ec 	bl	80002b0 <__aeabi_uldivmod>
 80030d8:	4602      	mov	r2, r0
 80030da:	460b      	mov	r3, r1
 80030dc:	4613      	mov	r3, r2
 80030de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80030e0:	e058      	b.n	8003194 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80030e2:	4b38      	ldr	r3, [pc, #224]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 80030e4:	685b      	ldr	r3, [r3, #4]
 80030e6:	099b      	lsrs	r3, r3, #6
 80030e8:	2200      	movs	r2, #0
 80030ea:	4618      	mov	r0, r3
 80030ec:	4611      	mov	r1, r2
 80030ee:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80030f2:	623b      	str	r3, [r7, #32]
 80030f4:	2300      	movs	r3, #0
 80030f6:	627b      	str	r3, [r7, #36]	; 0x24
 80030f8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80030fc:	4642      	mov	r2, r8
 80030fe:	464b      	mov	r3, r9
 8003100:	f04f 0000 	mov.w	r0, #0
 8003104:	f04f 0100 	mov.w	r1, #0
 8003108:	0159      	lsls	r1, r3, #5
 800310a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800310e:	0150      	lsls	r0, r2, #5
 8003110:	4602      	mov	r2, r0
 8003112:	460b      	mov	r3, r1
 8003114:	4641      	mov	r1, r8
 8003116:	ebb2 0a01 	subs.w	sl, r2, r1
 800311a:	4649      	mov	r1, r9
 800311c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003120:	f04f 0200 	mov.w	r2, #0
 8003124:	f04f 0300 	mov.w	r3, #0
 8003128:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800312c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003130:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003134:	ebb2 040a 	subs.w	r4, r2, sl
 8003138:	eb63 050b 	sbc.w	r5, r3, fp
 800313c:	f04f 0200 	mov.w	r2, #0
 8003140:	f04f 0300 	mov.w	r3, #0
 8003144:	00eb      	lsls	r3, r5, #3
 8003146:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800314a:	00e2      	lsls	r2, r4, #3
 800314c:	4614      	mov	r4, r2
 800314e:	461d      	mov	r5, r3
 8003150:	4643      	mov	r3, r8
 8003152:	18e3      	adds	r3, r4, r3
 8003154:	603b      	str	r3, [r7, #0]
 8003156:	464b      	mov	r3, r9
 8003158:	eb45 0303 	adc.w	r3, r5, r3
 800315c:	607b      	str	r3, [r7, #4]
 800315e:	f04f 0200 	mov.w	r2, #0
 8003162:	f04f 0300 	mov.w	r3, #0
 8003166:	e9d7 4500 	ldrd	r4, r5, [r7]
 800316a:	4629      	mov	r1, r5
 800316c:	028b      	lsls	r3, r1, #10
 800316e:	4621      	mov	r1, r4
 8003170:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003174:	4621      	mov	r1, r4
 8003176:	028a      	lsls	r2, r1, #10
 8003178:	4610      	mov	r0, r2
 800317a:	4619      	mov	r1, r3
 800317c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800317e:	2200      	movs	r2, #0
 8003180:	61bb      	str	r3, [r7, #24]
 8003182:	61fa      	str	r2, [r7, #28]
 8003184:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003188:	f7fd f892 	bl	80002b0 <__aeabi_uldivmod>
 800318c:	4602      	mov	r2, r0
 800318e:	460b      	mov	r3, r1
 8003190:	4613      	mov	r3, r2
 8003192:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003194:	4b0b      	ldr	r3, [pc, #44]	; (80031c4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	0c1b      	lsrs	r3, r3, #16
 800319a:	f003 0303 	and.w	r3, r3, #3
 800319e:	3301      	adds	r3, #1
 80031a0:	005b      	lsls	r3, r3, #1
 80031a2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 80031a4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80031ac:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ae:	e002      	b.n	80031b6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031b0:	4b05      	ldr	r3, [pc, #20]	; (80031c8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031b2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031b8:	4618      	mov	r0, r3
 80031ba:	3750      	adds	r7, #80	; 0x50
 80031bc:	46bd      	mov	sp, r7
 80031be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031c2:	bf00      	nop
 80031c4:	40023800 	.word	0x40023800
 80031c8:	00f42400 	.word	0x00f42400
 80031cc:	007a1200 	.word	0x007a1200

080031d0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80031d4:	4b03      	ldr	r3, [pc, #12]	; (80031e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80031d6:	681b      	ldr	r3, [r3, #0]
}
 80031d8:	4618      	mov	r0, r3
 80031da:	46bd      	mov	sp, r7
 80031dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e0:	4770      	bx	lr
 80031e2:	bf00      	nop
 80031e4:	20000000 	.word	0x20000000

080031e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80031e8:	b580      	push	{r7, lr}
 80031ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80031ec:	f7ff fff0 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 80031f0:	4602      	mov	r2, r0
 80031f2:	4b05      	ldr	r3, [pc, #20]	; (8003208 <HAL_RCC_GetPCLK1Freq+0x20>)
 80031f4:	689b      	ldr	r3, [r3, #8]
 80031f6:	0a9b      	lsrs	r3, r3, #10
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	4903      	ldr	r1, [pc, #12]	; (800320c <HAL_RCC_GetPCLK1Freq+0x24>)
 80031fe:	5ccb      	ldrb	r3, [r1, r3]
 8003200:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003204:	4618      	mov	r0, r3
 8003206:	bd80      	pop	{r7, pc}
 8003208:	40023800 	.word	0x40023800
 800320c:	08009f7c 	.word	0x08009f7c

08003210 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003214:	f7ff ffdc 	bl	80031d0 <HAL_RCC_GetHCLKFreq>
 8003218:	4602      	mov	r2, r0
 800321a:	4b05      	ldr	r3, [pc, #20]	; (8003230 <HAL_RCC_GetPCLK2Freq+0x20>)
 800321c:	689b      	ldr	r3, [r3, #8]
 800321e:	0b5b      	lsrs	r3, r3, #13
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	4903      	ldr	r1, [pc, #12]	; (8003234 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003226:	5ccb      	ldrb	r3, [r1, r3]
 8003228:	fa22 f303 	lsr.w	r3, r2, r3
}
 800322c:	4618      	mov	r0, r3
 800322e:	bd80      	pop	{r7, pc}
 8003230:	40023800 	.word	0x40023800
 8003234:	08009f7c 	.word	0x08009f7c

08003238 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b088      	sub	sp, #32
 800323c:	af00      	add	r7, sp, #0
 800323e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8003240:	2300      	movs	r3, #0
 8003242:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8003244:	2300      	movs	r3, #0
 8003246:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8003248:	2300      	movs	r3, #0
 800324a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 800324c:	2300      	movs	r3, #0
 800324e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8003250:	2300      	movs	r3, #0
 8003252:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	f003 0301 	and.w	r3, r3, #1
 800325c:	2b00      	cmp	r3, #0
 800325e:	d012      	beq.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8003260:	4b69      	ldr	r3, [pc, #420]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	4a68      	ldr	r2, [pc, #416]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003266:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800326a:	6093      	str	r3, [r2, #8]
 800326c:	4b66      	ldr	r3, [pc, #408]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800326e:	689a      	ldr	r2, [r3, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003274:	4964      	ldr	r1, [pc, #400]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003276:	4313      	orrs	r3, r2
 8003278:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003282:	2301      	movs	r3, #1
 8003284:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d017      	beq.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003292:	4b5d      	ldr	r3, [pc, #372]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003294:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003298:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032a0:	4959      	ldr	r1, [pc, #356]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032a2:	4313      	orrs	r3, r2
 80032a4:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ac:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80032b0:	d101      	bne.n	80032b6 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 80032b2:	2301      	movs	r3, #1
 80032b4:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80032be:	2301      	movs	r3, #1
 80032c0:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d017      	beq.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80032ce:	4b4e      	ldr	r3, [pc, #312]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80032d4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032dc:	494a      	ldr	r1, [pc, #296]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80032de:	4313      	orrs	r3, r2
 80032e0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032e8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80032ec:	d101      	bne.n	80032f2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80032ee:	2301      	movs	r3, #1
 80032f0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d101      	bne.n	80032fe <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80032fa:	2301      	movs	r3, #1
 80032fc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003306:	2b00      	cmp	r3, #0
 8003308:	d001      	beq.n	800330e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800330a:	2301      	movs	r3, #1
 800330c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f003 0320 	and.w	r3, r3, #32
 8003316:	2b00      	cmp	r3, #0
 8003318:	f000 808b 	beq.w	8003432 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800331c:	4b3a      	ldr	r3, [pc, #232]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800331e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003320:	4a39      	ldr	r2, [pc, #228]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003322:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003326:	6413      	str	r3, [r2, #64]	; 0x40
 8003328:	4b37      	ldr	r3, [pc, #220]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800332a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800332c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003330:	60bb      	str	r3, [r7, #8]
 8003332:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8003334:	4b35      	ldr	r3, [pc, #212]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a34      	ldr	r2, [pc, #208]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800333a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800333e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003340:	f7fe fa1c 	bl	800177c <HAL_GetTick>
 8003344:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8003346:	e008      	b.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003348:	f7fe fa18 	bl	800177c <HAL_GetTick>
 800334c:	4602      	mov	r2, r0
 800334e:	697b      	ldr	r3, [r7, #20]
 8003350:	1ad3      	subs	r3, r2, r3
 8003352:	2b64      	cmp	r3, #100	; 0x64
 8003354:	d901      	bls.n	800335a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8003356:	2303      	movs	r3, #3
 8003358:	e357      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800335a:	4b2c      	ldr	r3, [pc, #176]	; (800340c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003362:	2b00      	cmp	r3, #0
 8003364:	d0f0      	beq.n	8003348 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003366:	4b28      	ldr	r3, [pc, #160]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003368:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800336e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003370:	693b      	ldr	r3, [r7, #16]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d035      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800337a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800337e:	693a      	ldr	r2, [r7, #16]
 8003380:	429a      	cmp	r2, r3
 8003382:	d02e      	beq.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003384:	4b20      	ldr	r3, [pc, #128]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003388:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800338c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800338e:	4b1e      	ldr	r3, [pc, #120]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003390:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003392:	4a1d      	ldr	r2, [pc, #116]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003394:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003398:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800339a:	4b1b      	ldr	r3, [pc, #108]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800339c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800339e:	4a1a      	ldr	r2, [pc, #104]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80033a4:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 80033a6:	4a18      	ldr	r2, [pc, #96]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80033ac:	4b16      	ldr	r3, [pc, #88]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033b0:	f003 0301 	and.w	r3, r3, #1
 80033b4:	2b01      	cmp	r3, #1
 80033b6:	d114      	bne.n	80033e2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fe f9e0 	bl	800177c <HAL_GetTick>
 80033bc:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033be:	e00a      	b.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033c0:	f7fe f9dc 	bl	800177c <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	697b      	ldr	r3, [r7, #20]
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d901      	bls.n	80033d6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80033d2:	2303      	movs	r3, #3
 80033d4:	e319      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033d6:	4b0c      	ldr	r3, [pc, #48]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033da:	f003 0302 	and.w	r3, r3, #2
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d0ee      	beq.n	80033c0 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80033ea:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80033ee:	d111      	bne.n	8003414 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80033f0:	4b05      	ldr	r3, [pc, #20]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80033fc:	4b04      	ldr	r3, [pc, #16]	; (8003410 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80033fe:	400b      	ands	r3, r1
 8003400:	4901      	ldr	r1, [pc, #4]	; (8003408 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003402:	4313      	orrs	r3, r2
 8003404:	608b      	str	r3, [r1, #8]
 8003406:	e00b      	b.n	8003420 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003408:	40023800 	.word	0x40023800
 800340c:	40007000 	.word	0x40007000
 8003410:	0ffffcff 	.word	0x0ffffcff
 8003414:	4baa      	ldr	r3, [pc, #680]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003416:	689b      	ldr	r3, [r3, #8]
 8003418:	4aa9      	ldr	r2, [pc, #676]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800341a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800341e:	6093      	str	r3, [r2, #8]
 8003420:	4ba7      	ldr	r3, [pc, #668]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003422:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003428:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800342c:	49a4      	ldr	r1, [pc, #656]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800342e:	4313      	orrs	r3, r2
 8003430:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0310 	and.w	r3, r3, #16
 800343a:	2b00      	cmp	r3, #0
 800343c:	d010      	beq.n	8003460 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800343e:	4ba0      	ldr	r3, [pc, #640]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003440:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003444:	4a9e      	ldr	r2, [pc, #632]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003446:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800344a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800344e:	4b9c      	ldr	r3, [pc, #624]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003450:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003458:	4999      	ldr	r1, [pc, #612]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800345a:	4313      	orrs	r3, r2
 800345c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003468:	2b00      	cmp	r3, #0
 800346a:	d00a      	beq.n	8003482 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800346c:	4b94      	ldr	r3, [pc, #592]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800346e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003472:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800347a:	4991      	ldr	r1, [pc, #580]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800347c:	4313      	orrs	r3, r2
 800347e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	681b      	ldr	r3, [r3, #0]
 8003486:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d00a      	beq.n	80034a4 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800348e:	4b8c      	ldr	r3, [pc, #560]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003490:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003494:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800349c:	4988      	ldr	r1, [pc, #544]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d00a      	beq.n	80034c6 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80034b0:	4b83      	ldr	r3, [pc, #524]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034b6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80034be:	4980      	ldr	r1, [pc, #512]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034c0:	4313      	orrs	r3, r2
 80034c2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d00a      	beq.n	80034e8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80034d2:	4b7b      	ldr	r3, [pc, #492]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034d8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034e0:	4977      	ldr	r1, [pc, #476]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034e2:	4313      	orrs	r3, r2
 80034e4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d00a      	beq.n	800350a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80034f4:	4b72      	ldr	r3, [pc, #456]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80034f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80034fa:	f023 0203 	bic.w	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003502:	496f      	ldr	r1, [pc, #444]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003504:	4313      	orrs	r3, r2
 8003506:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003512:	2b00      	cmp	r3, #0
 8003514:	d00a      	beq.n	800352c <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003516:	4b6a      	ldr	r3, [pc, #424]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003518:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800351c:	f023 020c 	bic.w	r2, r3, #12
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003524:	4966      	ldr	r1, [pc, #408]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003526:	4313      	orrs	r3, r2
 8003528:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003534:	2b00      	cmp	r3, #0
 8003536:	d00a      	beq.n	800354e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003538:	4b61      	ldr	r3, [pc, #388]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800353a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800353e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003546:	495e      	ldr	r1, [pc, #376]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003548:	4313      	orrs	r3, r2
 800354a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003556:	2b00      	cmp	r3, #0
 8003558:	d00a      	beq.n	8003570 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800355a:	4b59      	ldr	r3, [pc, #356]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800355c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003560:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003568:	4955      	ldr	r1, [pc, #340]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800356a:	4313      	orrs	r3, r2
 800356c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003578:	2b00      	cmp	r3, #0
 800357a:	d00a      	beq.n	8003592 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800357c:	4b50      	ldr	r3, [pc, #320]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800357e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003582:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800358a:	494d      	ldr	r1, [pc, #308]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800358c:	4313      	orrs	r3, r2
 800358e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	681b      	ldr	r3, [r3, #0]
 8003596:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800359a:	2b00      	cmp	r3, #0
 800359c:	d00a      	beq.n	80035b4 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800359e:	4b48      	ldr	r3, [pc, #288]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035a4:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035ac:	4944      	ldr	r1, [pc, #272]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035ae:	4313      	orrs	r3, r2
 80035b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80035bc:	2b00      	cmp	r3, #0
 80035be:	d00a      	beq.n	80035d6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 80035c0:	4b3f      	ldr	r3, [pc, #252]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035c6:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ce:	493c      	ldr	r1, [pc, #240]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035d0:	4313      	orrs	r3, r2
 80035d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d00a      	beq.n	80035f8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80035e2:	4b37      	ldr	r3, [pc, #220]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80035e8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80035f0:	4933      	ldr	r1, [pc, #204]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80035f2:	4313      	orrs	r3, r2
 80035f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003600:	2b00      	cmp	r3, #0
 8003602:	d00a      	beq.n	800361a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003604:	4b2e      	ldr	r3, [pc, #184]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003606:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800360a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003612:	492b      	ldr	r1, [pc, #172]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003614:	4313      	orrs	r3, r2
 8003616:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003622:	2b00      	cmp	r3, #0
 8003624:	d011      	beq.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8003626:	4b26      	ldr	r3, [pc, #152]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003628:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800362c:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003634:	4922      	ldr	r1, [pc, #136]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003636:	4313      	orrs	r3, r2
 8003638:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003640:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003644:	d101      	bne.n	800364a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8003646:	2301      	movs	r3, #1
 8003648:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f003 0308 	and.w	r3, r3, #8
 8003652:	2b00      	cmp	r3, #0
 8003654:	d001      	beq.n	800365a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8003656:	2301      	movs	r3, #1
 8003658:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003662:	2b00      	cmp	r3, #0
 8003664:	d00a      	beq.n	800367c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003666:	4b16      	ldr	r3, [pc, #88]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003668:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800366c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003674:	4912      	ldr	r1, [pc, #72]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8003676:	4313      	orrs	r3, r2
 8003678:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d00b      	beq.n	80036a0 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003688:	4b0d      	ldr	r3, [pc, #52]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800368a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800368e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003698:	4909      	ldr	r1, [pc, #36]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800369a:	4313      	orrs	r3, r2
 800369c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80036a0:	69fb      	ldr	r3, [r7, #28]
 80036a2:	2b01      	cmp	r3, #1
 80036a4:	d006      	beq.n	80036b4 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	681b      	ldr	r3, [r3, #0]
 80036aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	f000 80d9 	beq.w	8003866 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80036b4:	4b02      	ldr	r3, [pc, #8]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	4a01      	ldr	r2, [pc, #4]	; (80036c0 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80036ba:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 80036be:	e001      	b.n	80036c4 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 80036c0:	40023800 	.word	0x40023800
 80036c4:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036c6:	f7fe f859 	bl	800177c <HAL_GetTick>
 80036ca:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036cc:	e008      	b.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80036ce:	f7fe f855 	bl	800177c <HAL_GetTick>
 80036d2:	4602      	mov	r2, r0
 80036d4:	697b      	ldr	r3, [r7, #20]
 80036d6:	1ad3      	subs	r3, r2, r3
 80036d8:	2b64      	cmp	r3, #100	; 0x64
 80036da:	d901      	bls.n	80036e0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80036dc:	2303      	movs	r3, #3
 80036de:	e194      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80036e0:	4b6c      	ldr	r3, [pc, #432]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80036e8:	2b00      	cmp	r3, #0
 80036ea:	d1f0      	bne.n	80036ce <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 0301 	and.w	r3, r3, #1
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d021      	beq.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x504>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d11d      	bne.n	800373c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003700:	4b64      	ldr	r3, [pc, #400]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003702:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003706:	0c1b      	lsrs	r3, r3, #16
 8003708:	f003 0303 	and.w	r3, r3, #3
 800370c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800370e:	4b61      	ldr	r3, [pc, #388]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003710:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003714:	0e1b      	lsrs	r3, r3, #24
 8003716:	f003 030f 	and.w	r3, r3, #15
 800371a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	685b      	ldr	r3, [r3, #4]
 8003720:	019a      	lsls	r2, r3, #6
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	041b      	lsls	r3, r3, #16
 8003726:	431a      	orrs	r2, r3
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	061b      	lsls	r3, r3, #24
 800372c:	431a      	orrs	r2, r3
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	689b      	ldr	r3, [r3, #8]
 8003732:	071b      	lsls	r3, r3, #28
 8003734:	4957      	ldr	r1, [pc, #348]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003736:	4313      	orrs	r3, r2
 8003738:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003744:	2b00      	cmp	r3, #0
 8003746:	d004      	beq.n	8003752 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800374c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003750:	d00a      	beq.n	8003768 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	681b      	ldr	r3, [r3, #0]
 8003756:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800375a:	2b00      	cmp	r3, #0
 800375c:	d02e      	beq.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003766:	d129      	bne.n	80037bc <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003768:	4b4a      	ldr	r3, [pc, #296]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800376a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800376e:	0c1b      	lsrs	r3, r3, #16
 8003770:	f003 0303 	and.w	r3, r3, #3
 8003774:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003776:	4b47      	ldr	r3, [pc, #284]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003778:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800377c:	0f1b      	lsrs	r3, r3, #28
 800377e:	f003 0307 	and.w	r3, r3, #7
 8003782:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	685b      	ldr	r3, [r3, #4]
 8003788:	019a      	lsls	r2, r3, #6
 800378a:	693b      	ldr	r3, [r7, #16]
 800378c:	041b      	lsls	r3, r3, #16
 800378e:	431a      	orrs	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	68db      	ldr	r3, [r3, #12]
 8003794:	061b      	lsls	r3, r3, #24
 8003796:	431a      	orrs	r2, r3
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	071b      	lsls	r3, r3, #28
 800379c:	493d      	ldr	r1, [pc, #244]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800379e:	4313      	orrs	r3, r2
 80037a0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 80037a4:	4b3b      	ldr	r3, [pc, #236]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037a6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037aa:	f023 021f 	bic.w	r2, r3, #31
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037b2:	3b01      	subs	r3, #1
 80037b4:	4937      	ldr	r1, [pc, #220]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037b6:	4313      	orrs	r3, r2
 80037b8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d01d      	beq.n	8003804 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80037c8:	4b32      	ldr	r3, [pc, #200]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037ca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037ce:	0e1b      	lsrs	r3, r3, #24
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80037d6:	4b2f      	ldr	r3, [pc, #188]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037d8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80037dc:	0f1b      	lsrs	r3, r3, #28
 80037de:	f003 0307 	and.w	r3, r3, #7
 80037e2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	019a      	lsls	r2, r3, #6
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	691b      	ldr	r3, [r3, #16]
 80037ee:	041b      	lsls	r3, r3, #16
 80037f0:	431a      	orrs	r2, r3
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	061b      	lsls	r3, r3, #24
 80037f6:	431a      	orrs	r2, r3
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	071b      	lsls	r3, r3, #28
 80037fc:	4925      	ldr	r1, [pc, #148]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80037fe:	4313      	orrs	r3, r2
 8003800:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380c:	2b00      	cmp	r3, #0
 800380e:	d011      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	019a      	lsls	r2, r3, #6
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	691b      	ldr	r3, [r3, #16]
 800381a:	041b      	lsls	r3, r3, #16
 800381c:	431a      	orrs	r2, r3
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	68db      	ldr	r3, [r3, #12]
 8003822:	061b      	lsls	r3, r3, #24
 8003824:	431a      	orrs	r2, r3
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	071b      	lsls	r3, r3, #28
 800382c:	4919      	ldr	r1, [pc, #100]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003834:	4b17      	ldr	r3, [pc, #92]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	4a16      	ldr	r2, [pc, #88]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800383a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800383e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003840:	f7fd ff9c 	bl	800177c <HAL_GetTick>
 8003844:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003846:	e008      	b.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003848:	f7fd ff98 	bl	800177c <HAL_GetTick>
 800384c:	4602      	mov	r2, r0
 800384e:	697b      	ldr	r3, [r7, #20]
 8003850:	1ad3      	subs	r3, r2, r3
 8003852:	2b64      	cmp	r3, #100	; 0x64
 8003854:	d901      	bls.n	800385a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003856:	2303      	movs	r3, #3
 8003858:	e0d7      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800385a:	4b0e      	ldr	r3, [pc, #56]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003862:	2b00      	cmp	r3, #0
 8003864:	d0f0      	beq.n	8003848 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003866:	69bb      	ldr	r3, [r7, #24]
 8003868:	2b01      	cmp	r3, #1
 800386a:	f040 80cd 	bne.w	8003a08 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800386e:	4b09      	ldr	r3, [pc, #36]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	4a08      	ldr	r2, [pc, #32]	; (8003894 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003874:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003878:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800387a:	f7fd ff7f 	bl	800177c <HAL_GetTick>
 800387e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003880:	e00a      	b.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003882:	f7fd ff7b 	bl	800177c <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	697b      	ldr	r3, [r7, #20]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	2b64      	cmp	r3, #100	; 0x64
 800388e:	d903      	bls.n	8003898 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003890:	2303      	movs	r3, #3
 8003892:	e0ba      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003894:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003898:	4b5e      	ldr	r3, [pc, #376]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80038a0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80038a4:	d0ed      	beq.n	8003882 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d003      	beq.n	80038ba <HAL_RCCEx_PeriphCLKConfig+0x682>
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	681b      	ldr	r3, [r3, #0]
 80038be:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d02e      	beq.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d12a      	bne.n	8003924 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 80038ce:	4b51      	ldr	r3, [pc, #324]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038d0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038d4:	0c1b      	lsrs	r3, r3, #16
 80038d6:	f003 0303 	and.w	r3, r3, #3
 80038da:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80038dc:	4b4d      	ldr	r3, [pc, #308]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80038de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80038e2:	0f1b      	lsrs	r3, r3, #28
 80038e4:	f003 0307 	and.w	r3, r3, #7
 80038e8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	695b      	ldr	r3, [r3, #20]
 80038ee:	019a      	lsls	r2, r3, #6
 80038f0:	693b      	ldr	r3, [r7, #16]
 80038f2:	041b      	lsls	r3, r3, #16
 80038f4:	431a      	orrs	r2, r3
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	699b      	ldr	r3, [r3, #24]
 80038fa:	061b      	lsls	r3, r3, #24
 80038fc:	431a      	orrs	r2, r3
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	071b      	lsls	r3, r3, #28
 8003902:	4944      	ldr	r1, [pc, #272]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003904:	4313      	orrs	r3, r2
 8003906:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800390a:	4b42      	ldr	r3, [pc, #264]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800390c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003910:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003918:	3b01      	subs	r3, #1
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	493d      	ldr	r1, [pc, #244]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800391e:	4313      	orrs	r3, r2
 8003920:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800392c:	2b00      	cmp	r3, #0
 800392e:	d022      	beq.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003934:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003938:	d11d      	bne.n	8003976 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800393a:	4b36      	ldr	r3, [pc, #216]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800393c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003940:	0e1b      	lsrs	r3, r3, #24
 8003942:	f003 030f 	and.w	r3, r3, #15
 8003946:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003948:	4b32      	ldr	r3, [pc, #200]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800394a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800394e:	0f1b      	lsrs	r3, r3, #28
 8003950:	f003 0307 	and.w	r3, r3, #7
 8003954:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	695b      	ldr	r3, [r3, #20]
 800395a:	019a      	lsls	r2, r3, #6
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	6a1b      	ldr	r3, [r3, #32]
 8003960:	041b      	lsls	r3, r3, #16
 8003962:	431a      	orrs	r2, r3
 8003964:	693b      	ldr	r3, [r7, #16]
 8003966:	061b      	lsls	r3, r3, #24
 8003968:	431a      	orrs	r2, r3
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	071b      	lsls	r3, r3, #28
 800396e:	4929      	ldr	r1, [pc, #164]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003970:	4313      	orrs	r3, r2
 8003972:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f003 0308 	and.w	r3, r3, #8
 800397e:	2b00      	cmp	r3, #0
 8003980:	d028      	beq.n	80039d4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003982:	4b24      	ldr	r3, [pc, #144]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003984:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003988:	0e1b      	lsrs	r3, r3, #24
 800398a:	f003 030f 	and.w	r3, r3, #15
 800398e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003990:	4b20      	ldr	r3, [pc, #128]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003992:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003996:	0c1b      	lsrs	r3, r3, #16
 8003998:	f003 0303 	and.w	r3, r3, #3
 800399c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	695b      	ldr	r3, [r3, #20]
 80039a2:	019a      	lsls	r2, r3, #6
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	041b      	lsls	r3, r3, #16
 80039a8:	431a      	orrs	r2, r3
 80039aa:	693b      	ldr	r3, [r7, #16]
 80039ac:	061b      	lsls	r3, r3, #24
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	69db      	ldr	r3, [r3, #28]
 80039b4:	071b      	lsls	r3, r3, #28
 80039b6:	4917      	ldr	r1, [pc, #92]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039b8:	4313      	orrs	r3, r2
 80039ba:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 80039be:	4b15      	ldr	r3, [pc, #84]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80039c4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039cc:	4911      	ldr	r1, [pc, #68]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039ce:	4313      	orrs	r3, r2
 80039d0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80039d4:	4b0f      	ldr	r3, [pc, #60]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a0e      	ldr	r2, [pc, #56]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039da:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80039de:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80039e0:	f7fd fecc 	bl	800177c <HAL_GetTick>
 80039e4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039e6:	e008      	b.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80039e8:	f7fd fec8 	bl	800177c <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	697b      	ldr	r3, [r7, #20]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	2b64      	cmp	r3, #100	; 0x64
 80039f4:	d901      	bls.n	80039fa <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80039f6:	2303      	movs	r3, #3
 80039f8:	e007      	b.n	8003a0a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80039fa:	4b06      	ldr	r3, [pc, #24]	; (8003a14 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003a02:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003a06:	d1ef      	bne.n	80039e8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3720      	adds	r7, #32
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	bd80      	pop	{r7, pc}
 8003a12:	bf00      	nop
 8003a14:	40023800 	.word	0x40023800

08003a18 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b082      	sub	sp, #8
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d101      	bne.n	8003a2a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e049      	b.n	8003abe <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a30:	b2db      	uxtb	r3, r3
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d106      	bne.n	8003a44 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f7fd fcb6 	bl	80013b0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2202      	movs	r2, #2
 8003a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	3304      	adds	r3, #4
 8003a54:	4619      	mov	r1, r3
 8003a56:	4610      	mov	r0, r2
 8003a58:	f000 f8a6 	bl	8003ba8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	2201      	movs	r2, #1
 8003aa0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	2201      	movs	r2, #1
 8003aa8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	2201      	movs	r2, #1
 8003ab0:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	2201      	movs	r2, #1
 8003ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003abc:	2300      	movs	r3, #0
}
 8003abe:	4618      	mov	r0, r3
 8003ac0:	3708      	adds	r7, #8
 8003ac2:	46bd      	mov	sp, r7
 8003ac4:	bd80      	pop	{r7, pc}
	...

08003ac8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003ac8:	b480      	push	{r7}
 8003aca:	b085      	sub	sp, #20
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ad6:	b2db      	uxtb	r3, r3
 8003ad8:	2b01      	cmp	r3, #1
 8003ada:	d001      	beq.n	8003ae0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003adc:	2301      	movs	r3, #1
 8003ade:	e04c      	b.n	8003b7a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2202      	movs	r2, #2
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	4a26      	ldr	r2, [pc, #152]	; (8003b88 <HAL_TIM_Base_Start+0xc0>)
 8003aee:	4293      	cmp	r3, r2
 8003af0:	d022      	beq.n	8003b38 <HAL_TIM_Base_Start+0x70>
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003afa:	d01d      	beq.n	8003b38 <HAL_TIM_Base_Start+0x70>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	4a22      	ldr	r2, [pc, #136]	; (8003b8c <HAL_TIM_Base_Start+0xc4>)
 8003b02:	4293      	cmp	r3, r2
 8003b04:	d018      	beq.n	8003b38 <HAL_TIM_Base_Start+0x70>
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	4a21      	ldr	r2, [pc, #132]	; (8003b90 <HAL_TIM_Base_Start+0xc8>)
 8003b0c:	4293      	cmp	r3, r2
 8003b0e:	d013      	beq.n	8003b38 <HAL_TIM_Base_Start+0x70>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	4a1f      	ldr	r2, [pc, #124]	; (8003b94 <HAL_TIM_Base_Start+0xcc>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00e      	beq.n	8003b38 <HAL_TIM_Base_Start+0x70>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a1e      	ldr	r2, [pc, #120]	; (8003b98 <HAL_TIM_Base_Start+0xd0>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_TIM_Base_Start+0x70>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a1c      	ldr	r2, [pc, #112]	; (8003b9c <HAL_TIM_Base_Start+0xd4>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_TIM_Base_Start+0x70>
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a1b      	ldr	r2, [pc, #108]	; (8003ba0 <HAL_TIM_Base_Start+0xd8>)
 8003b34:	4293      	cmp	r3, r2
 8003b36:	d115      	bne.n	8003b64 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	689a      	ldr	r2, [r3, #8]
 8003b3e:	4b19      	ldr	r3, [pc, #100]	; (8003ba4 <HAL_TIM_Base_Start+0xdc>)
 8003b40:	4013      	ands	r3, r2
 8003b42:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2b06      	cmp	r3, #6
 8003b48:	d015      	beq.n	8003b76 <HAL_TIM_Base_Start+0xae>
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b50:	d011      	beq.n	8003b76 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	681a      	ldr	r2, [r3, #0]
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	f042 0201 	orr.w	r2, r2, #1
 8003b60:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b62:	e008      	b.n	8003b76 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	681a      	ldr	r2, [r3, #0]
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f042 0201 	orr.w	r2, r2, #1
 8003b72:	601a      	str	r2, [r3, #0]
 8003b74:	e000      	b.n	8003b78 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003b76:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003b78:	2300      	movs	r3, #0
}
 8003b7a:	4618      	mov	r0, r3
 8003b7c:	3714      	adds	r7, #20
 8003b7e:	46bd      	mov	sp, r7
 8003b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b84:	4770      	bx	lr
 8003b86:	bf00      	nop
 8003b88:	40010000 	.word	0x40010000
 8003b8c:	40000400 	.word	0x40000400
 8003b90:	40000800 	.word	0x40000800
 8003b94:	40000c00 	.word	0x40000c00
 8003b98:	40010400 	.word	0x40010400
 8003b9c:	40014000 	.word	0x40014000
 8003ba0:	40001800 	.word	0x40001800
 8003ba4:	00010007 	.word	0x00010007

08003ba8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	4a40      	ldr	r2, [pc, #256]	; (8003cbc <TIM_Base_SetConfig+0x114>)
 8003bbc:	4293      	cmp	r3, r2
 8003bbe:	d013      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003bc6:	d00f      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	4a3d      	ldr	r2, [pc, #244]	; (8003cc0 <TIM_Base_SetConfig+0x118>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d00b      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	4a3c      	ldr	r2, [pc, #240]	; (8003cc4 <TIM_Base_SetConfig+0x11c>)
 8003bd4:	4293      	cmp	r3, r2
 8003bd6:	d007      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	4a3b      	ldr	r2, [pc, #236]	; (8003cc8 <TIM_Base_SetConfig+0x120>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d003      	beq.n	8003be8 <TIM_Base_SetConfig+0x40>
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	4a3a      	ldr	r2, [pc, #232]	; (8003ccc <TIM_Base_SetConfig+0x124>)
 8003be4:	4293      	cmp	r3, r2
 8003be6:	d108      	bne.n	8003bfa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003bee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003bf0:	683b      	ldr	r3, [r7, #0]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	68fa      	ldr	r2, [r7, #12]
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	4a2f      	ldr	r2, [pc, #188]	; (8003cbc <TIM_Base_SetConfig+0x114>)
 8003bfe:	4293      	cmp	r3, r2
 8003c00:	d02b      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c08:	d027      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	4a2c      	ldr	r2, [pc, #176]	; (8003cc0 <TIM_Base_SetConfig+0x118>)
 8003c0e:	4293      	cmp	r3, r2
 8003c10:	d023      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	4a2b      	ldr	r2, [pc, #172]	; (8003cc4 <TIM_Base_SetConfig+0x11c>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d01f      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	4a2a      	ldr	r2, [pc, #168]	; (8003cc8 <TIM_Base_SetConfig+0x120>)
 8003c1e:	4293      	cmp	r3, r2
 8003c20:	d01b      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	4a29      	ldr	r2, [pc, #164]	; (8003ccc <TIM_Base_SetConfig+0x124>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d017      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	4a28      	ldr	r2, [pc, #160]	; (8003cd0 <TIM_Base_SetConfig+0x128>)
 8003c2e:	4293      	cmp	r3, r2
 8003c30:	d013      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	4a27      	ldr	r2, [pc, #156]	; (8003cd4 <TIM_Base_SetConfig+0x12c>)
 8003c36:	4293      	cmp	r3, r2
 8003c38:	d00f      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	4a26      	ldr	r2, [pc, #152]	; (8003cd8 <TIM_Base_SetConfig+0x130>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d00b      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	4a25      	ldr	r2, [pc, #148]	; (8003cdc <TIM_Base_SetConfig+0x134>)
 8003c46:	4293      	cmp	r3, r2
 8003c48:	d007      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	4a24      	ldr	r2, [pc, #144]	; (8003ce0 <TIM_Base_SetConfig+0x138>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d003      	beq.n	8003c5a <TIM_Base_SetConfig+0xb2>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	4a23      	ldr	r2, [pc, #140]	; (8003ce4 <TIM_Base_SetConfig+0x13c>)
 8003c56:	4293      	cmp	r3, r2
 8003c58:	d108      	bne.n	8003c6c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003c60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003c62:	683b      	ldr	r3, [r7, #0]
 8003c64:	68db      	ldr	r3, [r3, #12]
 8003c66:	68fa      	ldr	r2, [r7, #12]
 8003c68:	4313      	orrs	r3, r2
 8003c6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	695b      	ldr	r3, [r3, #20]
 8003c76:	4313      	orrs	r3, r2
 8003c78:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	68fa      	ldr	r2, [r7, #12]
 8003c7e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003c80:	683b      	ldr	r3, [r7, #0]
 8003c82:	689a      	ldr	r2, [r3, #8]
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003c88:	683b      	ldr	r3, [r7, #0]
 8003c8a:	681a      	ldr	r2, [r3, #0]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	4a0a      	ldr	r2, [pc, #40]	; (8003cbc <TIM_Base_SetConfig+0x114>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d003      	beq.n	8003ca0 <TIM_Base_SetConfig+0xf8>
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	4a0c      	ldr	r2, [pc, #48]	; (8003ccc <TIM_Base_SetConfig+0x124>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	d103      	bne.n	8003ca8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003ca0:	683b      	ldr	r3, [r7, #0]
 8003ca2:	691a      	ldr	r2, [r3, #16]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	2201      	movs	r2, #1
 8003cac:	615a      	str	r2, [r3, #20]
}
 8003cae:	bf00      	nop
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb8:	4770      	bx	lr
 8003cba:	bf00      	nop
 8003cbc:	40010000 	.word	0x40010000
 8003cc0:	40000400 	.word	0x40000400
 8003cc4:	40000800 	.word	0x40000800
 8003cc8:	40000c00 	.word	0x40000c00
 8003ccc:	40010400 	.word	0x40010400
 8003cd0:	40014000 	.word	0x40014000
 8003cd4:	40014400 	.word	0x40014400
 8003cd8:	40014800 	.word	0x40014800
 8003cdc:	40001800 	.word	0x40001800
 8003ce0:	40001c00 	.word	0x40001c00
 8003ce4:	40002000 	.word	0x40002000

08003ce8 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ce8:	b580      	push	{r7, lr}
 8003cea:	b082      	sub	sp, #8
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d101      	bne.n	8003cfa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003cf6:	2301      	movs	r3, #1
 8003cf8:	e040      	b.n	8003d7c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	d106      	bne.n	8003d10 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2200      	movs	r2, #0
 8003d06:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003d0a:	6878      	ldr	r0, [r7, #4]
 8003d0c:	f7fd fb70 	bl	80013f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2224      	movs	r2, #36	; 0x24
 8003d14:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	681a      	ldr	r2, [r3, #0]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f022 0201 	bic.w	r2, r2, #1
 8003d24:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f974 	bl	8004014 <UART_SetConfig>
 8003d2c:	4603      	mov	r3, r0
 8003d2e:	2b01      	cmp	r3, #1
 8003d30:	d101      	bne.n	8003d36 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003d32:	2301      	movs	r3, #1
 8003d34:	e022      	b.n	8003d7c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d002      	beq.n	8003d44 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003d3e:	6878      	ldr	r0, [r7, #4]
 8003d40:	f000 fbcc 	bl	80044dc <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685a      	ldr	r2, [r3, #4]
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d52:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	689a      	ldr	r2, [r3, #8]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d62:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f042 0201 	orr.w	r2, r2, #1
 8003d72:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f000 fc53 	bl	8004620 <UART_CheckIdleState>
 8003d7a:	4603      	mov	r3, r0
}
 8003d7c:	4618      	mov	r0, r3
 8003d7e:	3708      	adds	r7, #8
 8003d80:	46bd      	mov	sp, r7
 8003d82:	bd80      	pop	{r7, pc}

08003d84 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08a      	sub	sp, #40	; 0x28
 8003d88:	af02      	add	r7, sp, #8
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	603b      	str	r3, [r7, #0]
 8003d90:	4613      	mov	r3, r2
 8003d92:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003d98:	2b20      	cmp	r3, #32
 8003d9a:	d171      	bne.n	8003e80 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8003d9c:	68bb      	ldr	r3, [r7, #8]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d002      	beq.n	8003da8 <HAL_UART_Transmit+0x24>
 8003da2:	88fb      	ldrh	r3, [r7, #6]
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d101      	bne.n	8003dac <HAL_UART_Transmit+0x28>
    {
      return  HAL_ERROR;
 8003da8:	2301      	movs	r3, #1
 8003daa:	e06a      	b.n	8003e82 <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	2200      	movs	r2, #0
 8003db0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003db4:	68fb      	ldr	r3, [r7, #12]
 8003db6:	2221      	movs	r2, #33	; 0x21
 8003db8:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003dba:	f7fd fcdf 	bl	800177c <HAL_GetTick>
 8003dbe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	88fa      	ldrh	r2, [r7, #6]
 8003dc4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	88fa      	ldrh	r2, [r7, #6]
 8003dcc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	689b      	ldr	r3, [r3, #8]
 8003dd4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003dd8:	d108      	bne.n	8003dec <HAL_UART_Transmit+0x68>
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d104      	bne.n	8003dec <HAL_UART_Transmit+0x68>
    {
      pdata8bits  = NULL;
 8003de2:	2300      	movs	r3, #0
 8003de4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8003de6:	68bb      	ldr	r3, [r7, #8]
 8003de8:	61bb      	str	r3, [r7, #24]
 8003dea:	e003      	b.n	8003df4 <HAL_UART_Transmit+0x70>
    }
    else
    {
      pdata8bits  = pData;
 8003dec:	68bb      	ldr	r3, [r7, #8]
 8003dee:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003df0:	2300      	movs	r3, #0
 8003df2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8003df4:	e02c      	b.n	8003e50 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	9300      	str	r3, [sp, #0]
 8003dfa:	697b      	ldr	r3, [r7, #20]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	2180      	movs	r1, #128	; 0x80
 8003e00:	68f8      	ldr	r0, [r7, #12]
 8003e02:	f000 fc44 	bl	800468e <UART_WaitOnFlagUntilTimeout>
 8003e06:	4603      	mov	r3, r0
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d001      	beq.n	8003e10 <HAL_UART_Transmit+0x8c>
      {
        return HAL_TIMEOUT;
 8003e0c:	2303      	movs	r3, #3
 8003e0e:	e038      	b.n	8003e82 <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8003e10:	69fb      	ldr	r3, [r7, #28]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d10b      	bne.n	8003e2e <HAL_UART_Transmit+0xaa>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003e16:	69bb      	ldr	r3, [r7, #24]
 8003e18:	881b      	ldrh	r3, [r3, #0]
 8003e1a:	461a      	mov	r2, r3
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003e24:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8003e26:	69bb      	ldr	r3, [r7, #24]
 8003e28:	3302      	adds	r3, #2
 8003e2a:	61bb      	str	r3, [r7, #24]
 8003e2c:	e007      	b.n	8003e3e <HAL_UART_Transmit+0xba>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8003e2e:	69fb      	ldr	r3, [r7, #28]
 8003e30:	781a      	ldrb	r2, [r3, #0]
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8003e38:	69fb      	ldr	r3, [r7, #28]
 8003e3a:	3301      	adds	r3, #1
 8003e3c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    while (huart->TxXferCount > 0U)
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 8003e56:	b29b      	uxth	r3, r3
 8003e58:	2b00      	cmp	r3, #0
 8003e5a:	d1cc      	bne.n	8003df6 <HAL_UART_Transmit+0x72>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	9300      	str	r3, [sp, #0]
 8003e60:	697b      	ldr	r3, [r7, #20]
 8003e62:	2200      	movs	r2, #0
 8003e64:	2140      	movs	r1, #64	; 0x40
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 fc11 	bl	800468e <UART_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d001      	beq.n	8003e76 <HAL_UART_Transmit+0xf2>
    {
      return HAL_TIMEOUT;
 8003e72:	2303      	movs	r3, #3
 8003e74:	e005      	b.n	8003e82 <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	e000      	b.n	8003e82 <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8003e80:	2302      	movs	r3, #2
  }
}
 8003e82:	4618      	mov	r0, r3
 8003e84:	3720      	adds	r7, #32
 8003e86:	46bd      	mov	sp, r7
 8003e88:	bd80      	pop	{r7, pc}

08003e8a <HAL_UART_Receive>:
  * @param Size    Amount of data elements (u8 or u16) to be received.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e8a:	b580      	push	{r7, lr}
 8003e8c:	b08a      	sub	sp, #40	; 0x28
 8003e8e:	af02      	add	r7, sp, #8
 8003e90:	60f8      	str	r0, [r7, #12]
 8003e92:	60b9      	str	r1, [r7, #8]
 8003e94:	603b      	str	r3, [r7, #0]
 8003e96:	4613      	mov	r3, r2
 8003e98:	80fb      	strh	r3, [r7, #6]
  uint16_t *pdata16bits;
  uint16_t uhMask;
  uint32_t tickstart;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003ea0:	2b20      	cmp	r3, #32
 8003ea2:	f040 80b1 	bne.w	8004008 <HAL_UART_Receive+0x17e>
  {
    if ((pData == NULL) || (Size == 0U))
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d002      	beq.n	8003eb2 <HAL_UART_Receive+0x28>
 8003eac:	88fb      	ldrh	r3, [r7, #6]
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d101      	bne.n	8003eb6 <HAL_UART_Receive+0x2c>
    {
      return  HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e0a9      	b.n	800400a <HAL_UART_Receive+0x180>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	2200      	movs	r2, #0
 8003eba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	2222      	movs	r2, #34	; 0x22
 8003ec2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2200      	movs	r2, #0
 8003eca:	661a      	str	r2, [r3, #96]	; 0x60

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ecc:	f7fd fc56 	bl	800177c <HAL_GetTick>
 8003ed0:	6178      	str	r0, [r7, #20]

    huart->RxXferSize  = Size;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	88fa      	ldrh	r2, [r7, #6]
 8003ed6:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
    huart->RxXferCount = Size;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	88fa      	ldrh	r2, [r7, #6]
 8003ede:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Computation of UART mask to apply to RDR register */
    UART_MASK_COMPUTATION(huart);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003eea:	d10e      	bne.n	8003f0a <HAL_UART_Receive+0x80>
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	691b      	ldr	r3, [r3, #16]
 8003ef0:	2b00      	cmp	r3, #0
 8003ef2:	d105      	bne.n	8003f00 <HAL_UART_Receive+0x76>
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003efa:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003efe:	e02d      	b.n	8003f5c <HAL_UART_Receive+0xd2>
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	22ff      	movs	r2, #255	; 0xff
 8003f04:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f08:	e028      	b.n	8003f5c <HAL_UART_Receive+0xd2>
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	689b      	ldr	r3, [r3, #8]
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d10d      	bne.n	8003f2e <HAL_UART_Receive+0xa4>
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	691b      	ldr	r3, [r3, #16]
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d104      	bne.n	8003f24 <HAL_UART_Receive+0x9a>
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	22ff      	movs	r2, #255	; 0xff
 8003f1e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f22:	e01b      	b.n	8003f5c <HAL_UART_Receive+0xd2>
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	227f      	movs	r2, #127	; 0x7f
 8003f28:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f2c:	e016      	b.n	8003f5c <HAL_UART_Receive+0xd2>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	689b      	ldr	r3, [r3, #8]
 8003f32:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8003f36:	d10d      	bne.n	8003f54 <HAL_UART_Receive+0xca>
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	691b      	ldr	r3, [r3, #16]
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d104      	bne.n	8003f4a <HAL_UART_Receive+0xc0>
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	227f      	movs	r2, #127	; 0x7f
 8003f44:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f48:	e008      	b.n	8003f5c <HAL_UART_Receive+0xd2>
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	223f      	movs	r2, #63	; 0x3f
 8003f4e:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003f52:	e003      	b.n	8003f5c <HAL_UART_Receive+0xd2>
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	2200      	movs	r2, #0
 8003f58:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
    uhMask = huart->Mask;
 8003f5c:	68fb      	ldr	r3, [r7, #12]
 8003f5e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8003f62:	827b      	strh	r3, [r7, #18]

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003f64:	68fb      	ldr	r3, [r7, #12]
 8003f66:	689b      	ldr	r3, [r3, #8]
 8003f68:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f6c:	d108      	bne.n	8003f80 <HAL_UART_Receive+0xf6>
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	691b      	ldr	r3, [r3, #16]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d104      	bne.n	8003f80 <HAL_UART_Receive+0xf6>
    {
      pdata8bits  = NULL;
 8003f76:	2300      	movs	r3, #0
 8003f78:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	61bb      	str	r3, [r7, #24]
 8003f7e:	e003      	b.n	8003f88 <HAL_UART_Receive+0xfe>
    }
    else
    {
      pdata8bits  = pData;
 8003f80:	68bb      	ldr	r3, [r7, #8]
 8003f82:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003f84:	2300      	movs	r3, #0
 8003f86:	61bb      	str	r3, [r7, #24]
    }

    /* as long as data have to be received */
    while (huart->RxXferCount > 0U)
 8003f88:	e032      	b.n	8003ff0 <HAL_UART_Receive+0x166>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8003f8a:	683b      	ldr	r3, [r7, #0]
 8003f8c:	9300      	str	r3, [sp, #0]
 8003f8e:	697b      	ldr	r3, [r7, #20]
 8003f90:	2200      	movs	r2, #0
 8003f92:	2120      	movs	r1, #32
 8003f94:	68f8      	ldr	r0, [r7, #12]
 8003f96:	f000 fb7a 	bl	800468e <UART_WaitOnFlagUntilTimeout>
 8003f9a:	4603      	mov	r3, r0
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d001      	beq.n	8003fa4 <HAL_UART_Receive+0x11a>
      {
        return HAL_TIMEOUT;
 8003fa0:	2303      	movs	r3, #3
 8003fa2:	e032      	b.n	800400a <HAL_UART_Receive+0x180>
      }
      if (pdata8bits == NULL)
 8003fa4:	69fb      	ldr	r3, [r7, #28]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d10c      	bne.n	8003fc4 <HAL_UART_Receive+0x13a>
      {
        *pdata16bits = (uint16_t)(huart->Instance->RDR & uhMask);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb0:	b29a      	uxth	r2, r3
 8003fb2:	8a7b      	ldrh	r3, [r7, #18]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	b29a      	uxth	r2, r3
 8003fb8:	69bb      	ldr	r3, [r7, #24]
 8003fba:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8003fbc:	69bb      	ldr	r3, [r7, #24]
 8003fbe:	3302      	adds	r3, #2
 8003fc0:	61bb      	str	r3, [r7, #24]
 8003fc2:	e00c      	b.n	8003fde <HAL_UART_Receive+0x154>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->RDR & (uint8_t)uhMask);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fca:	b2da      	uxtb	r2, r3
 8003fcc:	8a7b      	ldrh	r3, [r7, #18]
 8003fce:	b2db      	uxtb	r3, r3
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	b2da      	uxtb	r2, r3
 8003fd4:	69fb      	ldr	r3, [r7, #28]
 8003fd6:	701a      	strb	r2, [r3, #0]
        pdata8bits++;
 8003fd8:	69fb      	ldr	r3, [r7, #28]
 8003fda:	3301      	adds	r3, #1
 8003fdc:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    while (huart->RxXferCount > 0U)
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003ff6:	b29b      	uxth	r3, r3
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d1c6      	bne.n	8003f8a <HAL_UART_Receive+0x100>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	2220      	movs	r2, #32
 8004000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    return HAL_OK;
 8004004:	2300      	movs	r3, #0
 8004006:	e000      	b.n	800400a <HAL_UART_Receive+0x180>
  }
  else
  {
    return HAL_BUSY;
 8004008:	2302      	movs	r3, #2
  }
}
 800400a:	4618      	mov	r0, r3
 800400c:	3720      	adds	r7, #32
 800400e:	46bd      	mov	sp, r7
 8004010:	bd80      	pop	{r7, pc}
	...

08004014 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b088      	sub	sp, #32
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800401c:	2300      	movs	r3, #0
 800401e:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	689a      	ldr	r2, [r3, #8]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	691b      	ldr	r3, [r3, #16]
 8004028:	431a      	orrs	r2, r3
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	695b      	ldr	r3, [r3, #20]
 800402e:	431a      	orrs	r2, r3
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	69db      	ldr	r3, [r3, #28]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681a      	ldr	r2, [r3, #0]
 800403e:	4ba6      	ldr	r3, [pc, #664]	; (80042d8 <UART_SetConfig+0x2c4>)
 8004040:	4013      	ands	r3, r2
 8004042:	687a      	ldr	r2, [r7, #4]
 8004044:	6812      	ldr	r2, [r2, #0]
 8004046:	6979      	ldr	r1, [r7, #20]
 8004048:	430b      	orrs	r3, r1
 800404a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	685b      	ldr	r3, [r3, #4]
 8004052:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	68da      	ldr	r2, [r3, #12]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	430a      	orrs	r2, r1
 8004060:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	699b      	ldr	r3, [r3, #24]
 8004066:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	6a1b      	ldr	r3, [r3, #32]
 800406c:	697a      	ldr	r2, [r7, #20]
 800406e:	4313      	orrs	r3, r2
 8004070:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	697a      	ldr	r2, [r7, #20]
 8004082:	430a      	orrs	r2, r1
 8004084:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	4a94      	ldr	r2, [pc, #592]	; (80042dc <UART_SetConfig+0x2c8>)
 800408c:	4293      	cmp	r3, r2
 800408e:	d120      	bne.n	80040d2 <UART_SetConfig+0xbe>
 8004090:	4b93      	ldr	r3, [pc, #588]	; (80042e0 <UART_SetConfig+0x2cc>)
 8004092:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004096:	f003 0303 	and.w	r3, r3, #3
 800409a:	2b03      	cmp	r3, #3
 800409c:	d816      	bhi.n	80040cc <UART_SetConfig+0xb8>
 800409e:	a201      	add	r2, pc, #4	; (adr r2, 80040a4 <UART_SetConfig+0x90>)
 80040a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040a4:	080040b5 	.word	0x080040b5
 80040a8:	080040c1 	.word	0x080040c1
 80040ac:	080040bb 	.word	0x080040bb
 80040b0:	080040c7 	.word	0x080040c7
 80040b4:	2301      	movs	r3, #1
 80040b6:	77fb      	strb	r3, [r7, #31]
 80040b8:	e150      	b.n	800435c <UART_SetConfig+0x348>
 80040ba:	2302      	movs	r3, #2
 80040bc:	77fb      	strb	r3, [r7, #31]
 80040be:	e14d      	b.n	800435c <UART_SetConfig+0x348>
 80040c0:	2304      	movs	r3, #4
 80040c2:	77fb      	strb	r3, [r7, #31]
 80040c4:	e14a      	b.n	800435c <UART_SetConfig+0x348>
 80040c6:	2308      	movs	r3, #8
 80040c8:	77fb      	strb	r3, [r7, #31]
 80040ca:	e147      	b.n	800435c <UART_SetConfig+0x348>
 80040cc:	2310      	movs	r3, #16
 80040ce:	77fb      	strb	r3, [r7, #31]
 80040d0:	e144      	b.n	800435c <UART_SetConfig+0x348>
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	4a83      	ldr	r2, [pc, #524]	; (80042e4 <UART_SetConfig+0x2d0>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d132      	bne.n	8004142 <UART_SetConfig+0x12e>
 80040dc:	4b80      	ldr	r3, [pc, #512]	; (80042e0 <UART_SetConfig+0x2cc>)
 80040de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80040e2:	f003 030c 	and.w	r3, r3, #12
 80040e6:	2b0c      	cmp	r3, #12
 80040e8:	d828      	bhi.n	800413c <UART_SetConfig+0x128>
 80040ea:	a201      	add	r2, pc, #4	; (adr r2, 80040f0 <UART_SetConfig+0xdc>)
 80040ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040f0:	08004125 	.word	0x08004125
 80040f4:	0800413d 	.word	0x0800413d
 80040f8:	0800413d 	.word	0x0800413d
 80040fc:	0800413d 	.word	0x0800413d
 8004100:	08004131 	.word	0x08004131
 8004104:	0800413d 	.word	0x0800413d
 8004108:	0800413d 	.word	0x0800413d
 800410c:	0800413d 	.word	0x0800413d
 8004110:	0800412b 	.word	0x0800412b
 8004114:	0800413d 	.word	0x0800413d
 8004118:	0800413d 	.word	0x0800413d
 800411c:	0800413d 	.word	0x0800413d
 8004120:	08004137 	.word	0x08004137
 8004124:	2300      	movs	r3, #0
 8004126:	77fb      	strb	r3, [r7, #31]
 8004128:	e118      	b.n	800435c <UART_SetConfig+0x348>
 800412a:	2302      	movs	r3, #2
 800412c:	77fb      	strb	r3, [r7, #31]
 800412e:	e115      	b.n	800435c <UART_SetConfig+0x348>
 8004130:	2304      	movs	r3, #4
 8004132:	77fb      	strb	r3, [r7, #31]
 8004134:	e112      	b.n	800435c <UART_SetConfig+0x348>
 8004136:	2308      	movs	r3, #8
 8004138:	77fb      	strb	r3, [r7, #31]
 800413a:	e10f      	b.n	800435c <UART_SetConfig+0x348>
 800413c:	2310      	movs	r3, #16
 800413e:	77fb      	strb	r3, [r7, #31]
 8004140:	e10c      	b.n	800435c <UART_SetConfig+0x348>
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	4a68      	ldr	r2, [pc, #416]	; (80042e8 <UART_SetConfig+0x2d4>)
 8004148:	4293      	cmp	r3, r2
 800414a:	d120      	bne.n	800418e <UART_SetConfig+0x17a>
 800414c:	4b64      	ldr	r3, [pc, #400]	; (80042e0 <UART_SetConfig+0x2cc>)
 800414e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004152:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004156:	2b30      	cmp	r3, #48	; 0x30
 8004158:	d013      	beq.n	8004182 <UART_SetConfig+0x16e>
 800415a:	2b30      	cmp	r3, #48	; 0x30
 800415c:	d814      	bhi.n	8004188 <UART_SetConfig+0x174>
 800415e:	2b20      	cmp	r3, #32
 8004160:	d009      	beq.n	8004176 <UART_SetConfig+0x162>
 8004162:	2b20      	cmp	r3, #32
 8004164:	d810      	bhi.n	8004188 <UART_SetConfig+0x174>
 8004166:	2b00      	cmp	r3, #0
 8004168:	d002      	beq.n	8004170 <UART_SetConfig+0x15c>
 800416a:	2b10      	cmp	r3, #16
 800416c:	d006      	beq.n	800417c <UART_SetConfig+0x168>
 800416e:	e00b      	b.n	8004188 <UART_SetConfig+0x174>
 8004170:	2300      	movs	r3, #0
 8004172:	77fb      	strb	r3, [r7, #31]
 8004174:	e0f2      	b.n	800435c <UART_SetConfig+0x348>
 8004176:	2302      	movs	r3, #2
 8004178:	77fb      	strb	r3, [r7, #31]
 800417a:	e0ef      	b.n	800435c <UART_SetConfig+0x348>
 800417c:	2304      	movs	r3, #4
 800417e:	77fb      	strb	r3, [r7, #31]
 8004180:	e0ec      	b.n	800435c <UART_SetConfig+0x348>
 8004182:	2308      	movs	r3, #8
 8004184:	77fb      	strb	r3, [r7, #31]
 8004186:	e0e9      	b.n	800435c <UART_SetConfig+0x348>
 8004188:	2310      	movs	r3, #16
 800418a:	77fb      	strb	r3, [r7, #31]
 800418c:	e0e6      	b.n	800435c <UART_SetConfig+0x348>
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	4a56      	ldr	r2, [pc, #344]	; (80042ec <UART_SetConfig+0x2d8>)
 8004194:	4293      	cmp	r3, r2
 8004196:	d120      	bne.n	80041da <UART_SetConfig+0x1c6>
 8004198:	4b51      	ldr	r3, [pc, #324]	; (80042e0 <UART_SetConfig+0x2cc>)
 800419a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800419e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80041a2:	2bc0      	cmp	r3, #192	; 0xc0
 80041a4:	d013      	beq.n	80041ce <UART_SetConfig+0x1ba>
 80041a6:	2bc0      	cmp	r3, #192	; 0xc0
 80041a8:	d814      	bhi.n	80041d4 <UART_SetConfig+0x1c0>
 80041aa:	2b80      	cmp	r3, #128	; 0x80
 80041ac:	d009      	beq.n	80041c2 <UART_SetConfig+0x1ae>
 80041ae:	2b80      	cmp	r3, #128	; 0x80
 80041b0:	d810      	bhi.n	80041d4 <UART_SetConfig+0x1c0>
 80041b2:	2b00      	cmp	r3, #0
 80041b4:	d002      	beq.n	80041bc <UART_SetConfig+0x1a8>
 80041b6:	2b40      	cmp	r3, #64	; 0x40
 80041b8:	d006      	beq.n	80041c8 <UART_SetConfig+0x1b4>
 80041ba:	e00b      	b.n	80041d4 <UART_SetConfig+0x1c0>
 80041bc:	2300      	movs	r3, #0
 80041be:	77fb      	strb	r3, [r7, #31]
 80041c0:	e0cc      	b.n	800435c <UART_SetConfig+0x348>
 80041c2:	2302      	movs	r3, #2
 80041c4:	77fb      	strb	r3, [r7, #31]
 80041c6:	e0c9      	b.n	800435c <UART_SetConfig+0x348>
 80041c8:	2304      	movs	r3, #4
 80041ca:	77fb      	strb	r3, [r7, #31]
 80041cc:	e0c6      	b.n	800435c <UART_SetConfig+0x348>
 80041ce:	2308      	movs	r3, #8
 80041d0:	77fb      	strb	r3, [r7, #31]
 80041d2:	e0c3      	b.n	800435c <UART_SetConfig+0x348>
 80041d4:	2310      	movs	r3, #16
 80041d6:	77fb      	strb	r3, [r7, #31]
 80041d8:	e0c0      	b.n	800435c <UART_SetConfig+0x348>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	4a44      	ldr	r2, [pc, #272]	; (80042f0 <UART_SetConfig+0x2dc>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d125      	bne.n	8004230 <UART_SetConfig+0x21c>
 80041e4:	4b3e      	ldr	r3, [pc, #248]	; (80042e0 <UART_SetConfig+0x2cc>)
 80041e6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80041ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80041ee:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f2:	d017      	beq.n	8004224 <UART_SetConfig+0x210>
 80041f4:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80041f8:	d817      	bhi.n	800422a <UART_SetConfig+0x216>
 80041fa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80041fe:	d00b      	beq.n	8004218 <UART_SetConfig+0x204>
 8004200:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004204:	d811      	bhi.n	800422a <UART_SetConfig+0x216>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d003      	beq.n	8004212 <UART_SetConfig+0x1fe>
 800420a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800420e:	d006      	beq.n	800421e <UART_SetConfig+0x20a>
 8004210:	e00b      	b.n	800422a <UART_SetConfig+0x216>
 8004212:	2300      	movs	r3, #0
 8004214:	77fb      	strb	r3, [r7, #31]
 8004216:	e0a1      	b.n	800435c <UART_SetConfig+0x348>
 8004218:	2302      	movs	r3, #2
 800421a:	77fb      	strb	r3, [r7, #31]
 800421c:	e09e      	b.n	800435c <UART_SetConfig+0x348>
 800421e:	2304      	movs	r3, #4
 8004220:	77fb      	strb	r3, [r7, #31]
 8004222:	e09b      	b.n	800435c <UART_SetConfig+0x348>
 8004224:	2308      	movs	r3, #8
 8004226:	77fb      	strb	r3, [r7, #31]
 8004228:	e098      	b.n	800435c <UART_SetConfig+0x348>
 800422a:	2310      	movs	r3, #16
 800422c:	77fb      	strb	r3, [r7, #31]
 800422e:	e095      	b.n	800435c <UART_SetConfig+0x348>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	4a2f      	ldr	r2, [pc, #188]	; (80042f4 <UART_SetConfig+0x2e0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d125      	bne.n	8004286 <UART_SetConfig+0x272>
 800423a:	4b29      	ldr	r3, [pc, #164]	; (80042e0 <UART_SetConfig+0x2cc>)
 800423c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004240:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004244:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004248:	d017      	beq.n	800427a <UART_SetConfig+0x266>
 800424a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800424e:	d817      	bhi.n	8004280 <UART_SetConfig+0x26c>
 8004250:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004254:	d00b      	beq.n	800426e <UART_SetConfig+0x25a>
 8004256:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800425a:	d811      	bhi.n	8004280 <UART_SetConfig+0x26c>
 800425c:	2b00      	cmp	r3, #0
 800425e:	d003      	beq.n	8004268 <UART_SetConfig+0x254>
 8004260:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004264:	d006      	beq.n	8004274 <UART_SetConfig+0x260>
 8004266:	e00b      	b.n	8004280 <UART_SetConfig+0x26c>
 8004268:	2301      	movs	r3, #1
 800426a:	77fb      	strb	r3, [r7, #31]
 800426c:	e076      	b.n	800435c <UART_SetConfig+0x348>
 800426e:	2302      	movs	r3, #2
 8004270:	77fb      	strb	r3, [r7, #31]
 8004272:	e073      	b.n	800435c <UART_SetConfig+0x348>
 8004274:	2304      	movs	r3, #4
 8004276:	77fb      	strb	r3, [r7, #31]
 8004278:	e070      	b.n	800435c <UART_SetConfig+0x348>
 800427a:	2308      	movs	r3, #8
 800427c:	77fb      	strb	r3, [r7, #31]
 800427e:	e06d      	b.n	800435c <UART_SetConfig+0x348>
 8004280:	2310      	movs	r3, #16
 8004282:	77fb      	strb	r3, [r7, #31]
 8004284:	e06a      	b.n	800435c <UART_SetConfig+0x348>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a1b      	ldr	r2, [pc, #108]	; (80042f8 <UART_SetConfig+0x2e4>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d138      	bne.n	8004302 <UART_SetConfig+0x2ee>
 8004290:	4b13      	ldr	r3, [pc, #76]	; (80042e0 <UART_SetConfig+0x2cc>)
 8004292:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004296:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800429a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800429e:	d017      	beq.n	80042d0 <UART_SetConfig+0x2bc>
 80042a0:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80042a4:	d82a      	bhi.n	80042fc <UART_SetConfig+0x2e8>
 80042a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042aa:	d00b      	beq.n	80042c4 <UART_SetConfig+0x2b0>
 80042ac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042b0:	d824      	bhi.n	80042fc <UART_SetConfig+0x2e8>
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d003      	beq.n	80042be <UART_SetConfig+0x2aa>
 80042b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ba:	d006      	beq.n	80042ca <UART_SetConfig+0x2b6>
 80042bc:	e01e      	b.n	80042fc <UART_SetConfig+0x2e8>
 80042be:	2300      	movs	r3, #0
 80042c0:	77fb      	strb	r3, [r7, #31]
 80042c2:	e04b      	b.n	800435c <UART_SetConfig+0x348>
 80042c4:	2302      	movs	r3, #2
 80042c6:	77fb      	strb	r3, [r7, #31]
 80042c8:	e048      	b.n	800435c <UART_SetConfig+0x348>
 80042ca:	2304      	movs	r3, #4
 80042cc:	77fb      	strb	r3, [r7, #31]
 80042ce:	e045      	b.n	800435c <UART_SetConfig+0x348>
 80042d0:	2308      	movs	r3, #8
 80042d2:	77fb      	strb	r3, [r7, #31]
 80042d4:	e042      	b.n	800435c <UART_SetConfig+0x348>
 80042d6:	bf00      	nop
 80042d8:	efff69f3 	.word	0xefff69f3
 80042dc:	40011000 	.word	0x40011000
 80042e0:	40023800 	.word	0x40023800
 80042e4:	40004400 	.word	0x40004400
 80042e8:	40004800 	.word	0x40004800
 80042ec:	40004c00 	.word	0x40004c00
 80042f0:	40005000 	.word	0x40005000
 80042f4:	40011400 	.word	0x40011400
 80042f8:	40007800 	.word	0x40007800
 80042fc:	2310      	movs	r3, #16
 80042fe:	77fb      	strb	r3, [r7, #31]
 8004300:	e02c      	b.n	800435c <UART_SetConfig+0x348>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a72      	ldr	r2, [pc, #456]	; (80044d0 <UART_SetConfig+0x4bc>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d125      	bne.n	8004358 <UART_SetConfig+0x344>
 800430c:	4b71      	ldr	r3, [pc, #452]	; (80044d4 <UART_SetConfig+0x4c0>)
 800430e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004312:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8004316:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800431a:	d017      	beq.n	800434c <UART_SetConfig+0x338>
 800431c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004320:	d817      	bhi.n	8004352 <UART_SetConfig+0x33e>
 8004322:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004326:	d00b      	beq.n	8004340 <UART_SetConfig+0x32c>
 8004328:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800432c:	d811      	bhi.n	8004352 <UART_SetConfig+0x33e>
 800432e:	2b00      	cmp	r3, #0
 8004330:	d003      	beq.n	800433a <UART_SetConfig+0x326>
 8004332:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004336:	d006      	beq.n	8004346 <UART_SetConfig+0x332>
 8004338:	e00b      	b.n	8004352 <UART_SetConfig+0x33e>
 800433a:	2300      	movs	r3, #0
 800433c:	77fb      	strb	r3, [r7, #31]
 800433e:	e00d      	b.n	800435c <UART_SetConfig+0x348>
 8004340:	2302      	movs	r3, #2
 8004342:	77fb      	strb	r3, [r7, #31]
 8004344:	e00a      	b.n	800435c <UART_SetConfig+0x348>
 8004346:	2304      	movs	r3, #4
 8004348:	77fb      	strb	r3, [r7, #31]
 800434a:	e007      	b.n	800435c <UART_SetConfig+0x348>
 800434c:	2308      	movs	r3, #8
 800434e:	77fb      	strb	r3, [r7, #31]
 8004350:	e004      	b.n	800435c <UART_SetConfig+0x348>
 8004352:	2310      	movs	r3, #16
 8004354:	77fb      	strb	r3, [r7, #31]
 8004356:	e001      	b.n	800435c <UART_SetConfig+0x348>
 8004358:	2310      	movs	r3, #16
 800435a:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	69db      	ldr	r3, [r3, #28]
 8004360:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004364:	d15b      	bne.n	800441e <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 8004366:	7ffb      	ldrb	r3, [r7, #31]
 8004368:	2b08      	cmp	r3, #8
 800436a:	d828      	bhi.n	80043be <UART_SetConfig+0x3aa>
 800436c:	a201      	add	r2, pc, #4	; (adr r2, 8004374 <UART_SetConfig+0x360>)
 800436e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004372:	bf00      	nop
 8004374:	08004399 	.word	0x08004399
 8004378:	080043a1 	.word	0x080043a1
 800437c:	080043a9 	.word	0x080043a9
 8004380:	080043bf 	.word	0x080043bf
 8004384:	080043af 	.word	0x080043af
 8004388:	080043bf 	.word	0x080043bf
 800438c:	080043bf 	.word	0x080043bf
 8004390:	080043bf 	.word	0x080043bf
 8004394:	080043b7 	.word	0x080043b7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004398:	f7fe ff26 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 800439c:	61b8      	str	r0, [r7, #24]
        break;
 800439e:	e013      	b.n	80043c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80043a0:	f7fe ff36 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 80043a4:	61b8      	str	r0, [r7, #24]
        break;
 80043a6:	e00f      	b.n	80043c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80043a8:	4b4b      	ldr	r3, [pc, #300]	; (80044d8 <UART_SetConfig+0x4c4>)
 80043aa:	61bb      	str	r3, [r7, #24]
        break;
 80043ac:	e00c      	b.n	80043c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80043ae:	f7fe fe09 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 80043b2:	61b8      	str	r0, [r7, #24]
        break;
 80043b4:	e008      	b.n	80043c8 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80043b6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80043ba:	61bb      	str	r3, [r7, #24]
        break;
 80043bc:	e004      	b.n	80043c8 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 80043be:	2300      	movs	r3, #0
 80043c0:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	77bb      	strb	r3, [r7, #30]
        break;
 80043c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80043c8:	69bb      	ldr	r3, [r7, #24]
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d074      	beq.n	80044b8 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80043ce:	69bb      	ldr	r3, [r7, #24]
 80043d0:	005a      	lsls	r2, r3, #1
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	685b      	ldr	r3, [r3, #4]
 80043d6:	085b      	lsrs	r3, r3, #1
 80043d8:	441a      	add	r2, r3
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	685b      	ldr	r3, [r3, #4]
 80043de:	fbb2 f3f3 	udiv	r3, r2, r3
 80043e2:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80043e4:	693b      	ldr	r3, [r7, #16]
 80043e6:	2b0f      	cmp	r3, #15
 80043e8:	d916      	bls.n	8004418 <UART_SetConfig+0x404>
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80043f0:	d212      	bcs.n	8004418 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80043f2:	693b      	ldr	r3, [r7, #16]
 80043f4:	b29b      	uxth	r3, r3
 80043f6:	f023 030f 	bic.w	r3, r3, #15
 80043fa:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	085b      	lsrs	r3, r3, #1
 8004400:	b29b      	uxth	r3, r3
 8004402:	f003 0307 	and.w	r3, r3, #7
 8004406:	b29a      	uxth	r2, r3
 8004408:	89fb      	ldrh	r3, [r7, #14]
 800440a:	4313      	orrs	r3, r2
 800440c:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	89fa      	ldrh	r2, [r7, #14]
 8004414:	60da      	str	r2, [r3, #12]
 8004416:	e04f      	b.n	80044b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	77bb      	strb	r3, [r7, #30]
 800441c:	e04c      	b.n	80044b8 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800441e:	7ffb      	ldrb	r3, [r7, #31]
 8004420:	2b08      	cmp	r3, #8
 8004422:	d828      	bhi.n	8004476 <UART_SetConfig+0x462>
 8004424:	a201      	add	r2, pc, #4	; (adr r2, 800442c <UART_SetConfig+0x418>)
 8004426:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800442a:	bf00      	nop
 800442c:	08004451 	.word	0x08004451
 8004430:	08004459 	.word	0x08004459
 8004434:	08004461 	.word	0x08004461
 8004438:	08004477 	.word	0x08004477
 800443c:	08004467 	.word	0x08004467
 8004440:	08004477 	.word	0x08004477
 8004444:	08004477 	.word	0x08004477
 8004448:	08004477 	.word	0x08004477
 800444c:	0800446f 	.word	0x0800446f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004450:	f7fe feca 	bl	80031e8 <HAL_RCC_GetPCLK1Freq>
 8004454:	61b8      	str	r0, [r7, #24]
        break;
 8004456:	e013      	b.n	8004480 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004458:	f7fe feda 	bl	8003210 <HAL_RCC_GetPCLK2Freq>
 800445c:	61b8      	str	r0, [r7, #24]
        break;
 800445e:	e00f      	b.n	8004480 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004460:	4b1d      	ldr	r3, [pc, #116]	; (80044d8 <UART_SetConfig+0x4c4>)
 8004462:	61bb      	str	r3, [r7, #24]
        break;
 8004464:	e00c      	b.n	8004480 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004466:	f7fe fdad 	bl	8002fc4 <HAL_RCC_GetSysClockFreq>
 800446a:	61b8      	str	r0, [r7, #24]
        break;
 800446c:	e008      	b.n	8004480 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800446e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004472:	61bb      	str	r3, [r7, #24]
        break;
 8004474:	e004      	b.n	8004480 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 8004476:	2300      	movs	r3, #0
 8004478:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800447a:	2301      	movs	r3, #1
 800447c:	77bb      	strb	r3, [r7, #30]
        break;
 800447e:	bf00      	nop
    }

    if (pclk != 0U)
 8004480:	69bb      	ldr	r3, [r7, #24]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d018      	beq.n	80044b8 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	685b      	ldr	r3, [r3, #4]
 800448a:	085a      	lsrs	r2, r3, #1
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	441a      	add	r2, r3
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	fbb2 f3f3 	udiv	r3, r2, r3
 8004498:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800449a:	693b      	ldr	r3, [r7, #16]
 800449c:	2b0f      	cmp	r3, #15
 800449e:	d909      	bls.n	80044b4 <UART_SetConfig+0x4a0>
 80044a0:	693b      	ldr	r3, [r7, #16]
 80044a2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80044a6:	d205      	bcs.n	80044b4 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	b29a      	uxth	r2, r3
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	60da      	str	r2, [r3, #12]
 80044b2:	e001      	b.n	80044b8 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 80044b4:	2301      	movs	r3, #1
 80044b6:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2200      	movs	r2, #0
 80044c2:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 80044c4:	7fbb      	ldrb	r3, [r7, #30]
}
 80044c6:	4618      	mov	r0, r3
 80044c8:	3720      	adds	r7, #32
 80044ca:	46bd      	mov	sp, r7
 80044cc:	bd80      	pop	{r7, pc}
 80044ce:	bf00      	nop
 80044d0:	40007c00 	.word	0x40007c00
 80044d4:	40023800 	.word	0x40023800
 80044d8:	00f42400 	.word	0x00f42400

080044dc <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80044dc:	b480      	push	{r7}
 80044de:	b083      	sub	sp, #12
 80044e0:	af00      	add	r7, sp, #0
 80044e2:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044e8:	f003 0301 	and.w	r3, r3, #1
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00a      	beq.n	8004506 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	685b      	ldr	r3, [r3, #4]
 80044f6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	430a      	orrs	r2, r1
 8004504:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800450a:	f003 0302 	and.w	r3, r3, #2
 800450e:	2b00      	cmp	r3, #0
 8004510:	d00a      	beq.n	8004528 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	685b      	ldr	r3, [r3, #4]
 8004518:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	430a      	orrs	r2, r1
 8004526:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452c:	f003 0304 	and.w	r3, r3, #4
 8004530:	2b00      	cmp	r3, #0
 8004532:	d00a      	beq.n	800454a <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	685b      	ldr	r3, [r3, #4]
 800453a:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	430a      	orrs	r2, r1
 8004548:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800454e:	f003 0308 	and.w	r3, r3, #8
 8004552:	2b00      	cmp	r3, #0
 8004554:	d00a      	beq.n	800456c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	685b      	ldr	r3, [r3, #4]
 800455c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	430a      	orrs	r2, r1
 800456a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004570:	f003 0310 	and.w	r3, r3, #16
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00a      	beq.n	800458e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	689b      	ldr	r3, [r3, #8]
 800457e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	430a      	orrs	r2, r1
 800458c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004592:	f003 0320 	and.w	r3, r3, #32
 8004596:	2b00      	cmp	r3, #0
 8004598:	d00a      	beq.n	80045b0 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	689b      	ldr	r3, [r3, #8]
 80045a0:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	430a      	orrs	r2, r1
 80045ae:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80045b8:	2b00      	cmp	r3, #0
 80045ba:	d01a      	beq.n	80045f2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	430a      	orrs	r2, r1
 80045d0:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045d6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80045da:	d10a      	bne.n	80045f2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	685b      	ldr	r3, [r3, #4]
 80045e2:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	430a      	orrs	r2, r1
 80045f0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80045fa:	2b00      	cmp	r3, #0
 80045fc:	d00a      	beq.n	8004614 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	681b      	ldr	r3, [r3, #0]
 8004602:	685b      	ldr	r3, [r3, #4]
 8004604:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	430a      	orrs	r2, r1
 8004612:	605a      	str	r2, [r3, #4]
  }
}
 8004614:	bf00      	nop
 8004616:	370c      	adds	r7, #12
 8004618:	46bd      	mov	sp, r7
 800461a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800461e:	4770      	bx	lr

08004620 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	b086      	sub	sp, #24
 8004624:	af02      	add	r7, sp, #8
 8004626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2200      	movs	r2, #0
 800462c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004630:	f7fd f8a4 	bl	800177c <HAL_GetTick>
 8004634:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f003 0308 	and.w	r3, r3, #8
 8004640:	2b08      	cmp	r3, #8
 8004642:	d10e      	bne.n	8004662 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004644:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004648:	9300      	str	r3, [sp, #0]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	2200      	movs	r2, #0
 800464e:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004652:	6878      	ldr	r0, [r7, #4]
 8004654:	f000 f81b 	bl	800468e <UART_WaitOnFlagUntilTimeout>
 8004658:	4603      	mov	r3, r0
 800465a:	2b00      	cmp	r3, #0
 800465c:	d001      	beq.n	8004662 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800465e:	2303      	movs	r3, #3
 8004660:	e011      	b.n	8004686 <UART_CheckIdleState+0x66>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	2220      	movs	r2, #32
 8004666:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2220      	movs	r2, #32
 800466c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2200      	movs	r2, #0
 8004674:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2200      	movs	r2, #0
 800467a:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 8004684:	2300      	movs	r3, #0
}
 8004686:	4618      	mov	r0, r3
 8004688:	3710      	adds	r7, #16
 800468a:	46bd      	mov	sp, r7
 800468c:	bd80      	pop	{r7, pc}

0800468e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800468e:	b580      	push	{r7, lr}
 8004690:	b09c      	sub	sp, #112	; 0x70
 8004692:	af00      	add	r7, sp, #0
 8004694:	60f8      	str	r0, [r7, #12]
 8004696:	60b9      	str	r1, [r7, #8]
 8004698:	603b      	str	r3, [r7, #0]
 800469a:	4613      	mov	r3, r2
 800469c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800469e:	e0a7      	b.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x162>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046a2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046a6:	f000 80a3 	beq.w	80047f0 <UART_WaitOnFlagUntilTimeout+0x162>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046aa:	f7fd f867 	bl	800177c <HAL_GetTick>
 80046ae:	4602      	mov	r2, r0
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	1ad3      	subs	r3, r2, r3
 80046b4:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80046b6:	429a      	cmp	r2, r3
 80046b8:	d302      	bcc.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x32>
 80046ba:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d13f      	bne.n	8004740 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046c6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80046c8:	e853 3f00 	ldrex	r3, [r3]
 80046cc:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80046ce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80046d0:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80046d4:	667b      	str	r3, [r7, #100]	; 0x64
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	461a      	mov	r2, r3
 80046dc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80046de:	65fb      	str	r3, [r7, #92]	; 0x5c
 80046e0:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046e2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 80046e4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80046e6:	e841 2300 	strex	r3, r2, [r1]
 80046ea:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 80046ec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d1e6      	bne.n	80046c0 <UART_WaitOnFlagUntilTimeout+0x32>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	3308      	adds	r3, #8
 80046f8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80046fc:	e853 3f00 	ldrex	r3, [r3]
 8004700:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004702:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004704:	f023 0301 	bic.w	r3, r3, #1
 8004708:	663b      	str	r3, [r7, #96]	; 0x60
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	3308      	adds	r3, #8
 8004710:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004712:	64ba      	str	r2, [r7, #72]	; 0x48
 8004714:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004716:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8004718:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800471a:	e841 2300 	strex	r3, r2, [r1]
 800471e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8004720:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004722:	2b00      	cmp	r3, #0
 8004724:	d1e5      	bne.n	80046f2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	2220      	movs	r2, #32
 800472a:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->RxState = HAL_UART_STATE_READY;
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2220      	movs	r2, #32
 8004730:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

        __HAL_UNLOCK(huart);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	2200      	movs	r2, #0
 8004738:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

        return HAL_TIMEOUT;
 800473c:	2303      	movs	r3, #3
 800473e:	e068      	b.n	8004812 <UART_WaitOnFlagUntilTimeout+0x184>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f003 0304 	and.w	r3, r3, #4
 800474a:	2b00      	cmp	r3, #0
 800474c:	d050      	beq.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x162>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	681b      	ldr	r3, [r3, #0]
 8004752:	69db      	ldr	r3, [r3, #28]
 8004754:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004758:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800475c:	d148      	bne.n	80047f0 <UART_WaitOnFlagUntilTimeout+0x162>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800475e:	68fb      	ldr	r3, [r7, #12]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004766:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800476e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004770:	e853 3f00 	ldrex	r3, [r3]
 8004774:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004776:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004778:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800477c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	681b      	ldr	r3, [r3, #0]
 8004782:	461a      	mov	r2, r3
 8004784:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8004786:	637b      	str	r3, [r7, #52]	; 0x34
 8004788:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800478a:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800478c:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800478e:	e841 2300 	strex	r3, r2, [r1]
 8004792:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8004794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004796:	2b00      	cmp	r3, #0
 8004798:	d1e6      	bne.n	8004768 <UART_WaitOnFlagUntilTimeout+0xda>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	3308      	adds	r3, #8
 80047a0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047a2:	697b      	ldr	r3, [r7, #20]
 80047a4:	e853 3f00 	ldrex	r3, [r3]
 80047a8:	613b      	str	r3, [r7, #16]
   return(result);
 80047aa:	693b      	ldr	r3, [r7, #16]
 80047ac:	f023 0301 	bic.w	r3, r3, #1
 80047b0:	66bb      	str	r3, [r7, #104]	; 0x68
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	3308      	adds	r3, #8
 80047b8:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80047ba:	623a      	str	r2, [r7, #32]
 80047bc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047be:	69f9      	ldr	r1, [r7, #28]
 80047c0:	6a3a      	ldr	r2, [r7, #32]
 80047c2:	e841 2300 	strex	r3, r2, [r1]
 80047c6:	61bb      	str	r3, [r7, #24]
   return(result);
 80047c8:	69bb      	ldr	r3, [r7, #24]
 80047ca:	2b00      	cmp	r3, #0
 80047cc:	d1e5      	bne.n	800479a <UART_WaitOnFlagUntilTimeout+0x10c>

          huart->gState = HAL_UART_STATE_READY;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2220      	movs	r2, #32
 80047d2:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->RxState = HAL_UART_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2220      	movs	r2, #32
 80047e0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	2200      	movs	r2, #0
 80047e8:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 80047ec:	2303      	movs	r3, #3
 80047ee:	e010      	b.n	8004812 <UART_WaitOnFlagUntilTimeout+0x184>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	69da      	ldr	r2, [r3, #28]
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	4013      	ands	r3, r2
 80047fa:	68ba      	ldr	r2, [r7, #8]
 80047fc:	429a      	cmp	r2, r3
 80047fe:	bf0c      	ite	eq
 8004800:	2301      	moveq	r3, #1
 8004802:	2300      	movne	r3, #0
 8004804:	b2db      	uxtb	r3, r3
 8004806:	461a      	mov	r2, r3
 8004808:	79fb      	ldrb	r3, [r7, #7]
 800480a:	429a      	cmp	r2, r3
 800480c:	f43f af48 	beq.w	80046a0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004810:	2300      	movs	r3, #0
}
 8004812:	4618      	mov	r0, r3
 8004814:	3770      	adds	r7, #112	; 0x70
 8004816:	46bd      	mov	sp, r7
 8004818:	bd80      	pop	{r7, pc}
	...

0800481c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800481c:	b084      	sub	sp, #16
 800481e:	b580      	push	{r7, lr}
 8004820:	b084      	sub	sp, #16
 8004822:	af00      	add	r7, sp, #0
 8004824:	6078      	str	r0, [r7, #4]
 8004826:	f107 001c 	add.w	r0, r7, #28
 800482a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800482e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004830:	2b01      	cmp	r3, #1
 8004832:	d120      	bne.n	8004876 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004838:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	68da      	ldr	r2, [r3, #12]
 8004844:	4b20      	ldr	r3, [pc, #128]	; (80048c8 <USB_CoreInit+0xac>)
 8004846:	4013      	ands	r3, r2
 8004848:	687a      	ldr	r2, [r7, #4]
 800484a:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	68db      	ldr	r3, [r3, #12]
 8004850:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004858:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800485a:	2b01      	cmp	r3, #1
 800485c:	d105      	bne.n	800486a <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	68db      	ldr	r3, [r3, #12]
 8004862:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800486a:	6878      	ldr	r0, [r7, #4]
 800486c:	f000 fa96 	bl	8004d9c <USB_CoreReset>
 8004870:	4603      	mov	r3, r0
 8004872:	73fb      	strb	r3, [r7, #15]
 8004874:	e010      	b.n	8004898 <USB_CoreInit+0x7c>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	68db      	ldr	r3, [r3, #12]
 800487a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004882:	6878      	ldr	r0, [r7, #4]
 8004884:	f000 fa8a 	bl	8004d9c <USB_CoreReset>
 8004888:	4603      	mov	r3, r0
 800488a:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004890:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004898:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800489a:	2b01      	cmp	r3, #1
 800489c:	d10b      	bne.n	80048b6 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	689b      	ldr	r3, [r3, #8]
 80048a2:	f043 0206 	orr.w	r2, r3, #6
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	689b      	ldr	r3, [r3, #8]
 80048ae:	f043 0220 	orr.w	r2, r3, #32
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048b6:	7bfb      	ldrb	r3, [r7, #15]
}
 80048b8:	4618      	mov	r0, r3
 80048ba:	3710      	adds	r7, #16
 80048bc:	46bd      	mov	sp, r7
 80048be:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048c2:	b004      	add	sp, #16
 80048c4:	4770      	bx	lr
 80048c6:	bf00      	nop
 80048c8:	ffbdffbf 	.word	0xffbdffbf

080048cc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048cc:	b480      	push	{r7}
 80048ce:	b083      	sub	sp, #12
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f023 0201 	bic.w	r2, r3, #1
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80048e0:	2300      	movs	r3, #0
}
 80048e2:	4618      	mov	r0, r3
 80048e4:	370c      	adds	r7, #12
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr

080048ee <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80048ee:	b580      	push	{r7, lr}
 80048f0:	b084      	sub	sp, #16
 80048f2:	af00      	add	r7, sp, #0
 80048f4:	6078      	str	r0, [r7, #4]
 80048f6:	460b      	mov	r3, r1
 80048f8:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80048fa:	2300      	movs	r3, #0
 80048fc:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800490a:	78fb      	ldrb	r3, [r7, #3]
 800490c:	2b01      	cmp	r3, #1
 800490e:	d115      	bne.n	800493c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	68db      	ldr	r3, [r3, #12]
 8004914:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800491c:	2001      	movs	r0, #1
 800491e:	f7fc ff39 	bl	8001794 <HAL_Delay>
      ms++;
 8004922:	68fb      	ldr	r3, [r7, #12]
 8004924:	3301      	adds	r3, #1
 8004926:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004928:	6878      	ldr	r0, [r7, #4]
 800492a:	f000 fa29 	bl	8004d80 <USB_GetMode>
 800492e:	4603      	mov	r3, r0
 8004930:	2b01      	cmp	r3, #1
 8004932:	d01e      	beq.n	8004972 <USB_SetCurrentMode+0x84>
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2b31      	cmp	r3, #49	; 0x31
 8004938:	d9f0      	bls.n	800491c <USB_SetCurrentMode+0x2e>
 800493a:	e01a      	b.n	8004972 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800493c:	78fb      	ldrb	r3, [r7, #3]
 800493e:	2b00      	cmp	r3, #0
 8004940:	d115      	bne.n	800496e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68db      	ldr	r3, [r3, #12]
 8004946:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800494e:	2001      	movs	r0, #1
 8004950:	f7fc ff20 	bl	8001794 <HAL_Delay>
      ms++;
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	3301      	adds	r3, #1
 8004958:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fa10 	bl	8004d80 <USB_GetMode>
 8004960:	4603      	mov	r3, r0
 8004962:	2b00      	cmp	r3, #0
 8004964:	d005      	beq.n	8004972 <USB_SetCurrentMode+0x84>
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2b31      	cmp	r3, #49	; 0x31
 800496a:	d9f0      	bls.n	800494e <USB_SetCurrentMode+0x60>
 800496c:	e001      	b.n	8004972 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800496e:	2301      	movs	r3, #1
 8004970:	e005      	b.n	800497e <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	2b32      	cmp	r3, #50	; 0x32
 8004976:	d101      	bne.n	800497c <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004978:	2301      	movs	r3, #1
 800497a:	e000      	b.n	800497e <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800497c:	2300      	movs	r3, #0
}
 800497e:	4618      	mov	r0, r3
 8004980:	3710      	adds	r7, #16
 8004982:	46bd      	mov	sp, r7
 8004984:	bd80      	pop	{r7, pc}
	...

08004988 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004988:	b084      	sub	sp, #16
 800498a:	b580      	push	{r7, lr}
 800498c:	b086      	sub	sp, #24
 800498e:	af00      	add	r7, sp, #0
 8004990:	6078      	str	r0, [r7, #4]
 8004992:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004996:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800499a:	2300      	movs	r3, #0
 800499c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049a2:	2300      	movs	r3, #0
 80049a4:	613b      	str	r3, [r7, #16]
 80049a6:	e009      	b.n	80049bc <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049a8:	687a      	ldr	r2, [r7, #4]
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	3340      	adds	r3, #64	; 0x40
 80049ae:	009b      	lsls	r3, r3, #2
 80049b0:	4413      	add	r3, r2
 80049b2:	2200      	movs	r2, #0
 80049b4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049b6:	693b      	ldr	r3, [r7, #16]
 80049b8:	3301      	adds	r3, #1
 80049ba:	613b      	str	r3, [r7, #16]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	2b0e      	cmp	r3, #14
 80049c0:	d9f2      	bls.n	80049a8 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d11c      	bne.n	8004a02 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049ce:	685b      	ldr	r3, [r3, #4]
 80049d0:	68fa      	ldr	r2, [r7, #12]
 80049d2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80049d6:	f043 0302 	orr.w	r3, r3, #2
 80049da:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80049e0:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	681b      	ldr	r3, [r3, #0]
 80049ec:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	601a      	str	r2, [r3, #0]
 8004a00:	e005      	b.n	8004a0e <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a06:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a0e:	68fb      	ldr	r3, [r7, #12]
 8004a10:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a14:	461a      	mov	r2, r3
 8004a16:	2300      	movs	r3, #0
 8004a18:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a20:	4619      	mov	r1, r3
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a28:	461a      	mov	r2, r3
 8004a2a:	680b      	ldr	r3, [r1, #0]
 8004a2c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004a30:	2b01      	cmp	r3, #1
 8004a32:	d10c      	bne.n	8004a4e <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d104      	bne.n	8004a44 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a3a:	2100      	movs	r1, #0
 8004a3c:	6878      	ldr	r0, [r7, #4]
 8004a3e:	f000 f965 	bl	8004d0c <USB_SetDevSpeed>
 8004a42:	e008      	b.n	8004a56 <USB_DevInit+0xce>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a44:	2101      	movs	r1, #1
 8004a46:	6878      	ldr	r0, [r7, #4]
 8004a48:	f000 f960 	bl	8004d0c <USB_SetDevSpeed>
 8004a4c:	e003      	b.n	8004a56 <USB_DevInit+0xce>
  }
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a4e:	2103      	movs	r1, #3
 8004a50:	6878      	ldr	r0, [r7, #4]
 8004a52:	f000 f95b 	bl	8004d0c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a56:	2110      	movs	r1, #16
 8004a58:	6878      	ldr	r0, [r7, #4]
 8004a5a:	f000 f8f3 	bl	8004c44 <USB_FlushTxFifo>
 8004a5e:	4603      	mov	r3, r0
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d001      	beq.n	8004a68 <USB_DevInit+0xe0>
  {
    ret = HAL_ERROR;
 8004a64:	2301      	movs	r3, #1
 8004a66:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f91f 	bl	8004cac <USB_FlushRxFifo>
 8004a6e:	4603      	mov	r3, r0
 8004a70:	2b00      	cmp	r3, #0
 8004a72:	d001      	beq.n	8004a78 <USB_DevInit+0xf0>
  {
    ret = HAL_ERROR;
 8004a74:	2301      	movs	r3, #1
 8004a76:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7e:	461a      	mov	r2, r3
 8004a80:	2300      	movs	r3, #0
 8004a82:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a8a:	461a      	mov	r2, r3
 8004a8c:	2300      	movs	r3, #0
 8004a8e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a96:	461a      	mov	r2, r3
 8004a98:	2300      	movs	r3, #0
 8004a9a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a9c:	2300      	movs	r3, #0
 8004a9e:	613b      	str	r3, [r7, #16]
 8004aa0:	e043      	b.n	8004b2a <USB_DevInit+0x1a2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	015a      	lsls	r2, r3, #5
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	4413      	add	r3, r2
 8004aaa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ab4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ab8:	d118      	bne.n	8004aec <USB_DevInit+0x164>
    {
      if (i == 0U)
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	d10a      	bne.n	8004ad6 <USB_DevInit+0x14e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ac0:	693b      	ldr	r3, [r7, #16]
 8004ac2:	015a      	lsls	r2, r3, #5
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	4413      	add	r3, r2
 8004ac8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004acc:	461a      	mov	r2, r3
 8004ace:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004ad2:	6013      	str	r3, [r2, #0]
 8004ad4:	e013      	b.n	8004afe <USB_DevInit+0x176>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004ad6:	693b      	ldr	r3, [r7, #16]
 8004ad8:	015a      	lsls	r2, r3, #5
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	4413      	add	r3, r2
 8004ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ae2:	461a      	mov	r2, r3
 8004ae4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004ae8:	6013      	str	r3, [r2, #0]
 8004aea:	e008      	b.n	8004afe <USB_DevInit+0x176>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004aec:	693b      	ldr	r3, [r7, #16]
 8004aee:	015a      	lsls	r2, r3, #5
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	4413      	add	r3, r2
 8004af4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004af8:	461a      	mov	r2, r3
 8004afa:	2300      	movs	r3, #0
 8004afc:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004afe:	693b      	ldr	r3, [r7, #16]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0a:	461a      	mov	r2, r3
 8004b0c:	2300      	movs	r3, #0
 8004b0e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b10:	693b      	ldr	r3, [r7, #16]
 8004b12:	015a      	lsls	r2, r3, #5
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	4413      	add	r3, r2
 8004b18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b1c:	461a      	mov	r2, r3
 8004b1e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004b22:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b24:	693b      	ldr	r3, [r7, #16]
 8004b26:	3301      	adds	r3, #1
 8004b28:	613b      	str	r3, [r7, #16]
 8004b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b2c:	693a      	ldr	r2, [r7, #16]
 8004b2e:	429a      	cmp	r2, r3
 8004b30:	d3b7      	bcc.n	8004aa2 <USB_DevInit+0x11a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b32:	2300      	movs	r3, #0
 8004b34:	613b      	str	r3, [r7, #16]
 8004b36:	e043      	b.n	8004bc0 <USB_DevInit+0x238>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b38:	693b      	ldr	r3, [r7, #16]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b4a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b4e:	d118      	bne.n	8004b82 <USB_DevInit+0x1fa>
    {
      if (i == 0U)
 8004b50:	693b      	ldr	r3, [r7, #16]
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d10a      	bne.n	8004b6c <USB_DevInit+0x1e4>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b56:	693b      	ldr	r3, [r7, #16]
 8004b58:	015a      	lsls	r2, r3, #5
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b62:	461a      	mov	r2, r3
 8004b64:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004b68:	6013      	str	r3, [r2, #0]
 8004b6a:	e013      	b.n	8004b94 <USB_DevInit+0x20c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b6c:	693b      	ldr	r3, [r7, #16]
 8004b6e:	015a      	lsls	r2, r3, #5
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	4413      	add	r3, r2
 8004b74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b78:	461a      	mov	r2, r3
 8004b7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004b7e:	6013      	str	r3, [r2, #0]
 8004b80:	e008      	b.n	8004b94 <USB_DevInit+0x20c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004b82:	693b      	ldr	r3, [r7, #16]
 8004b84:	015a      	lsls	r2, r3, #5
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	4413      	add	r3, r2
 8004b8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b8e:	461a      	mov	r2, r3
 8004b90:	2300      	movs	r3, #0
 8004b92:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004b94:	693b      	ldr	r3, [r7, #16]
 8004b96:	015a      	lsls	r2, r3, #5
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	4413      	add	r3, r2
 8004b9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004ba6:	693b      	ldr	r3, [r7, #16]
 8004ba8:	015a      	lsls	r2, r3, #5
 8004baa:	68fb      	ldr	r3, [r7, #12]
 8004bac:	4413      	add	r3, r2
 8004bae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bb2:	461a      	mov	r2, r3
 8004bb4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004bb8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	3301      	adds	r3, #1
 8004bbe:	613b      	str	r3, [r7, #16]
 8004bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bc2:	693a      	ldr	r2, [r7, #16]
 8004bc4:	429a      	cmp	r2, r3
 8004bc6:	d3b7      	bcc.n	8004b38 <USB_DevInit+0x1b0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	68fa      	ldr	r2, [r7, #12]
 8004bd2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004bd6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bda:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004be8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004bea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d105      	bne.n	8004bfc <USB_DevInit+0x274>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	699b      	ldr	r3, [r3, #24]
 8004bf4:	f043 0210 	orr.w	r2, r3, #16
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	699a      	ldr	r2, [r3, #24]
 8004c00:	4b0e      	ldr	r3, [pc, #56]	; (8004c3c <USB_DevInit+0x2b4>)
 8004c02:	4313      	orrs	r3, r2
 8004c04:	687a      	ldr	r2, [r7, #4]
 8004c06:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c08:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c0a:	2b00      	cmp	r3, #0
 8004c0c:	d005      	beq.n	8004c1a <USB_DevInit+0x292>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c0e:	687b      	ldr	r3, [r7, #4]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	f043 0208 	orr.w	r2, r3, #8
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c1a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c1c:	2b01      	cmp	r3, #1
 8004c1e:	d105      	bne.n	8004c2c <USB_DevInit+0x2a4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	699a      	ldr	r2, [r3, #24]
 8004c24:	4b06      	ldr	r3, [pc, #24]	; (8004c40 <USB_DevInit+0x2b8>)
 8004c26:	4313      	orrs	r3, r2
 8004c28:	687a      	ldr	r2, [r7, #4]
 8004c2a:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c2c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c2e:	4618      	mov	r0, r3
 8004c30:	3718      	adds	r7, #24
 8004c32:	46bd      	mov	sp, r7
 8004c34:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c38:	b004      	add	sp, #16
 8004c3a:	4770      	bx	lr
 8004c3c:	803c3800 	.word	0x803c3800
 8004c40:	40000004 	.word	0x40000004

08004c44 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c44:	b480      	push	{r7}
 8004c46:	b085      	sub	sp, #20
 8004c48:	af00      	add	r7, sp, #0
 8004c4a:	6078      	str	r0, [r7, #4]
 8004c4c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c4e:	2300      	movs	r3, #0
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c52:	68fb      	ldr	r3, [r7, #12]
 8004c54:	3301      	adds	r3, #1
 8004c56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a13      	ldr	r2, [pc, #76]	; (8004ca8 <USB_FlushTxFifo+0x64>)
 8004c5c:	4293      	cmp	r3, r2
 8004c5e:	d901      	bls.n	8004c64 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	e01b      	b.n	8004c9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	2b00      	cmp	r3, #0
 8004c6a:	daf2      	bge.n	8004c52 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004c70:	683b      	ldr	r3, [r7, #0]
 8004c72:	019b      	lsls	r3, r3, #6
 8004c74:	f043 0220 	orr.w	r2, r3, #32
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	3301      	adds	r3, #1
 8004c80:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	4a08      	ldr	r2, [pc, #32]	; (8004ca8 <USB_FlushTxFifo+0x64>)
 8004c86:	4293      	cmp	r3, r2
 8004c88:	d901      	bls.n	8004c8e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004c8a:	2303      	movs	r3, #3
 8004c8c:	e006      	b.n	8004c9c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	691b      	ldr	r3, [r3, #16]
 8004c92:	f003 0320 	and.w	r3, r3, #32
 8004c96:	2b20      	cmp	r3, #32
 8004c98:	d0f0      	beq.n	8004c7c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr
 8004ca8:	00030d40 	.word	0x00030d40

08004cac <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b085      	sub	sp, #20
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004cb4:	2300      	movs	r3, #0
 8004cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	3301      	adds	r3, #1
 8004cbc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	4a11      	ldr	r2, [pc, #68]	; (8004d08 <USB_FlushRxFifo+0x5c>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d901      	bls.n	8004cca <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cc6:	2303      	movs	r3, #3
 8004cc8:	e018      	b.n	8004cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cca:	687b      	ldr	r3, [r7, #4]
 8004ccc:	691b      	ldr	r3, [r3, #16]
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	daf2      	bge.n	8004cb8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004cd2:	2300      	movs	r3, #0
 8004cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2210      	movs	r2, #16
 8004cda:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	3301      	adds	r3, #1
 8004ce0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4a08      	ldr	r2, [pc, #32]	; (8004d08 <USB_FlushRxFifo+0x5c>)
 8004ce6:	4293      	cmp	r3, r2
 8004ce8:	d901      	bls.n	8004cee <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004cea:	2303      	movs	r3, #3
 8004cec:	e006      	b.n	8004cfc <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	691b      	ldr	r3, [r3, #16]
 8004cf2:	f003 0310 	and.w	r3, r3, #16
 8004cf6:	2b10      	cmp	r3, #16
 8004cf8:	d0f0      	beq.n	8004cdc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004cfa:	2300      	movs	r3, #0
}
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	3714      	adds	r7, #20
 8004d00:	46bd      	mov	sp, r7
 8004d02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d06:	4770      	bx	lr
 8004d08:	00030d40 	.word	0x00030d40

08004d0c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b085      	sub	sp, #20
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	460b      	mov	r3, r1
 8004d16:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d1c:	68fb      	ldr	r3, [r7, #12]
 8004d1e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d22:	681a      	ldr	r2, [r3, #0]
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	68f9      	ldr	r1, [r7, #12]
 8004d28:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d2c:	4313      	orrs	r3, r2
 8004d2e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3714      	adds	r7, #20
 8004d36:	46bd      	mov	sp, r7
 8004d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d3c:	4770      	bx	lr

08004d3e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d3e:	b480      	push	{r7}
 8004d40:	b085      	sub	sp, #20
 8004d42:	af00      	add	r7, sp, #0
 8004d44:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d58:	f023 0303 	bic.w	r3, r3, #3
 8004d5c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d64:	685b      	ldr	r3, [r3, #4]
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d6c:	f043 0302 	orr.w	r3, r3, #2
 8004d70:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d72:	2300      	movs	r3, #0
}
 8004d74:	4618      	mov	r0, r3
 8004d76:	3714      	adds	r7, #20
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	695b      	ldr	r3, [r3, #20]
 8004d8c:	f003 0301 	and.w	r3, r3, #1
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	370c      	adds	r7, #12
 8004d94:	46bd      	mov	sp, r7
 8004d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9a:	4770      	bx	lr

08004d9c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d9c:	b480      	push	{r7}
 8004d9e:	b085      	sub	sp, #20
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004da4:	2300      	movs	r3, #0
 8004da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	3301      	adds	r3, #1
 8004dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dae:	68fb      	ldr	r3, [r7, #12]
 8004db0:	4a13      	ldr	r2, [pc, #76]	; (8004e00 <USB_CoreReset+0x64>)
 8004db2:	4293      	cmp	r3, r2
 8004db4:	d901      	bls.n	8004dba <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004db6:	2303      	movs	r3, #3
 8004db8:	e01b      	b.n	8004df2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	691b      	ldr	r3, [r3, #16]
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	daf2      	bge.n	8004da8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dc6:	687b      	ldr	r3, [r7, #4]
 8004dc8:	691b      	ldr	r3, [r3, #16]
 8004dca:	f043 0201 	orr.w	r2, r3, #1
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	3301      	adds	r3, #1
 8004dd6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	4a09      	ldr	r2, [pc, #36]	; (8004e00 <USB_CoreReset+0x64>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d901      	bls.n	8004de4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004de0:	2303      	movs	r3, #3
 8004de2:	e006      	b.n	8004df2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	691b      	ldr	r3, [r3, #16]
 8004de8:	f003 0301 	and.w	r3, r3, #1
 8004dec:	2b01      	cmp	r3, #1
 8004dee:	d0f0      	beq.n	8004dd2 <USB_CoreReset+0x36>

  return HAL_OK;
 8004df0:	2300      	movs	r3, #0
}
 8004df2:	4618      	mov	r0, r3
 8004df4:	3714      	adds	r7, #20
 8004df6:	46bd      	mov	sp, r7
 8004df8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dfc:	4770      	bx	lr
 8004dfe:	bf00      	nop
 8004e00:	00030d40 	.word	0x00030d40

08004e04 <combination_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool combination_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8004e04:	b580      	push	{r7, lr}
 8004e06:	b082      	sub	sp, #8
 8004e08:	af00      	add	r7, sp, #0
 8004e0a:	6078      	str	r0, [r7, #4]
 8004e0c:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_combination_activations_map, 1, params)) {
 8004e0e:	683a      	ldr	r2, [r7, #0]
 8004e10:	2101      	movs	r1, #1
 8004e12:	4891      	ldr	r0, [pc, #580]	; (8005058 <combination_configure_activations+0x254>)
 8004e14:	f000 fe00 	bl	8005a18 <ai_platform_get_activations_map>
 8004e18:	4603      	mov	r3, r0
 8004e1a:	2b00      	cmp	r3, #0
 8004e1c:	f000 8152 	beq.w	80050c4 <combination_configure_activations+0x2c0>
    /* Updating activations (byte) offsets */
    
    modelInput_output_array.data = AI_PTR(g_combination_activations_map[0] + 2980);
 8004e20:	4b8d      	ldr	r3, [pc, #564]	; (8005058 <combination_configure_activations+0x254>)
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8004e28:	4a8c      	ldr	r2, [pc, #560]	; (800505c <combination_configure_activations+0x258>)
 8004e2a:	6093      	str	r3, [r2, #8]
    modelInput_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 2980);
 8004e2c:	4b8a      	ldr	r3, [pc, #552]	; (8005058 <combination_configure_activations+0x254>)
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	f603 33a4 	addw	r3, r3, #2980	; 0xba4
 8004e34:	4a89      	ldr	r2, [pc, #548]	; (800505c <combination_configure_activations+0x258>)
 8004e36:	60d3      	str	r3, [r2, #12]
    
    input_4_output_array.data = AI_PTR(g_combination_activations_map[0] + 6400);
 8004e38:	4b87      	ldr	r3, [pc, #540]	; (8005058 <combination_configure_activations+0x254>)
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004e40:	4a87      	ldr	r2, [pc, #540]	; (8005060 <combination_configure_activations+0x25c>)
 8004e42:	6093      	str	r3, [r2, #8]
    input_4_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 6400);
 8004e44:	4b84      	ldr	r3, [pc, #528]	; (8005058 <combination_configure_activations+0x254>)
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004e4c:	4a84      	ldr	r2, [pc, #528]	; (8005060 <combination_configure_activations+0x25c>)
 8004e4e:	60d3      	str	r3, [r2, #12]
    
    onnxConv_75_output_array.data = AI_PTR(g_combination_activations_map[0] + 6400);
 8004e50:	4b81      	ldr	r3, [pc, #516]	; (8005058 <combination_configure_activations+0x254>)
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004e58:	4a82      	ldr	r2, [pc, #520]	; (8005064 <combination_configure_activations+0x260>)
 8004e5a:	6093      	str	r3, [r2, #8]
    onnxConv_75_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 6400);
 8004e5c:	4b7e      	ldr	r3, [pc, #504]	; (8005058 <combination_configure_activations+0x254>)
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004e64:	4a7f      	ldr	r2, [pc, #508]	; (8005064 <combination_configure_activations+0x260>)
 8004e66:	60d3      	str	r3, [r2, #12]
    
    input_12_output_array.data = AI_PTR(g_combination_activations_map[0] + 1536);
 8004e68:	4b7b      	ldr	r3, [pc, #492]	; (8005058 <combination_configure_activations+0x254>)
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004e70:	4a7d      	ldr	r2, [pc, #500]	; (8005068 <combination_configure_activations+0x264>)
 8004e72:	6093      	str	r3, [r2, #8]
    input_12_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 1536);
 8004e74:	4b78      	ldr	r3, [pc, #480]	; (8005058 <combination_configure_activations+0x254>)
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004e7c:	4a7a      	ldr	r2, [pc, #488]	; (8005068 <combination_configure_activations+0x264>)
 8004e7e:	60d3      	str	r3, [r2, #12]
    
    onnxConv_78_output_array.data = AI_PTR(g_combination_activations_map[0] + 1536);
 8004e80:	4b75      	ldr	r3, [pc, #468]	; (8005058 <combination_configure_activations+0x254>)
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004e88:	4a78      	ldr	r2, [pc, #480]	; (800506c <combination_configure_activations+0x268>)
 8004e8a:	6093      	str	r3, [r2, #8]
    onnxConv_78_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 1536);
 8004e8c:	4b72      	ldr	r3, [pc, #456]	; (8005058 <combination_configure_activations+0x254>)
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004e94:	4a75      	ldr	r2, [pc, #468]	; (800506c <combination_configure_activations+0x268>)
 8004e96:	60d3      	str	r3, [r2, #12]
    
    input_20_output_array.data = AI_PTR(g_combination_activations_map[0] + 768);
 8004e98:	4b6f      	ldr	r3, [pc, #444]	; (8005058 <combination_configure_activations+0x254>)
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004ea0:	4a73      	ldr	r2, [pc, #460]	; (8005070 <combination_configure_activations+0x26c>)
 8004ea2:	6093      	str	r3, [r2, #8]
    input_20_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 768);
 8004ea4:	4b6c      	ldr	r3, [pc, #432]	; (8005058 <combination_configure_activations+0x254>)
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004eac:	4a70      	ldr	r2, [pc, #448]	; (8005070 <combination_configure_activations+0x26c>)
 8004eae:	60d3      	str	r3, [r2, #12]
    
    onnxConv_81_output_array.data = AI_PTR(g_combination_activations_map[0] + 768);
 8004eb0:	4b69      	ldr	r3, [pc, #420]	; (8005058 <combination_configure_activations+0x254>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004eb8:	4a6e      	ldr	r2, [pc, #440]	; (8005074 <combination_configure_activations+0x270>)
 8004eba:	6093      	str	r3, [r2, #8]
    onnxConv_81_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 768);
 8004ebc:	4b66      	ldr	r3, [pc, #408]	; (8005058 <combination_configure_activations+0x254>)
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004ec4:	4a6b      	ldr	r2, [pc, #428]	; (8005074 <combination_configure_activations+0x270>)
 8004ec6:	60d3      	str	r3, [r2, #12]
    
    onnxAdd_127_output_array.data = AI_PTR(g_combination_activations_map[0] + 0);
 8004ec8:	4b63      	ldr	r3, [pc, #396]	; (8005058 <combination_configure_activations+0x254>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a6a      	ldr	r2, [pc, #424]	; (8005078 <combination_configure_activations+0x274>)
 8004ece:	6093      	str	r3, [r2, #8]
    onnxAdd_127_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 0);
 8004ed0:	4b61      	ldr	r3, [pc, #388]	; (8005058 <combination_configure_activations+0x254>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	4a68      	ldr	r2, [pc, #416]	; (8005078 <combination_configure_activations+0x274>)
 8004ed6:	60d3      	str	r3, [r2, #12]
    
    onnxRelu_84_output_array.data = AI_PTR(g_combination_activations_map[0] + 0);
 8004ed8:	4b5f      	ldr	r3, [pc, #380]	; (8005058 <combination_configure_activations+0x254>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4a67      	ldr	r2, [pc, #412]	; (800507c <combination_configure_activations+0x278>)
 8004ede:	6093      	str	r3, [r2, #8]
    onnxRelu_84_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 0);
 8004ee0:	4b5d      	ldr	r3, [pc, #372]	; (8005058 <combination_configure_activations+0x254>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	4a65      	ldr	r2, [pc, #404]	; (800507c <combination_configure_activations+0x278>)
 8004ee6:	60d3      	str	r3, [r2, #12]
    
    input_28_output_array.data = AI_PTR(g_combination_activations_map[0] + 6400);
 8004ee8:	4b5b      	ldr	r3, [pc, #364]	; (8005058 <combination_configure_activations+0x254>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004ef0:	4a63      	ldr	r2, [pc, #396]	; (8005080 <combination_configure_activations+0x27c>)
 8004ef2:	6093      	str	r3, [r2, #8]
    input_28_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 6400);
 8004ef4:	4b58      	ldr	r3, [pc, #352]	; (8005058 <combination_configure_activations+0x254>)
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004efc:	4a60      	ldr	r2, [pc, #384]	; (8005080 <combination_configure_activations+0x27c>)
 8004efe:	60d3      	str	r3, [r2, #12]
    
    input_36_output_array.data = AI_PTR(g_combination_activations_map[0] + 1536);
 8004f00:	4b55      	ldr	r3, [pc, #340]	; (8005058 <combination_configure_activations+0x254>)
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004f08:	4a5e      	ldr	r2, [pc, #376]	; (8005084 <combination_configure_activations+0x280>)
 8004f0a:	6093      	str	r3, [r2, #8]
    input_36_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 1536);
 8004f0c:	4b52      	ldr	r3, [pc, #328]	; (8005058 <combination_configure_activations+0x254>)
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004f14:	4a5b      	ldr	r2, [pc, #364]	; (8005084 <combination_configure_activations+0x280>)
 8004f16:	60d3      	str	r3, [r2, #12]
    
    onnxConv_88_output_array.data = AI_PTR(g_combination_activations_map[0] + 1536);
 8004f18:	4b4f      	ldr	r3, [pc, #316]	; (8005058 <combination_configure_activations+0x254>)
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004f20:	4a59      	ldr	r2, [pc, #356]	; (8005088 <combination_configure_activations+0x284>)
 8004f22:	6093      	str	r3, [r2, #8]
    onnxConv_88_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 1536);
 8004f24:	4b4c      	ldr	r3, [pc, #304]	; (8005058 <combination_configure_activations+0x254>)
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004f2c:	4a56      	ldr	r2, [pc, #344]	; (8005088 <combination_configure_activations+0x284>)
 8004f2e:	60d3      	str	r3, [r2, #12]
    
    input_44_output_array.data = AI_PTR(g_combination_activations_map[0] + 768);
 8004f30:	4b49      	ldr	r3, [pc, #292]	; (8005058 <combination_configure_activations+0x254>)
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004f38:	4a54      	ldr	r2, [pc, #336]	; (800508c <combination_configure_activations+0x288>)
 8004f3a:	6093      	str	r3, [r2, #8]
    input_44_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 768);
 8004f3c:	4b46      	ldr	r3, [pc, #280]	; (8005058 <combination_configure_activations+0x254>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004f44:	4a51      	ldr	r2, [pc, #324]	; (800508c <combination_configure_activations+0x288>)
 8004f46:	60d3      	str	r3, [r2, #12]
    
    onnxConv_91_output_array.data = AI_PTR(g_combination_activations_map[0] + 768);
 8004f48:	4b43      	ldr	r3, [pc, #268]	; (8005058 <combination_configure_activations+0x254>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004f50:	4a4f      	ldr	r2, [pc, #316]	; (8005090 <combination_configure_activations+0x28c>)
 8004f52:	6093      	str	r3, [r2, #8]
    onnxConv_91_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 768);
 8004f54:	4b40      	ldr	r3, [pc, #256]	; (8005058 <combination_configure_activations+0x254>)
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004f5c:	4a4c      	ldr	r2, [pc, #304]	; (8005090 <combination_configure_activations+0x28c>)
 8004f5e:	60d3      	str	r3, [r2, #12]
    
    onnxAdd_136_output_array.data = AI_PTR(g_combination_activations_map[0] + 0);
 8004f60:	4b3d      	ldr	r3, [pc, #244]	; (8005058 <combination_configure_activations+0x254>)
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	4a4b      	ldr	r2, [pc, #300]	; (8005094 <combination_configure_activations+0x290>)
 8004f66:	6093      	str	r3, [r2, #8]
    onnxAdd_136_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 0);
 8004f68:	4b3b      	ldr	r3, [pc, #236]	; (8005058 <combination_configure_activations+0x254>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a49      	ldr	r2, [pc, #292]	; (8005094 <combination_configure_activations+0x290>)
 8004f6e:	60d3      	str	r3, [r2, #12]
    
    onnxRelu_94_output_array.data = AI_PTR(g_combination_activations_map[0] + 0);
 8004f70:	4b39      	ldr	r3, [pc, #228]	; (8005058 <combination_configure_activations+0x254>)
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	4a48      	ldr	r2, [pc, #288]	; (8005098 <combination_configure_activations+0x294>)
 8004f76:	6093      	str	r3, [r2, #8]
    onnxRelu_94_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 0);
 8004f78:	4b37      	ldr	r3, [pc, #220]	; (8005058 <combination_configure_activations+0x254>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	4a46      	ldr	r2, [pc, #280]	; (8005098 <combination_configure_activations+0x294>)
 8004f7e:	60d3      	str	r3, [r2, #12]
    
    input_52_output_array.data = AI_PTR(g_combination_activations_map[0] + 6400);
 8004f80:	4b35      	ldr	r3, [pc, #212]	; (8005058 <combination_configure_activations+0x254>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004f88:	4a44      	ldr	r2, [pc, #272]	; (800509c <combination_configure_activations+0x298>)
 8004f8a:	6093      	str	r3, [r2, #8]
    input_52_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 6400);
 8004f8c:	4b32      	ldr	r3, [pc, #200]	; (8005058 <combination_configure_activations+0x254>)
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f503 53c8 	add.w	r3, r3, #6400	; 0x1900
 8004f94:	4a41      	ldr	r2, [pc, #260]	; (800509c <combination_configure_activations+0x298>)
 8004f96:	60d3      	str	r3, [r2, #12]
    
    input_60_output_array.data = AI_PTR(g_combination_activations_map[0] + 1536);
 8004f98:	4b2f      	ldr	r3, [pc, #188]	; (8005058 <combination_configure_activations+0x254>)
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004fa0:	4a3f      	ldr	r2, [pc, #252]	; (80050a0 <combination_configure_activations+0x29c>)
 8004fa2:	6093      	str	r3, [r2, #8]
    input_60_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 1536);
 8004fa4:	4b2c      	ldr	r3, [pc, #176]	; (8005058 <combination_configure_activations+0x254>)
 8004fa6:	681b      	ldr	r3, [r3, #0]
 8004fa8:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004fac:	4a3c      	ldr	r2, [pc, #240]	; (80050a0 <combination_configure_activations+0x29c>)
 8004fae:	60d3      	str	r3, [r2, #12]
    
    onnxConv_98_output_array.data = AI_PTR(g_combination_activations_map[0] + 1536);
 8004fb0:	4b29      	ldr	r3, [pc, #164]	; (8005058 <combination_configure_activations+0x254>)
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004fb8:	4a3a      	ldr	r2, [pc, #232]	; (80050a4 <combination_configure_activations+0x2a0>)
 8004fba:	6093      	str	r3, [r2, #8]
    onnxConv_98_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 1536);
 8004fbc:	4b26      	ldr	r3, [pc, #152]	; (8005058 <combination_configure_activations+0x254>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f503 63c0 	add.w	r3, r3, #1536	; 0x600
 8004fc4:	4a37      	ldr	r2, [pc, #220]	; (80050a4 <combination_configure_activations+0x2a0>)
 8004fc6:	60d3      	str	r3, [r2, #12]
    
    input_68_output_array.data = AI_PTR(g_combination_activations_map[0] + 768);
 8004fc8:	4b23      	ldr	r3, [pc, #140]	; (8005058 <combination_configure_activations+0x254>)
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004fd0:	4a35      	ldr	r2, [pc, #212]	; (80050a8 <combination_configure_activations+0x2a4>)
 8004fd2:	6093      	str	r3, [r2, #8]
    input_68_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 768);
 8004fd4:	4b20      	ldr	r3, [pc, #128]	; (8005058 <combination_configure_activations+0x254>)
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004fdc:	4a32      	ldr	r2, [pc, #200]	; (80050a8 <combination_configure_activations+0x2a4>)
 8004fde:	60d3      	str	r3, [r2, #12]
    
    onnxConv_101_output_array.data = AI_PTR(g_combination_activations_map[0] + 768);
 8004fe0:	4b1d      	ldr	r3, [pc, #116]	; (8005058 <combination_configure_activations+0x254>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004fe8:	4a30      	ldr	r2, [pc, #192]	; (80050ac <combination_configure_activations+0x2a8>)
 8004fea:	6093      	str	r3, [r2, #8]
    onnxConv_101_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 768);
 8004fec:	4b1a      	ldr	r3, [pc, #104]	; (8005058 <combination_configure_activations+0x254>)
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8004ff4:	4a2d      	ldr	r2, [pc, #180]	; (80050ac <combination_configure_activations+0x2a8>)
 8004ff6:	60d3      	str	r3, [r2, #12]
    
    onnxAdd_145_output_array.data = AI_PTR(g_combination_activations_map[0] + 0);
 8004ff8:	4b17      	ldr	r3, [pc, #92]	; (8005058 <combination_configure_activations+0x254>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	4a2c      	ldr	r2, [pc, #176]	; (80050b0 <combination_configure_activations+0x2ac>)
 8004ffe:	6093      	str	r3, [r2, #8]
    onnxAdd_145_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 0);
 8005000:	4b15      	ldr	r3, [pc, #84]	; (8005058 <combination_configure_activations+0x254>)
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	4a2a      	ldr	r2, [pc, #168]	; (80050b0 <combination_configure_activations+0x2ac>)
 8005006:	60d3      	str	r3, [r2, #12]
    
    onnxRelu_104_output_array.data = AI_PTR(g_combination_activations_map[0] + 0);
 8005008:	4b13      	ldr	r3, [pc, #76]	; (8005058 <combination_configure_activations+0x254>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4a29      	ldr	r2, [pc, #164]	; (80050b4 <combination_configure_activations+0x2b0>)
 800500e:	6093      	str	r3, [r2, #8]
    onnxRelu_104_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 0);
 8005010:	4b11      	ldr	r3, [pc, #68]	; (8005058 <combination_configure_activations+0x254>)
 8005012:	681b      	ldr	r3, [r3, #0]
 8005014:	4a27      	ldr	r2, [pc, #156]	; (80050b4 <combination_configure_activations+0x2b0>)
 8005016:	60d3      	str	r3, [r2, #12]
    
    input_76_output_array.data = AI_PTR(g_combination_activations_map[0] + 4864);
 8005018:	4b0f      	ldr	r3, [pc, #60]	; (8005058 <combination_configure_activations+0x254>)
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 8005020:	4a25      	ldr	r2, [pc, #148]	; (80050b8 <combination_configure_activations+0x2b4>)
 8005022:	6093      	str	r3, [r2, #8]
    input_76_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 4864);
 8005024:	4b0c      	ldr	r3, [pc, #48]	; (8005058 <combination_configure_activations+0x254>)
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f503 5398 	add.w	r3, r3, #4864	; 0x1300
 800502c:	4a22      	ldr	r2, [pc, #136]	; (80050b8 <combination_configure_activations+0x2b4>)
 800502e:	60d3      	str	r3, [r2, #12]
    
    input_80_output_array.data = AI_PTR(g_combination_activations_map[0] + 0);
 8005030:	4b09      	ldr	r3, [pc, #36]	; (8005058 <combination_configure_activations+0x254>)
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	4a21      	ldr	r2, [pc, #132]	; (80050bc <combination_configure_activations+0x2b8>)
 8005036:	6093      	str	r3, [r2, #8]
    input_80_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 0);
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <combination_configure_activations+0x254>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	4a1f      	ldr	r2, [pc, #124]	; (80050bc <combination_configure_activations+0x2b8>)
 800503e:	60d3      	str	r3, [r2, #12]
    
    modelOutput_output_array.data = AI_PTR(g_combination_activations_map[0] + 32);
 8005040:	4b05      	ldr	r3, [pc, #20]	; (8005058 <combination_configure_activations+0x254>)
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	3320      	adds	r3, #32
 8005046:	4a1e      	ldr	r2, [pc, #120]	; (80050c0 <combination_configure_activations+0x2bc>)
 8005048:	6093      	str	r3, [r2, #8]
    modelOutput_output_array.data_start = AI_PTR(g_combination_activations_map[0] + 32);
 800504a:	4b03      	ldr	r3, [pc, #12]	; (8005058 <combination_configure_activations+0x254>)
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	3320      	adds	r3, #32
 8005050:	4a1b      	ldr	r2, [pc, #108]	; (80050c0 <combination_configure_activations+0x2bc>)
 8005052:	60d3      	str	r3, [r2, #12]
    
    return true;
 8005054:	2301      	movs	r3, #1
 8005056:	e03b      	b.n	80050d0 <combination_configure_activations+0x2cc>
 8005058:	20019850 	.word	0x20019850
 800505c:	2000015c 	.word	0x2000015c
 8005060:	2000016c 	.word	0x2000016c
 8005064:	2000017c 	.word	0x2000017c
 8005068:	2000018c 	.word	0x2000018c
 800506c:	2000019c 	.word	0x2000019c
 8005070:	200001ac 	.word	0x200001ac
 8005074:	200001bc 	.word	0x200001bc
 8005078:	200001cc 	.word	0x200001cc
 800507c:	200001dc 	.word	0x200001dc
 8005080:	200001ec 	.word	0x200001ec
 8005084:	200001fc 	.word	0x200001fc
 8005088:	2000020c 	.word	0x2000020c
 800508c:	2000021c 	.word	0x2000021c
 8005090:	2000022c 	.word	0x2000022c
 8005094:	2000023c 	.word	0x2000023c
 8005098:	2000024c 	.word	0x2000024c
 800509c:	2000025c 	.word	0x2000025c
 80050a0:	2000026c 	.word	0x2000026c
 80050a4:	2000027c 	.word	0x2000027c
 80050a8:	2000028c 	.word	0x2000028c
 80050ac:	2000029c 	.word	0x2000029c
 80050b0:	200002ac 	.word	0x200002ac
 80050b4:	200002bc 	.word	0x200002bc
 80050b8:	200002cc 	.word	0x200002cc
 80050bc:	200002dc 	.word	0x200002dc
 80050c0:	200002ec 	.word	0x200002ec
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 80050c4:	2213      	movs	r2, #19
 80050c6:	2130      	movs	r1, #48	; 0x30
 80050c8:	6878      	ldr	r0, [r7, #4]
 80050ca:	f000 fe23 	bl	8005d14 <ai_platform_network_set_error>
  return false;
 80050ce:	2300      	movs	r3, #0
}
 80050d0:	4618      	mov	r0, r3
 80050d2:	3708      	adds	r7, #8
 80050d4:	46bd      	mov	sp, r7
 80050d6:	bd80      	pop	{r7, pc}

080050d8 <combination_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool combination_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80050d8:	b580      	push	{r7, lr}
 80050da:	b082      	sub	sp, #8
 80050dc:	af00      	add	r7, sp, #0
 80050de:	6078      	str	r0, [r7, #4]
 80050e0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_combination_weights_map, 22, params)) {
 80050e2:	683a      	ldr	r2, [r7, #0]
 80050e4:	2116      	movs	r1, #22
 80050e6:	488a      	ldr	r0, [pc, #552]	; (8005310 <combination_configure_weights+0x238>)
 80050e8:	f000 fc3e 	bl	8005968 <ai_platform_get_weights_map>
 80050ec:	4603      	mov	r3, r0
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	f000 8162 	beq.w	80053b8 <combination_configure_weights+0x2e0>
    /* Updating weights (byte) offsets */
    
    input_4_bias_array.format |= AI_FMT_FLAG_CONST;
 80050f4:	4b87      	ldr	r3, [pc, #540]	; (8005314 <combination_configure_weights+0x23c>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80050fc:	4a85      	ldr	r2, [pc, #532]	; (8005314 <combination_configure_weights+0x23c>)
 80050fe:	6013      	str	r3, [r2, #0]
    input_4_bias_array.data = AI_PTR(g_combination_weights_map[0] + 0);
 8005100:	4b83      	ldr	r3, [pc, #524]	; (8005310 <combination_configure_weights+0x238>)
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4a83      	ldr	r2, [pc, #524]	; (8005314 <combination_configure_weights+0x23c>)
 8005106:	6093      	str	r3, [r2, #8]
    input_4_bias_array.data_start = AI_PTR(g_combination_weights_map[0] + 0);
 8005108:	4b81      	ldr	r3, [pc, #516]	; (8005310 <combination_configure_weights+0x238>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4a81      	ldr	r2, [pc, #516]	; (8005314 <combination_configure_weights+0x23c>)
 800510e:	60d3      	str	r3, [r2, #12]
    
    input_12_weights_array.format |= AI_FMT_FLAG_CONST;
 8005110:	4b81      	ldr	r3, [pc, #516]	; (8005318 <combination_configure_weights+0x240>)
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005118:	4a7f      	ldr	r2, [pc, #508]	; (8005318 <combination_configure_weights+0x240>)
 800511a:	6013      	str	r3, [r2, #0]
    input_12_weights_array.data = AI_PTR(g_combination_weights_map[1] + 0);
 800511c:	4b7c      	ldr	r3, [pc, #496]	; (8005310 <combination_configure_weights+0x238>)
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	4a7d      	ldr	r2, [pc, #500]	; (8005318 <combination_configure_weights+0x240>)
 8005122:	6093      	str	r3, [r2, #8]
    input_12_weights_array.data_start = AI_PTR(g_combination_weights_map[1] + 0);
 8005124:	4b7a      	ldr	r3, [pc, #488]	; (8005310 <combination_configure_weights+0x238>)
 8005126:	685b      	ldr	r3, [r3, #4]
 8005128:	4a7b      	ldr	r2, [pc, #492]	; (8005318 <combination_configure_weights+0x240>)
 800512a:	60d3      	str	r3, [r2, #12]
    
    input_12_bias_array.format |= AI_FMT_FLAG_CONST;
 800512c:	4b7b      	ldr	r3, [pc, #492]	; (800531c <combination_configure_weights+0x244>)
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005134:	4a79      	ldr	r2, [pc, #484]	; (800531c <combination_configure_weights+0x244>)
 8005136:	6013      	str	r3, [r2, #0]
    input_12_bias_array.data = AI_PTR(g_combination_weights_map[2] + 0);
 8005138:	4b75      	ldr	r3, [pc, #468]	; (8005310 <combination_configure_weights+0x238>)
 800513a:	689b      	ldr	r3, [r3, #8]
 800513c:	4a77      	ldr	r2, [pc, #476]	; (800531c <combination_configure_weights+0x244>)
 800513e:	6093      	str	r3, [r2, #8]
    input_12_bias_array.data_start = AI_PTR(g_combination_weights_map[2] + 0);
 8005140:	4b73      	ldr	r3, [pc, #460]	; (8005310 <combination_configure_weights+0x238>)
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	4a75      	ldr	r2, [pc, #468]	; (800531c <combination_configure_weights+0x244>)
 8005146:	60d3      	str	r3, [r2, #12]
    
    input_20_weights_array.format |= AI_FMT_FLAG_CONST;
 8005148:	4b75      	ldr	r3, [pc, #468]	; (8005320 <combination_configure_weights+0x248>)
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005150:	4a73      	ldr	r2, [pc, #460]	; (8005320 <combination_configure_weights+0x248>)
 8005152:	6013      	str	r3, [r2, #0]
    input_20_weights_array.data = AI_PTR(g_combination_weights_map[3] + 0);
 8005154:	4b6e      	ldr	r3, [pc, #440]	; (8005310 <combination_configure_weights+0x238>)
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	4a71      	ldr	r2, [pc, #452]	; (8005320 <combination_configure_weights+0x248>)
 800515a:	6093      	str	r3, [r2, #8]
    input_20_weights_array.data_start = AI_PTR(g_combination_weights_map[3] + 0);
 800515c:	4b6c      	ldr	r3, [pc, #432]	; (8005310 <combination_configure_weights+0x238>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4a6f      	ldr	r2, [pc, #444]	; (8005320 <combination_configure_weights+0x248>)
 8005162:	60d3      	str	r3, [r2, #12]
    
    input_20_bias_array.format |= AI_FMT_FLAG_CONST;
 8005164:	4b6f      	ldr	r3, [pc, #444]	; (8005324 <combination_configure_weights+0x24c>)
 8005166:	681b      	ldr	r3, [r3, #0]
 8005168:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800516c:	4a6d      	ldr	r2, [pc, #436]	; (8005324 <combination_configure_weights+0x24c>)
 800516e:	6013      	str	r3, [r2, #0]
    input_20_bias_array.data = AI_PTR(g_combination_weights_map[4] + 0);
 8005170:	4b67      	ldr	r3, [pc, #412]	; (8005310 <combination_configure_weights+0x238>)
 8005172:	691b      	ldr	r3, [r3, #16]
 8005174:	4a6b      	ldr	r2, [pc, #428]	; (8005324 <combination_configure_weights+0x24c>)
 8005176:	6093      	str	r3, [r2, #8]
    input_20_bias_array.data_start = AI_PTR(g_combination_weights_map[4] + 0);
 8005178:	4b65      	ldr	r3, [pc, #404]	; (8005310 <combination_configure_weights+0x238>)
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	4a69      	ldr	r2, [pc, #420]	; (8005324 <combination_configure_weights+0x24c>)
 800517e:	60d3      	str	r3, [r2, #12]
    
    onnxAdd_127_weights_array.format |= AI_FMT_FLAG_CONST;
 8005180:	4b69      	ldr	r3, [pc, #420]	; (8005328 <combination_configure_weights+0x250>)
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005188:	4a67      	ldr	r2, [pc, #412]	; (8005328 <combination_configure_weights+0x250>)
 800518a:	6013      	str	r3, [r2, #0]
    onnxAdd_127_weights_array.data = AI_PTR(g_combination_weights_map[5] + 0);
 800518c:	4b60      	ldr	r3, [pc, #384]	; (8005310 <combination_configure_weights+0x238>)
 800518e:	695b      	ldr	r3, [r3, #20]
 8005190:	4a65      	ldr	r2, [pc, #404]	; (8005328 <combination_configure_weights+0x250>)
 8005192:	6093      	str	r3, [r2, #8]
    onnxAdd_127_weights_array.data_start = AI_PTR(g_combination_weights_map[5] + 0);
 8005194:	4b5e      	ldr	r3, [pc, #376]	; (8005310 <combination_configure_weights+0x238>)
 8005196:	695b      	ldr	r3, [r3, #20]
 8005198:	4a63      	ldr	r2, [pc, #396]	; (8005328 <combination_configure_weights+0x250>)
 800519a:	60d3      	str	r3, [r2, #12]
    
    onnxAdd_127_bias_array.format |= AI_FMT_FLAG_CONST;
 800519c:	4b63      	ldr	r3, [pc, #396]	; (800532c <combination_configure_weights+0x254>)
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051a4:	4a61      	ldr	r2, [pc, #388]	; (800532c <combination_configure_weights+0x254>)
 80051a6:	6013      	str	r3, [r2, #0]
    onnxAdd_127_bias_array.data = AI_PTR(g_combination_weights_map[6] + 0);
 80051a8:	4b59      	ldr	r3, [pc, #356]	; (8005310 <combination_configure_weights+0x238>)
 80051aa:	699b      	ldr	r3, [r3, #24]
 80051ac:	4a5f      	ldr	r2, [pc, #380]	; (800532c <combination_configure_weights+0x254>)
 80051ae:	6093      	str	r3, [r2, #8]
    onnxAdd_127_bias_array.data_start = AI_PTR(g_combination_weights_map[6] + 0);
 80051b0:	4b57      	ldr	r3, [pc, #348]	; (8005310 <combination_configure_weights+0x238>)
 80051b2:	699b      	ldr	r3, [r3, #24]
 80051b4:	4a5d      	ldr	r2, [pc, #372]	; (800532c <combination_configure_weights+0x254>)
 80051b6:	60d3      	str	r3, [r2, #12]
    
    input_36_weights_array.format |= AI_FMT_FLAG_CONST;
 80051b8:	4b5d      	ldr	r3, [pc, #372]	; (8005330 <combination_configure_weights+0x258>)
 80051ba:	681b      	ldr	r3, [r3, #0]
 80051bc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051c0:	4a5b      	ldr	r2, [pc, #364]	; (8005330 <combination_configure_weights+0x258>)
 80051c2:	6013      	str	r3, [r2, #0]
    input_36_weights_array.data = AI_PTR(g_combination_weights_map[7] + 0);
 80051c4:	4b52      	ldr	r3, [pc, #328]	; (8005310 <combination_configure_weights+0x238>)
 80051c6:	69db      	ldr	r3, [r3, #28]
 80051c8:	4a59      	ldr	r2, [pc, #356]	; (8005330 <combination_configure_weights+0x258>)
 80051ca:	6093      	str	r3, [r2, #8]
    input_36_weights_array.data_start = AI_PTR(g_combination_weights_map[7] + 0);
 80051cc:	4b50      	ldr	r3, [pc, #320]	; (8005310 <combination_configure_weights+0x238>)
 80051ce:	69db      	ldr	r3, [r3, #28]
 80051d0:	4a57      	ldr	r2, [pc, #348]	; (8005330 <combination_configure_weights+0x258>)
 80051d2:	60d3      	str	r3, [r2, #12]
    
    input_36_bias_array.format |= AI_FMT_FLAG_CONST;
 80051d4:	4b57      	ldr	r3, [pc, #348]	; (8005334 <combination_configure_weights+0x25c>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051dc:	4a55      	ldr	r2, [pc, #340]	; (8005334 <combination_configure_weights+0x25c>)
 80051de:	6013      	str	r3, [r2, #0]
    input_36_bias_array.data = AI_PTR(g_combination_weights_map[8] + 0);
 80051e0:	4b4b      	ldr	r3, [pc, #300]	; (8005310 <combination_configure_weights+0x238>)
 80051e2:	6a1b      	ldr	r3, [r3, #32]
 80051e4:	4a53      	ldr	r2, [pc, #332]	; (8005334 <combination_configure_weights+0x25c>)
 80051e6:	6093      	str	r3, [r2, #8]
    input_36_bias_array.data_start = AI_PTR(g_combination_weights_map[8] + 0);
 80051e8:	4b49      	ldr	r3, [pc, #292]	; (8005310 <combination_configure_weights+0x238>)
 80051ea:	6a1b      	ldr	r3, [r3, #32]
 80051ec:	4a51      	ldr	r2, [pc, #324]	; (8005334 <combination_configure_weights+0x25c>)
 80051ee:	60d3      	str	r3, [r2, #12]
    
    input_44_weights_array.format |= AI_FMT_FLAG_CONST;
 80051f0:	4b51      	ldr	r3, [pc, #324]	; (8005338 <combination_configure_weights+0x260>)
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80051f8:	4a4f      	ldr	r2, [pc, #316]	; (8005338 <combination_configure_weights+0x260>)
 80051fa:	6013      	str	r3, [r2, #0]
    input_44_weights_array.data = AI_PTR(g_combination_weights_map[9] + 0);
 80051fc:	4b44      	ldr	r3, [pc, #272]	; (8005310 <combination_configure_weights+0x238>)
 80051fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005200:	4a4d      	ldr	r2, [pc, #308]	; (8005338 <combination_configure_weights+0x260>)
 8005202:	6093      	str	r3, [r2, #8]
    input_44_weights_array.data_start = AI_PTR(g_combination_weights_map[9] + 0);
 8005204:	4b42      	ldr	r3, [pc, #264]	; (8005310 <combination_configure_weights+0x238>)
 8005206:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005208:	4a4b      	ldr	r2, [pc, #300]	; (8005338 <combination_configure_weights+0x260>)
 800520a:	60d3      	str	r3, [r2, #12]
    
    input_44_bias_array.format |= AI_FMT_FLAG_CONST;
 800520c:	4b4b      	ldr	r3, [pc, #300]	; (800533c <combination_configure_weights+0x264>)
 800520e:	681b      	ldr	r3, [r3, #0]
 8005210:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005214:	4a49      	ldr	r2, [pc, #292]	; (800533c <combination_configure_weights+0x264>)
 8005216:	6013      	str	r3, [r2, #0]
    input_44_bias_array.data = AI_PTR(g_combination_weights_map[10] + 0);
 8005218:	4b3d      	ldr	r3, [pc, #244]	; (8005310 <combination_configure_weights+0x238>)
 800521a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800521c:	4a47      	ldr	r2, [pc, #284]	; (800533c <combination_configure_weights+0x264>)
 800521e:	6093      	str	r3, [r2, #8]
    input_44_bias_array.data_start = AI_PTR(g_combination_weights_map[10] + 0);
 8005220:	4b3b      	ldr	r3, [pc, #236]	; (8005310 <combination_configure_weights+0x238>)
 8005222:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005224:	4a45      	ldr	r2, [pc, #276]	; (800533c <combination_configure_weights+0x264>)
 8005226:	60d3      	str	r3, [r2, #12]
    
    onnxAdd_136_weights_array.format |= AI_FMT_FLAG_CONST;
 8005228:	4b45      	ldr	r3, [pc, #276]	; (8005340 <combination_configure_weights+0x268>)
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005230:	4a43      	ldr	r2, [pc, #268]	; (8005340 <combination_configure_weights+0x268>)
 8005232:	6013      	str	r3, [r2, #0]
    onnxAdd_136_weights_array.data = AI_PTR(g_combination_weights_map[11] + 0);
 8005234:	4b36      	ldr	r3, [pc, #216]	; (8005310 <combination_configure_weights+0x238>)
 8005236:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005238:	4a41      	ldr	r2, [pc, #260]	; (8005340 <combination_configure_weights+0x268>)
 800523a:	6093      	str	r3, [r2, #8]
    onnxAdd_136_weights_array.data_start = AI_PTR(g_combination_weights_map[11] + 0);
 800523c:	4b34      	ldr	r3, [pc, #208]	; (8005310 <combination_configure_weights+0x238>)
 800523e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005240:	4a3f      	ldr	r2, [pc, #252]	; (8005340 <combination_configure_weights+0x268>)
 8005242:	60d3      	str	r3, [r2, #12]
    
    onnxAdd_136_bias_array.format |= AI_FMT_FLAG_CONST;
 8005244:	4b3f      	ldr	r3, [pc, #252]	; (8005344 <combination_configure_weights+0x26c>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800524c:	4a3d      	ldr	r2, [pc, #244]	; (8005344 <combination_configure_weights+0x26c>)
 800524e:	6013      	str	r3, [r2, #0]
    onnxAdd_136_bias_array.data = AI_PTR(g_combination_weights_map[12] + 0);
 8005250:	4b2f      	ldr	r3, [pc, #188]	; (8005310 <combination_configure_weights+0x238>)
 8005252:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005254:	4a3b      	ldr	r2, [pc, #236]	; (8005344 <combination_configure_weights+0x26c>)
 8005256:	6093      	str	r3, [r2, #8]
    onnxAdd_136_bias_array.data_start = AI_PTR(g_combination_weights_map[12] + 0);
 8005258:	4b2d      	ldr	r3, [pc, #180]	; (8005310 <combination_configure_weights+0x238>)
 800525a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800525c:	4a39      	ldr	r2, [pc, #228]	; (8005344 <combination_configure_weights+0x26c>)
 800525e:	60d3      	str	r3, [r2, #12]
    
    input_60_weights_array.format |= AI_FMT_FLAG_CONST;
 8005260:	4b39      	ldr	r3, [pc, #228]	; (8005348 <combination_configure_weights+0x270>)
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005268:	4a37      	ldr	r2, [pc, #220]	; (8005348 <combination_configure_weights+0x270>)
 800526a:	6013      	str	r3, [r2, #0]
    input_60_weights_array.data = AI_PTR(g_combination_weights_map[13] + 0);
 800526c:	4b28      	ldr	r3, [pc, #160]	; (8005310 <combination_configure_weights+0x238>)
 800526e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005270:	4a35      	ldr	r2, [pc, #212]	; (8005348 <combination_configure_weights+0x270>)
 8005272:	6093      	str	r3, [r2, #8]
    input_60_weights_array.data_start = AI_PTR(g_combination_weights_map[13] + 0);
 8005274:	4b26      	ldr	r3, [pc, #152]	; (8005310 <combination_configure_weights+0x238>)
 8005276:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005278:	4a33      	ldr	r2, [pc, #204]	; (8005348 <combination_configure_weights+0x270>)
 800527a:	60d3      	str	r3, [r2, #12]
    
    input_60_bias_array.format |= AI_FMT_FLAG_CONST;
 800527c:	4b33      	ldr	r3, [pc, #204]	; (800534c <combination_configure_weights+0x274>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005284:	4a31      	ldr	r2, [pc, #196]	; (800534c <combination_configure_weights+0x274>)
 8005286:	6013      	str	r3, [r2, #0]
    input_60_bias_array.data = AI_PTR(g_combination_weights_map[14] + 0);
 8005288:	4b21      	ldr	r3, [pc, #132]	; (8005310 <combination_configure_weights+0x238>)
 800528a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800528c:	4a2f      	ldr	r2, [pc, #188]	; (800534c <combination_configure_weights+0x274>)
 800528e:	6093      	str	r3, [r2, #8]
    input_60_bias_array.data_start = AI_PTR(g_combination_weights_map[14] + 0);
 8005290:	4b1f      	ldr	r3, [pc, #124]	; (8005310 <combination_configure_weights+0x238>)
 8005292:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005294:	4a2d      	ldr	r2, [pc, #180]	; (800534c <combination_configure_weights+0x274>)
 8005296:	60d3      	str	r3, [r2, #12]
    
    input_68_weights_array.format |= AI_FMT_FLAG_CONST;
 8005298:	4b2d      	ldr	r3, [pc, #180]	; (8005350 <combination_configure_weights+0x278>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052a0:	4a2b      	ldr	r2, [pc, #172]	; (8005350 <combination_configure_weights+0x278>)
 80052a2:	6013      	str	r3, [r2, #0]
    input_68_weights_array.data = AI_PTR(g_combination_weights_map[15] + 0);
 80052a4:	4b1a      	ldr	r3, [pc, #104]	; (8005310 <combination_configure_weights+0x238>)
 80052a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052a8:	4a29      	ldr	r2, [pc, #164]	; (8005350 <combination_configure_weights+0x278>)
 80052aa:	6093      	str	r3, [r2, #8]
    input_68_weights_array.data_start = AI_PTR(g_combination_weights_map[15] + 0);
 80052ac:	4b18      	ldr	r3, [pc, #96]	; (8005310 <combination_configure_weights+0x238>)
 80052ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80052b0:	4a27      	ldr	r2, [pc, #156]	; (8005350 <combination_configure_weights+0x278>)
 80052b2:	60d3      	str	r3, [r2, #12]
    
    input_68_bias_array.format |= AI_FMT_FLAG_CONST;
 80052b4:	4b27      	ldr	r3, [pc, #156]	; (8005354 <combination_configure_weights+0x27c>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052bc:	4a25      	ldr	r2, [pc, #148]	; (8005354 <combination_configure_weights+0x27c>)
 80052be:	6013      	str	r3, [r2, #0]
    input_68_bias_array.data = AI_PTR(g_combination_weights_map[16] + 0);
 80052c0:	4b13      	ldr	r3, [pc, #76]	; (8005310 <combination_configure_weights+0x238>)
 80052c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c4:	4a23      	ldr	r2, [pc, #140]	; (8005354 <combination_configure_weights+0x27c>)
 80052c6:	6093      	str	r3, [r2, #8]
    input_68_bias_array.data_start = AI_PTR(g_combination_weights_map[16] + 0);
 80052c8:	4b11      	ldr	r3, [pc, #68]	; (8005310 <combination_configure_weights+0x238>)
 80052ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052cc:	4a21      	ldr	r2, [pc, #132]	; (8005354 <combination_configure_weights+0x27c>)
 80052ce:	60d3      	str	r3, [r2, #12]
    
    onnxAdd_145_weights_array.format |= AI_FMT_FLAG_CONST;
 80052d0:	4b21      	ldr	r3, [pc, #132]	; (8005358 <combination_configure_weights+0x280>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052d8:	4a1f      	ldr	r2, [pc, #124]	; (8005358 <combination_configure_weights+0x280>)
 80052da:	6013      	str	r3, [r2, #0]
    onnxAdd_145_weights_array.data = AI_PTR(g_combination_weights_map[17] + 0);
 80052dc:	4b0c      	ldr	r3, [pc, #48]	; (8005310 <combination_configure_weights+0x238>)
 80052de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e0:	4a1d      	ldr	r2, [pc, #116]	; (8005358 <combination_configure_weights+0x280>)
 80052e2:	6093      	str	r3, [r2, #8]
    onnxAdd_145_weights_array.data_start = AI_PTR(g_combination_weights_map[17] + 0);
 80052e4:	4b0a      	ldr	r3, [pc, #40]	; (8005310 <combination_configure_weights+0x238>)
 80052e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80052e8:	4a1b      	ldr	r2, [pc, #108]	; (8005358 <combination_configure_weights+0x280>)
 80052ea:	60d3      	str	r3, [r2, #12]
    
    onnxAdd_145_bias_array.format |= AI_FMT_FLAG_CONST;
 80052ec:	4b1b      	ldr	r3, [pc, #108]	; (800535c <combination_configure_weights+0x284>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80052f4:	4a19      	ldr	r2, [pc, #100]	; (800535c <combination_configure_weights+0x284>)
 80052f6:	6013      	str	r3, [r2, #0]
    onnxAdd_145_bias_array.data = AI_PTR(g_combination_weights_map[18] + 0);
 80052f8:	4b05      	ldr	r3, [pc, #20]	; (8005310 <combination_configure_weights+0x238>)
 80052fa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80052fc:	4a17      	ldr	r2, [pc, #92]	; (800535c <combination_configure_weights+0x284>)
 80052fe:	6093      	str	r3, [r2, #8]
    onnxAdd_145_bias_array.data_start = AI_PTR(g_combination_weights_map[18] + 0);
 8005300:	4b03      	ldr	r3, [pc, #12]	; (8005310 <combination_configure_weights+0x238>)
 8005302:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005304:	4a15      	ldr	r2, [pc, #84]	; (800535c <combination_configure_weights+0x284>)
 8005306:	60d3      	str	r3, [r2, #12]
    
    input_80_weights_array.format |= AI_FMT_FLAG_CONST;
 8005308:	4b15      	ldr	r3, [pc, #84]	; (8005360 <combination_configure_weights+0x288>)
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	e02a      	b.n	8005364 <combination_configure_weights+0x28c>
 800530e:	bf00      	nop
 8005310:	20019854 	.word	0x20019854
 8005314:	2000000c 	.word	0x2000000c
 8005318:	2000001c 	.word	0x2000001c
 800531c:	2000002c 	.word	0x2000002c
 8005320:	2000003c 	.word	0x2000003c
 8005324:	2000004c 	.word	0x2000004c
 8005328:	2000005c 	.word	0x2000005c
 800532c:	2000006c 	.word	0x2000006c
 8005330:	2000007c 	.word	0x2000007c
 8005334:	2000008c 	.word	0x2000008c
 8005338:	2000009c 	.word	0x2000009c
 800533c:	200000ac 	.word	0x200000ac
 8005340:	200000bc 	.word	0x200000bc
 8005344:	200000cc 	.word	0x200000cc
 8005348:	200000dc 	.word	0x200000dc
 800534c:	200000ec 	.word	0x200000ec
 8005350:	200000fc 	.word	0x200000fc
 8005354:	2000010c 	.word	0x2000010c
 8005358:	2000011c 	.word	0x2000011c
 800535c:	2000012c 	.word	0x2000012c
 8005360:	2000013c 	.word	0x2000013c
 8005364:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005368:	4a18      	ldr	r2, [pc, #96]	; (80053cc <combination_configure_weights+0x2f4>)
 800536a:	6013      	str	r3, [r2, #0]
    input_80_weights_array.data = AI_PTR(g_combination_weights_map[19] + 0);
 800536c:	4b18      	ldr	r3, [pc, #96]	; (80053d0 <combination_configure_weights+0x2f8>)
 800536e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005370:	4a16      	ldr	r2, [pc, #88]	; (80053cc <combination_configure_weights+0x2f4>)
 8005372:	6093      	str	r3, [r2, #8]
    input_80_weights_array.data_start = AI_PTR(g_combination_weights_map[19] + 0);
 8005374:	4b16      	ldr	r3, [pc, #88]	; (80053d0 <combination_configure_weights+0x2f8>)
 8005376:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005378:	4a14      	ldr	r2, [pc, #80]	; (80053cc <combination_configure_weights+0x2f4>)
 800537a:	60d3      	str	r3, [r2, #12]
    
    input_80_bias_array.format |= AI_FMT_FLAG_CONST;
 800537c:	4b15      	ldr	r3, [pc, #84]	; (80053d4 <combination_configure_weights+0x2fc>)
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005384:	4a13      	ldr	r2, [pc, #76]	; (80053d4 <combination_configure_weights+0x2fc>)
 8005386:	6013      	str	r3, [r2, #0]
    input_80_bias_array.data = AI_PTR(g_combination_weights_map[20] + 0);
 8005388:	4b11      	ldr	r3, [pc, #68]	; (80053d0 <combination_configure_weights+0x2f8>)
 800538a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800538c:	4a11      	ldr	r2, [pc, #68]	; (80053d4 <combination_configure_weights+0x2fc>)
 800538e:	6093      	str	r3, [r2, #8]
    input_80_bias_array.data_start = AI_PTR(g_combination_weights_map[20] + 0);
 8005390:	4b0f      	ldr	r3, [pc, #60]	; (80053d0 <combination_configure_weights+0x2f8>)
 8005392:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005394:	4a0f      	ldr	r2, [pc, #60]	; (80053d4 <combination_configure_weights+0x2fc>)
 8005396:	60d3      	str	r3, [r2, #12]
    
    input_4_weights_array.format |= AI_FMT_FLAG_CONST;
 8005398:	4b0f      	ldr	r3, [pc, #60]	; (80053d8 <combination_configure_weights+0x300>)
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053a0:	4a0d      	ldr	r2, [pc, #52]	; (80053d8 <combination_configure_weights+0x300>)
 80053a2:	6013      	str	r3, [r2, #0]
    input_4_weights_array.data = AI_PTR(g_combination_weights_map[21] + 0);
 80053a4:	4b0a      	ldr	r3, [pc, #40]	; (80053d0 <combination_configure_weights+0x2f8>)
 80053a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053a8:	4a0b      	ldr	r2, [pc, #44]	; (80053d8 <combination_configure_weights+0x300>)
 80053aa:	6093      	str	r3, [r2, #8]
    input_4_weights_array.data_start = AI_PTR(g_combination_weights_map[21] + 0);
 80053ac:	4b08      	ldr	r3, [pc, #32]	; (80053d0 <combination_configure_weights+0x2f8>)
 80053ae:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80053b0:	4a09      	ldr	r2, [pc, #36]	; (80053d8 <combination_configure_weights+0x300>)
 80053b2:	60d3      	str	r3, [r2, #12]
    
    return true;
 80053b4:	2301      	movs	r3, #1
 80053b6:	e005      	b.n	80053c4 <combination_configure_weights+0x2ec>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 80053b8:	2212      	movs	r2, #18
 80053ba:	2130      	movs	r1, #48	; 0x30
 80053bc:	6878      	ldr	r0, [r7, #4]
 80053be:	f000 fca9 	bl	8005d14 <ai_platform_network_set_error>
  return false;
 80053c2:	2300      	movs	r3, #0
}
 80053c4:	4618      	mov	r0, r3
 80053c6:	3708      	adds	r7, #8
 80053c8:	46bd      	mov	sp, r7
 80053ca:	bd80      	pop	{r7, pc}
 80053cc:	2000013c 	.word	0x2000013c
 80053d0:	20019854 	.word	0x20019854
 80053d4:	2000014c 	.word	0x2000014c
 80053d8:	200002fc 	.word	0x200002fc

080053dc <ai_combination_get_error>:
  return false;
}

AI_API_ENTRY
ai_error ai_combination_get_error(ai_handle network)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b082      	sub	sp, #8
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 80053e4:	6878      	ldr	r0, [r7, #4]
 80053e6:	f000 fb89 	bl	8005afc <ai_platform_network_get_error>
 80053ea:	4603      	mov	r3, r0
}
 80053ec:	4618      	mov	r0, r3
 80053ee:	3708      	adds	r7, #8
 80053f0:	46bd      	mov	sp, r7
 80053f2:	bd80      	pop	{r7, pc}

080053f4 <ai_combination_create>:

AI_API_ENTRY
ai_error ai_combination_create(
  ai_handle* network, const ai_buffer* network_config)
{
 80053f4:	b580      	push	{r7, lr}
 80053f6:	b084      	sub	sp, #16
 80053f8:	af02      	add	r7, sp, #8
 80053fa:	6078      	str	r0, [r7, #4]
 80053fc:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 80053fe:	2300      	movs	r3, #0
 8005400:	9301      	str	r3, [sp, #4]
 8005402:	2305      	movs	r3, #5
 8005404:	9300      	str	r3, [sp, #0]
 8005406:	2301      	movs	r3, #1
 8005408:	4a04      	ldr	r2, [pc, #16]	; (800541c <ai_combination_create+0x28>)
 800540a:	6839      	ldr	r1, [r7, #0]
 800540c:	6878      	ldr	r0, [r7, #4]
 800540e:	f000 ff9b 	bl	8006348 <ai_platform_network_create>
 8005412:	4603      	mov	r3, r0
    network, network_config, 
    &AI_NET_OBJ_INSTANCE,
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005414:	4618      	mov	r0, r3
 8005416:	3708      	adds	r7, #8
 8005418:	46bd      	mov	sp, r7
 800541a:	bd80      	pop	{r7, pc}
 800541c:	20001a4c 	.word	0x20001a4c

08005420 <ai_combination_create_and_init>:

AI_API_ENTRY
ai_error ai_combination_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005420:	b580      	push	{r7, lr}
 8005422:	b096      	sub	sp, #88	; 0x58
 8005424:	af00      	add	r7, sp, #0
 8005426:	60f8      	str	r0, [r7, #12]
 8005428:	60b9      	str	r1, [r7, #8]
 800542a:	607a      	str	r2, [r7, #4]
    ai_error err;
    ai_network_params params;

    err = ai_combination_create(network, AI_COMBINATION_DATA_CONFIG);
 800542c:	2100      	movs	r1, #0
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f7ff ffe0 	bl	80053f4 <ai_combination_create>
 8005434:	4603      	mov	r3, r0
 8005436:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (err.type != AI_ERROR_NONE)
 8005438:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 800543c:	2b00      	cmp	r3, #0
 800543e:	d001      	beq.n	8005444 <ai_combination_create_and_init+0x24>
        return err;
 8005440:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005442:	e05d      	b.n	8005500 <ai_combination_create_and_init+0xe0>
    if (ai_combination_data_params_get(&params) != true) {
 8005444:	f107 0314 	add.w	r3, r7, #20
 8005448:	4618      	mov	r0, r3
 800544a:	f000 f8dd 	bl	8005608 <ai_combination_data_params_get>
 800544e:	4603      	mov	r3, r0
 8005450:	f083 0301 	eor.w	r3, r3, #1
 8005454:	b2db      	uxtb	r3, r3
 8005456:	2b00      	cmp	r3, #0
 8005458:	d008      	beq.n	800546c <ai_combination_create_and_init+0x4c>
        err = ai_combination_get_error(*network);
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	681b      	ldr	r3, [r3, #0]
 800545e:	4618      	mov	r0, r3
 8005460:	f7ff ffbc 	bl	80053dc <ai_combination_get_error>
 8005464:	4603      	mov	r3, r0
 8005466:	64fb      	str	r3, [r7, #76]	; 0x4c
        return err;
 8005468:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800546a:	e049      	b.n	8005500 <ai_combination_create_and_init+0xe0>
    }
#if defined(AI_COMBINATION_DATA_ACTIVATIONS_COUNT)
    if (activations) {
 800546c:	68bb      	ldr	r3, [r7, #8]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d016      	beq.n	80054a0 <ai_combination_create_and_init+0x80>
        /* set the addresses of the activations buffers */
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005472:	2300      	movs	r3, #0
 8005474:	657b      	str	r3, [r7, #84]	; 0x54
 8005476:	e00e      	b.n	8005496 <ai_combination_create_and_init+0x76>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005478:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800547a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800547c:	009b      	lsls	r3, r3, #2
 800547e:	68ba      	ldr	r2, [r7, #8]
 8005480:	4413      	add	r3, r2
 8005482:	681a      	ldr	r2, [r3, #0]
 8005484:	f107 0314 	add.w	r3, r7, #20
 8005488:	330c      	adds	r3, #12
 800548a:	4618      	mov	r0, r3
 800548c:	f000 f9c6 	bl	800581c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_activations.size;idx++)
 8005490:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005492:	3301      	adds	r3, #1
 8005494:	657b      	str	r3, [r7, #84]	; 0x54
 8005496:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8005498:	461a      	mov	r2, r3
 800549a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800549c:	4293      	cmp	r3, r2
 800549e:	dbeb      	blt.n	8005478 <ai_combination_create_and_init+0x58>
    }
#endif
#if defined(AI_COMBINATION_DATA_WEIGHTS_COUNT)
    if (weights) {
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d016      	beq.n	80054d4 <ai_combination_create_and_init+0xb4>
        /* set the addresses of the weight buffers */
        for (int idx=0;idx<params.map_weights.size;idx++)
 80054a6:	2300      	movs	r3, #0
 80054a8:	653b      	str	r3, [r7, #80]	; 0x50
 80054aa:	e00e      	b.n	80054ca <ai_combination_create_and_init+0xaa>
            AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 80054ac:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80054ae:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054b0:	009b      	lsls	r3, r3, #2
 80054b2:	687a      	ldr	r2, [r7, #4]
 80054b4:	4413      	add	r3, r2
 80054b6:	681a      	ldr	r2, [r3, #0]
 80054b8:	f107 0314 	add.w	r3, r7, #20
 80054bc:	3304      	adds	r3, #4
 80054be:	4618      	mov	r0, r3
 80054c0:	f000 f9ac 	bl	800581c <ai_buffer_array_item_set_address>
        for (int idx=0;idx<params.map_weights.size;idx++)
 80054c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054c6:	3301      	adds	r3, #1
 80054c8:	653b      	str	r3, [r7, #80]	; 0x50
 80054ca:	8b7b      	ldrh	r3, [r7, #26]
 80054cc:	461a      	mov	r2, r3
 80054ce:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80054d0:	4293      	cmp	r3, r2
 80054d2:	dbeb      	blt.n	80054ac <ai_combination_create_and_init+0x8c>
    }
#endif
    if (ai_combination_init(*network, &params) != true) {
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	681b      	ldr	r3, [r3, #0]
 80054d8:	f107 0214 	add.w	r2, r7, #20
 80054dc:	4611      	mov	r1, r2
 80054de:	4618      	mov	r0, r3
 80054e0:	f000 f846 	bl	8005570 <ai_combination_init>
 80054e4:	4603      	mov	r3, r0
 80054e6:	f083 0301 	eor.w	r3, r3, #1
 80054ea:	b2db      	uxtb	r3, r3
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d006      	beq.n	80054fe <ai_combination_create_and_init+0xde>
        err = ai_combination_get_error(*network);
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7ff ff71 	bl	80053dc <ai_combination_get_error>
 80054fa:	4603      	mov	r3, r0
 80054fc:	64fb      	str	r3, [r7, #76]	; 0x4c
    }
    return err;
 80054fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
}
 8005500:	4618      	mov	r0, r3
 8005502:	3758      	adds	r7, #88	; 0x58
 8005504:	46bd      	mov	sp, r7
 8005506:	bd80      	pop	{r7, pc}

08005508 <ai_combination_inputs_get>:

AI_API_ENTRY
ai_buffer* ai_combination_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005508:	b580      	push	{r7, lr}
 800550a:	b082      	sub	sp, #8
 800550c:	af00      	add	r7, sp, #0
 800550e:	6078      	str	r0, [r7, #4]
 8005510:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	2b00      	cmp	r3, #0
 8005516:	d104      	bne.n	8005522 <ai_combination_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005518:	4b06      	ldr	r3, [pc, #24]	; (8005534 <ai_combination_inputs_get+0x2c>)
 800551a:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	4a06      	ldr	r2, [pc, #24]	; (8005538 <ai_combination_inputs_get+0x30>)
 8005520:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005522:	6839      	ldr	r1, [r7, #0]
 8005524:	6878      	ldr	r0, [r7, #4]
 8005526:	f000 fbfb 	bl	8005d20 <ai_platform_inputs_get>
 800552a:	4603      	mov	r3, r0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3708      	adds	r7, #8
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	20001a4c 	.word	0x20001a4c
 8005538:	a1c00100 	.word	0xa1c00100

0800553c <ai_combination_outputs_get>:

AI_API_ENTRY
ai_buffer* ai_combination_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 800553c:	b580      	push	{r7, lr}
 800553e:	b082      	sub	sp, #8
 8005540:	af00      	add	r7, sp, #0
 8005542:	6078      	str	r0, [r7, #4]
 8005544:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d104      	bne.n	8005556 <ai_combination_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 800554c:	4b06      	ldr	r3, [pc, #24]	; (8005568 <ai_combination_outputs_get+0x2c>)
 800554e:	607b      	str	r3, [r7, #4]
    ((ai_network *)network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	4a06      	ldr	r2, [pc, #24]	; (800556c <ai_combination_outputs_get+0x30>)
 8005554:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005556:	6839      	ldr	r1, [r7, #0]
 8005558:	6878      	ldr	r0, [r7, #4]
 800555a:	f000 fd6d 	bl	8006038 <ai_platform_outputs_get>
 800555e:	4603      	mov	r3, r0
}
 8005560:	4618      	mov	r0, r3
 8005562:	3708      	adds	r7, #8
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}
 8005568:	20001a4c 	.word	0x20001a4c
 800556c:	a1c00100 	.word	0xa1c00100

08005570 <ai_combination_init>:
}

AI_API_ENTRY
ai_bool ai_combination_init(
  ai_handle network, const ai_network_params* params)
{
 8005570:	b580      	push	{r7, lr}
 8005572:	b084      	sub	sp, #16
 8005574:	af00      	add	r7, sp, #0
 8005576:	6078      	str	r0, [r7, #4]
 8005578:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = ai_platform_network_init(network, params);
 800557a:	6839      	ldr	r1, [r7, #0]
 800557c:	6878      	ldr	r0, [r7, #4]
 800557e:	f001 f8bd 	bl	80066fc <ai_platform_network_init>
 8005582:	60f8      	str	r0, [r7, #12]
  if (!net_ctx) return false;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	2b00      	cmp	r3, #0
 8005588:	d101      	bne.n	800558e <ai_combination_init+0x1e>
 800558a:	2300      	movs	r3, #0
 800558c:	e028      	b.n	80055e0 <ai_combination_init+0x70>

  ai_bool ok = true;
 800558e:	2301      	movs	r3, #1
 8005590:	72fb      	strb	r3, [r7, #11]
  ok &= combination_configure_weights(net_ctx, params);
 8005592:	6839      	ldr	r1, [r7, #0]
 8005594:	68f8      	ldr	r0, [r7, #12]
 8005596:	f7ff fd9f 	bl	80050d8 <combination_configure_weights>
 800559a:	4603      	mov	r3, r0
 800559c:	461a      	mov	r2, r3
 800559e:	7afb      	ldrb	r3, [r7, #11]
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	bf14      	ite	ne
 80055a6:	2301      	movne	r3, #1
 80055a8:	2300      	moveq	r3, #0
 80055aa:	72fb      	strb	r3, [r7, #11]
  ok &= combination_configure_activations(net_ctx, params);
 80055ac:	6839      	ldr	r1, [r7, #0]
 80055ae:	68f8      	ldr	r0, [r7, #12]
 80055b0:	f7ff fc28 	bl	8004e04 <combination_configure_activations>
 80055b4:	4603      	mov	r3, r0
 80055b6:	461a      	mov	r2, r3
 80055b8:	7afb      	ldrb	r3, [r7, #11]
 80055ba:	4013      	ands	r3, r2
 80055bc:	2b00      	cmp	r3, #0
 80055be:	bf14      	ite	ne
 80055c0:	2301      	movne	r3, #1
 80055c2:	2300      	moveq	r3, #0
 80055c4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 80055c6:	6878      	ldr	r0, [r7, #4]
 80055c8:	f001 fa34 	bl	8006a34 <ai_platform_network_post_init>
 80055cc:	4603      	mov	r3, r0
 80055ce:	461a      	mov	r2, r3
 80055d0:	7afb      	ldrb	r3, [r7, #11]
 80055d2:	4013      	ands	r3, r2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	bf14      	ite	ne
 80055d8:	2301      	movne	r3, #1
 80055da:	2300      	moveq	r3, #0
 80055dc:	72fb      	strb	r3, [r7, #11]

  return ok;
 80055de:	7afb      	ldrb	r3, [r7, #11]
}
 80055e0:	4618      	mov	r0, r3
 80055e2:	3710      	adds	r7, #16
 80055e4:	46bd      	mov	sp, r7
 80055e6:	bd80      	pop	{r7, pc}

080055e8 <ai_combination_run>:


AI_API_ENTRY
ai_i32 ai_combination_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 80055e8:	b580      	push	{r7, lr}
 80055ea:	b084      	sub	sp, #16
 80055ec:	af00      	add	r7, sp, #0
 80055ee:	60f8      	str	r0, [r7, #12]
 80055f0:	60b9      	str	r1, [r7, #8]
 80055f2:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 80055f4:	687a      	ldr	r2, [r7, #4]
 80055f6:	68b9      	ldr	r1, [r7, #8]
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f001 fb45 	bl	8006c88 <ai_platform_network_process>
 80055fe:	4603      	mov	r3, r0
}
 8005600:	4618      	mov	r0, r3
 8005602:	3710      	adds	r7, #16
 8005604:	46bd      	mov	sp, r7
 8005606:	bd80      	pop	{r7, pc}

08005608 <ai_combination_data_params_get>:
 * @ingroup combination_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_combination_data_params_get(ai_network_params* params)
{
 8005608:	b580      	push	{r7, lr}
 800560a:	b086      	sub	sp, #24
 800560c:	af00      	add	r7, sp, #0
 800560e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	2b00      	cmp	r3, #0
 8005614:	d101      	bne.n	800561a <ai_combination_data_params_get+0x12>
 8005616:	2300      	movs	r3, #0
 8005618:	e016      	b.n	8005648 <ai_combination_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 800561a:	4a0d      	ldr	r2, [pc, #52]	; (8005650 <ai_combination_data_params_get+0x48>)
 800561c:	f107 0310 	add.w	r3, r7, #16
 8005620:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005624:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_COMBINATION_DATA_ACTIVATIONS_COUNT, g_combination_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005628:	4a0a      	ldr	r2, [pc, #40]	; (8005654 <ai_combination_data_params_get+0x4c>)
 800562a:	f107 0308 	add.w	r3, r7, #8
 800562e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005632:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_COMBINATION_DATA_WEIGHTS_COUNT, g_combination_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005636:	f107 0210 	add.w	r2, r7, #16
 800563a:	f107 0308 	add.w	r3, r7, #8
 800563e:	4619      	mov	r1, r3
 8005640:	6878      	ldr	r0, [r7, #4]
 8005642:	f000 fa41 	bl	8005ac8 <ai_platform_bind_network_params>
 8005646:	4603      	mov	r3, r0
}
 8005648:	4618      	mov	r0, r3
 800564a:	3718      	adds	r7, #24
 800564c:	46bd      	mov	sp, r7
 800564e:	bd80      	pop	{r7, pc}
 8005650:	08009f5c 	.word	0x08009f5c
 8005654:	08009f64 	.word	0x08009f64

08005658 <ai_array_to_buffer_fmt>:
 8005658:	f3c0 4343 	ubfx	r3, r0, #17, #4
 800565c:	2b02      	cmp	r3, #2
 800565e:	d050      	beq.n	8005702 <ai_array_to_buffer_fmt+0xaa>
 8005660:	f020 427e 	bic.w	r2, r0, #4261412864	; 0xfe000000
 8005664:	4b29      	ldr	r3, [pc, #164]	; (800570c <ai_array_to_buffer_fmt+0xb4>)
 8005666:	429a      	cmp	r2, r3
 8005668:	d00b      	beq.n	8005682 <ai_array_to_buffer_fmt+0x2a>
 800566a:	dc1c      	bgt.n	80056a6 <ai_array_to_buffer_fmt+0x4e>
 800566c:	4b28      	ldr	r3, [pc, #160]	; (8005710 <ai_array_to_buffer_fmt+0xb8>)
 800566e:	429a      	cmp	r2, r3
 8005670:	d007      	beq.n	8005682 <ai_array_to_buffer_fmt+0x2a>
 8005672:	dd0b      	ble.n	800568c <ai_array_to_buffer_fmt+0x34>
 8005674:	4b27      	ldr	r3, [pc, #156]	; (8005714 <ai_array_to_buffer_fmt+0xbc>)
 8005676:	429a      	cmp	r2, r3
 8005678:	d003      	beq.n	8005682 <ai_array_to_buffer_fmt+0x2a>
 800567a:	f503 33fa 	add.w	r3, r3, #128000	; 0x1f400
 800567e:	429a      	cmp	r2, r3
 8005680:	d131      	bne.n	80056e6 <ai_array_to_buffer_fmt+0x8e>
 8005682:	4613      	mov	r3, r2
 8005684:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 8005688:	4318      	orrs	r0, r3
 800568a:	4770      	bx	lr
 800568c:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 8005690:	429a      	cmp	r2, r3
 8005692:	d0f6      	beq.n	8005682 <ai_array_to_buffer_fmt+0x2a>
 8005694:	dd2c      	ble.n	80056f0 <ai_array_to_buffer_fmt+0x98>
 8005696:	4b20      	ldr	r3, [pc, #128]	; (8005718 <ai_array_to_buffer_fmt+0xc0>)
 8005698:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 800569c:	429a      	cmp	r2, r3
 800569e:	bf18      	it	ne
 80056a0:	2340      	movne	r3, #64	; 0x40
 80056a2:	4318      	orrs	r0, r3
 80056a4:	4770      	bx	lr
 80056a6:	4b1d      	ldr	r3, [pc, #116]	; (800571c <ai_array_to_buffer_fmt+0xc4>)
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d0ea      	beq.n	8005682 <ai_array_to_buffer_fmt+0x2a>
 80056ac:	dd0e      	ble.n	80056cc <ai_array_to_buffer_fmt+0x74>
 80056ae:	4b1c      	ldr	r3, [pc, #112]	; (8005720 <ai_array_to_buffer_fmt+0xc8>)
 80056b0:	429a      	cmp	r2, r3
 80056b2:	d0e6      	beq.n	8005682 <ai_array_to_buffer_fmt+0x2a>
 80056b4:	f503 037e 	add.w	r3, r3, #16646144	; 0xfe0000
 80056b8:	429a      	cmp	r2, r3
 80056ba:	d0e2      	beq.n	8005682 <ai_array_to_buffer_fmt+0x2a>
 80056bc:	4b19      	ldr	r3, [pc, #100]	; (8005724 <ai_array_to_buffer_fmt+0xcc>)
 80056be:	f000 40d0 	and.w	r0, r0, #1744830464	; 0x68000000
 80056c2:	429a      	cmp	r2, r3
 80056c4:	bf18      	it	ne
 80056c6:	2340      	movne	r3, #64	; 0x40
 80056c8:	4318      	orrs	r0, r3
 80056ca:	4770      	bx	lr
 80056cc:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80056d0:	429a      	cmp	r2, r3
 80056d2:	d0d6      	beq.n	8005682 <ai_array_to_buffer_fmt+0x2a>
 80056d4:	3307      	adds	r3, #7
 80056d6:	429a      	cmp	r2, r3
 80056d8:	d0d3      	beq.n	8005682 <ai_array_to_buffer_fmt+0x2a>
 80056da:	f2a3 3387 	subw	r3, r3, #903	; 0x387
 80056de:	429a      	cmp	r2, r3
 80056e0:	bf18      	it	ne
 80056e2:	2340      	movne	r3, #64	; 0x40
 80056e4:	e7ce      	b.n	8005684 <ai_array_to_buffer_fmt+0x2c>
 80056e6:	4b10      	ldr	r3, [pc, #64]	; (8005728 <ai_array_to_buffer_fmt+0xd0>)
 80056e8:	429a      	cmp	r2, r3
 80056ea:	bf18      	it	ne
 80056ec:	2340      	movne	r3, #64	; 0x40
 80056ee:	e7c9      	b.n	8005684 <ai_array_to_buffer_fmt+0x2c>
 80056f0:	f5a3 6380 	sub.w	r3, r3, #1024	; 0x400
 80056f4:	429a      	cmp	r2, r3
 80056f6:	d0c4      	beq.n	8005682 <ai_array_to_buffer_fmt+0x2a>
 80056f8:	3380      	adds	r3, #128	; 0x80
 80056fa:	429a      	cmp	r2, r3
 80056fc:	bf18      	it	ne
 80056fe:	2340      	movne	r3, #64	; 0x40
 8005700:	e7c0      	b.n	8005684 <ai_array_to_buffer_fmt+0x2c>
 8005702:	4b0a      	ldr	r3, [pc, #40]	; (800572c <ai_array_to_buffer_fmt+0xd4>)
 8005704:	4003      	ands	r3, r0
 8005706:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800570a:	e7bb      	b.n	8005684 <ai_array_to_buffer_fmt+0x2c>
 800570c:	00840040 	.word	0x00840040
 8005710:	00040840 	.word	0x00040840
 8005714:	00041040 	.word	0x00041040
 8005718:	00040447 	.word	0x00040447
 800571c:	00840840 	.word	0x00840840
 8005720:	00841040 	.word	0x00841040
 8005724:	0084084f 	.word	0x0084084f
 8005728:	0004084f 	.word	0x0004084f
 800572c:	00803fff 	.word	0x00803fff

08005730 <ai_array_get_byte_size>:
 8005730:	b319      	cbz	r1, 800577a <ai_array_get_byte_size+0x4a>
 8005732:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005736:	f3c0 4243 	ubfx	r2, r0, #17, #4
 800573a:	f3c0 5c41 	ubfx	ip, r0, #21, #2
 800573e:	11c0      	asrs	r0, r0, #7
 8005740:	fb03 f101 	mul.w	r1, r3, r1
 8005744:	2a04      	cmp	r2, #4
 8005746:	f101 0107 	add.w	r1, r1, #7
 800574a:	f021 0107 	bic.w	r1, r1, #7
 800574e:	fa21 f10c 	lsr.w	r1, r1, ip
 8005752:	d00b      	beq.n	800576c <ai_array_get_byte_size+0x3c>
 8005754:	2a08      	cmp	r2, #8
 8005756:	d002      	beq.n	800575e <ai_array_get_byte_size+0x2e>
 8005758:	3107      	adds	r1, #7
 800575a:	08c8      	lsrs	r0, r1, #3
 800575c:	4770      	bx	lr
 800575e:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005762:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8005766:	3107      	adds	r1, #7
 8005768:	08c8      	lsrs	r0, r1, #3
 800576a:	4770      	bx	lr
 800576c:	f000 007f 	and.w	r0, r0, #127	; 0x7f
 8005770:	eb01 1100 	add.w	r1, r1, r0, lsl #4
 8005774:	3107      	adds	r1, #7
 8005776:	08c8      	lsrs	r0, r1, #3
 8005778:	4770      	bx	lr
 800577a:	4608      	mov	r0, r1
 800577c:	4770      	bx	lr
 800577e:	bf00      	nop

08005780 <ai_array_get_data_byte_size>:
 8005780:	b161      	cbz	r1, 800579c <ai_array_get_data_byte_size+0x1c>
 8005782:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8005786:	f3c0 5241 	ubfx	r2, r0, #21, #2
 800578a:	fb03 f101 	mul.w	r1, r3, r1
 800578e:	1dc8      	adds	r0, r1, #7
 8005790:	f020 0007 	bic.w	r0, r0, #7
 8005794:	40d0      	lsrs	r0, r2
 8005796:	3007      	adds	r0, #7
 8005798:	08c0      	lsrs	r0, r0, #3
 800579a:	4770      	bx	lr
 800579c:	4608      	mov	r0, r1
 800579e:	4770      	bx	lr

080057a0 <ai_buffer_get_size>:
 80057a0:	b368      	cbz	r0, 80057fe <ai_buffer_get_size+0x5e>
 80057a2:	4b17      	ldr	r3, [pc, #92]	; (8005800 <ai_buffer_get_size+0x60>)
 80057a4:	4a17      	ldr	r2, [pc, #92]	; (8005804 <ai_buffer_get_size+0x64>)
 80057a6:	b410      	push	{r4}
 80057a8:	6804      	ldr	r4, [r0, #0]
 80057aa:	4023      	ands	r3, r4
 80057ac:	4293      	cmp	r3, r2
 80057ae:	d123      	bne.n	80057f8 <ai_buffer_get_size+0x58>
 80057b0:	b311      	cbz	r1, 80057f8 <ai_buffer_get_size+0x58>
 80057b2:	6984      	ldr	r4, [r0, #24]
 80057b4:	6862      	ldr	r2, [r4, #4]
 80057b6:	321f      	adds	r2, #31
 80057b8:	f022 021f 	bic.w	r2, r2, #31
 80057bc:	7d03      	ldrb	r3, [r0, #20]
 80057be:	6941      	ldr	r1, [r0, #20]
 80057c0:	f1a3 0301 	sub.w	r3, r3, #1
 80057c4:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80057c8:	fab3 f383 	clz	r3, r3
 80057cc:	095b      	lsrs	r3, r3, #5
 80057ce:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80057d2:	da0c      	bge.n	80057ee <ai_buffer_get_size+0x4e>
 80057d4:	2b01      	cmp	r3, #1
 80057d6:	d103      	bne.n	80057e0 <ai_buffer_get_size+0x40>
 80057d8:	2802      	cmp	r0, #2
 80057da:	f04f 0302 	mov.w	r3, #2
 80057de:	d006      	beq.n	80057ee <ai_buffer_get_size+0x4e>
 80057e0:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 80057e4:	3301      	adds	r3, #1
 80057e6:	4298      	cmp	r0, r3
 80057e8:	fb01 f202 	mul.w	r2, r1, r2
 80057ec:	d1f2      	bne.n	80057d4 <ai_buffer_get_size+0x34>
 80057ee:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 80057f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80057f6:	4770      	bx	lr
 80057f8:	6984      	ldr	r4, [r0, #24]
 80057fa:	6862      	ldr	r2, [r4, #4]
 80057fc:	e7de      	b.n	80057bc <ai_buffer_get_size+0x1c>
 80057fe:	4770      	bx	lr
 8005800:	017fffff 	.word	0x017fffff
 8005804:	000400c0 	.word	0x000400c0

08005808 <ai_buffer_array_sane>:
 8005808:	b138      	cbz	r0, 800581a <ai_buffer_array_sane+0x12>
 800580a:	6843      	ldr	r3, [r0, #4]
 800580c:	b123      	cbz	r3, 8005818 <ai_buffer_array_sane+0x10>
 800580e:	8840      	ldrh	r0, [r0, #2]
 8005810:	3800      	subs	r0, #0
 8005812:	bf18      	it	ne
 8005814:	2001      	movne	r0, #1
 8005816:	4770      	bx	lr
 8005818:	4618      	mov	r0, r3
 800581a:	4770      	bx	lr

0800581c <ai_buffer_array_item_set_address>:
 800581c:	b150      	cbz	r0, 8005834 <ai_buffer_array_item_set_address+0x18>
 800581e:	6843      	ldr	r3, [r0, #4]
 8005820:	b14b      	cbz	r3, 8005836 <ai_buffer_array_item_set_address+0x1a>
 8005822:	8840      	ldrh	r0, [r0, #2]
 8005824:	b900      	cbnz	r0, 8005828 <ai_buffer_array_item_set_address+0xc>
 8005826:	4770      	bx	lr
 8005828:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 800582c:	2001      	movs	r0, #1
 800582e:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8005832:	604a      	str	r2, [r1, #4]
 8005834:	4770      	bx	lr
 8005836:	4618      	mov	r0, r3
 8005838:	4770      	bx	lr
 800583a:	bf00      	nop

0800583c <_platform_observer_node_exec_cb>:
 800583c:	2a00      	cmp	r2, #0
 800583e:	d06c      	beq.n	800591a <_platform_observer_node_exec_cb+0xde>
 8005840:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8005844:	6815      	ldr	r5, [r2, #0]
 8005846:	b085      	sub	sp, #20
 8005848:	4614      	mov	r4, r2
 800584a:	2d00      	cmp	r5, #0
 800584c:	d067      	beq.n	800591e <_platform_observer_node_exec_cb+0xe2>
 800584e:	8993      	ldrh	r3, [r2, #12]
 8005850:	f240 2c02 	movw	ip, #514	; 0x202
 8005854:	89d2      	ldrh	r2, [r2, #14]
 8005856:	460e      	mov	r6, r1
 8005858:	2b00      	cmp	r3, #0
 800585a:	f240 3102 	movw	r1, #770	; 0x302
 800585e:	f102 32ff 	add.w	r2, r2, #4294967295	; 0xffffffff
 8005862:	f240 3e01 	movw	lr, #769	; 0x301
 8005866:	bf18      	it	ne
 8005868:	4667      	movne	r7, ip
 800586a:	f240 2c01 	movw	ip, #513	; 0x201
 800586e:	bf0d      	iteet	eq
 8005870:	460f      	moveq	r7, r1
 8005872:	f44f 7901 	movne.w	r9, #516	; 0x204
 8005876:	46e6      	movne	lr, ip
 8005878:	f44f 7941 	moveq.w	r9, #772	; 0x304
 800587c:	f240 1c01 	movw	ip, #257	; 0x101
 8005880:	bf1b      	ittet	ne
 8005882:	f04f 0804 	movne.w	r8, #4
 8005886:	f04f 0c01 	movne.w	ip, #1
 800588a:	f44f 7882 	moveq.w	r8, #260	; 0x104
 800588e:	2102      	movne	r1, #2
 8005890:	bf08      	it	eq
 8005892:	f44f 7181 	moveq.w	r1, #258	; 0x102
 8005896:	429a      	cmp	r2, r3
 8005898:	d013      	beq.n	80058c2 <_platform_observer_node_exec_cb+0x86>
 800589a:	b148      	cbz	r0, 80058b0 <_platform_observer_node_exec_cb+0x74>
 800589c:	2801      	cmp	r0, #1
 800589e:	d042      	beq.n	8005926 <_platform_observer_node_exec_cb+0xea>
 80058a0:	2802      	cmp	r0, #2
 80058a2:	d025      	beq.n	80058f0 <_platform_observer_node_exec_cb+0xb4>
 80058a4:	2803      	cmp	r0, #3
 80058a6:	d045      	beq.n	8005934 <_platform_observer_node_exec_cb+0xf8>
 80058a8:	2000      	movs	r0, #0
 80058aa:	b005      	add	sp, #20
 80058ac:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058b0:	68a2      	ldr	r2, [r4, #8]
 80058b2:	07d7      	lsls	r7, r2, #31
 80058b4:	d40b      	bmi.n	80058ce <_platform_observer_node_exec_cb+0x92>
 80058b6:	3301      	adds	r3, #1
 80058b8:	2000      	movs	r0, #0
 80058ba:	81a3      	strh	r3, [r4, #12]
 80058bc:	b005      	add	sp, #20
 80058be:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80058c2:	46c8      	mov	r8, r9
 80058c4:	4639      	mov	r1, r7
 80058c6:	46f4      	mov	ip, lr
 80058c8:	2800      	cmp	r0, #0
 80058ca:	d1e7      	bne.n	800589c <_platform_observer_node_exec_cb+0x60>
 80058cc:	e7f0      	b.n	80058b0 <_platform_observer_node_exec_cb+0x74>
 80058ce:	f8ad 3000 	strh.w	r3, [sp]
 80058d2:	466a      	mov	r2, sp
 80058d4:	8873      	ldrh	r3, [r6, #2]
 80058d6:	4661      	mov	r1, ip
 80058d8:	9002      	str	r0, [sp, #8]
 80058da:	f8ad 3004 	strh.w	r3, [sp, #4]
 80058de:	8833      	ldrh	r3, [r6, #0]
 80058e0:	6860      	ldr	r0, [r4, #4]
 80058e2:	f8ad 3002 	strh.w	r3, [sp, #2]
 80058e6:	69b3      	ldr	r3, [r6, #24]
 80058e8:	9303      	str	r3, [sp, #12]
 80058ea:	47a8      	blx	r5
 80058ec:	89a3      	ldrh	r3, [r4, #12]
 80058ee:	e7e2      	b.n	80058b6 <_platform_observer_node_exec_cb+0x7a>
 80058f0:	68a2      	ldr	r2, [r4, #8]
 80058f2:	6126      	str	r6, [r4, #16]
 80058f4:	0790      	lsls	r0, r2, #30
 80058f6:	d5d7      	bpl.n	80058a8 <_platform_observer_node_exec_cb+0x6c>
 80058f8:	f8ad 3000 	strh.w	r3, [sp]
 80058fc:	8873      	ldrh	r3, [r6, #2]
 80058fe:	8832      	ldrh	r2, [r6, #0]
 8005900:	6860      	ldr	r0, [r4, #4]
 8005902:	2400      	movs	r4, #0
 8005904:	f8ad 3004 	strh.w	r3, [sp, #4]
 8005908:	69b3      	ldr	r3, [r6, #24]
 800590a:	f8ad 2002 	strh.w	r2, [sp, #2]
 800590e:	466a      	mov	r2, sp
 8005910:	e9cd 4302 	strd	r4, r3, [sp, #8]
 8005914:	47a8      	blx	r5
 8005916:	4620      	mov	r0, r4
 8005918:	e7d0      	b.n	80058bc <_platform_observer_node_exec_cb+0x80>
 800591a:	2001      	movs	r0, #1
 800591c:	4770      	bx	lr
 800591e:	2001      	movs	r0, #1
 8005920:	b005      	add	sp, #20
 8005922:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005926:	2300      	movs	r3, #0
 8005928:	6126      	str	r6, [r4, #16]
 800592a:	4618      	mov	r0, r3
 800592c:	81a3      	strh	r3, [r4, #12]
 800592e:	b005      	add	sp, #20
 8005930:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005934:	68a2      	ldr	r2, [r4, #8]
 8005936:	0752      	lsls	r2, r2, #29
 8005938:	d5bd      	bpl.n	80058b6 <_platform_observer_node_exec_cb+0x7a>
 800593a:	6922      	ldr	r2, [r4, #16]
 800593c:	2000      	movs	r0, #0
 800593e:	f8ad 3000 	strh.w	r3, [sp]
 8005942:	4641      	mov	r1, r8
 8005944:	8853      	ldrh	r3, [r2, #2]
 8005946:	f8ad 3004 	strh.w	r3, [sp, #4]
 800594a:	8813      	ldrh	r3, [r2, #0]
 800594c:	f8ad 3002 	strh.w	r3, [sp, #2]
 8005950:	6993      	ldr	r3, [r2, #24]
 8005952:	466a      	mov	r2, sp
 8005954:	9002      	str	r0, [sp, #8]
 8005956:	9303      	str	r3, [sp, #12]
 8005958:	6860      	ldr	r0, [r4, #4]
 800595a:	47a8      	blx	r5
 800595c:	89a3      	ldrh	r3, [r4, #12]
 800595e:	e7aa      	b.n	80058b6 <_platform_observer_node_exec_cb+0x7a>

08005960 <_ai_platform_acquire_crc>:
 8005960:	2001      	movs	r0, #1
 8005962:	4770      	bx	lr

08005964 <_ai_platform_release_crc>:
 8005964:	4770      	bx	lr
 8005966:	bf00      	nop

08005968 <ai_platform_get_weights_map>:
 8005968:	2900      	cmp	r1, #0
 800596a:	bf18      	it	ne
 800596c:	2800      	cmpne	r0, #0
 800596e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005970:	bf0c      	ite	eq
 8005972:	2401      	moveq	r4, #1
 8005974:	2400      	movne	r4, #0
 8005976:	2a00      	cmp	r2, #0
 8005978:	bf08      	it	eq
 800597a:	f044 0401 	orreq.w	r4, r4, #1
 800597e:	b114      	cbz	r4, 8005986 <ai_platform_get_weights_map+0x1e>
 8005980:	2400      	movs	r4, #0
 8005982:	4620      	mov	r0, r4
 8005984:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005986:	4616      	mov	r6, r2
 8005988:	4b22      	ldr	r3, [pc, #136]	; (8005a14 <ai_platform_get_weights_map+0xac>)
 800598a:	6812      	ldr	r2, [r2, #0]
 800598c:	4605      	mov	r5, r0
 800598e:	460f      	mov	r7, r1
 8005990:	429a      	cmp	r2, r3
 8005992:	d022      	beq.n	80059da <ai_platform_get_weights_map+0x72>
 8005994:	6870      	ldr	r0, [r6, #4]
 8005996:	2800      	cmp	r0, #0
 8005998:	d0f2      	beq.n	8005980 <ai_platform_get_weights_map+0x18>
 800599a:	6806      	ldr	r6, [r0, #0]
 800599c:	429e      	cmp	r6, r3
 800599e:	d006      	beq.n	80059ae <ai_platform_get_weights_map+0x46>
 80059a0:	f1a1 0401 	sub.w	r4, r1, #1
 80059a4:	6028      	str	r0, [r5, #0]
 80059a6:	fab4 f484 	clz	r4, r4
 80059aa:	0964      	lsrs	r4, r4, #5
 80059ac:	e7e9      	b.n	8005982 <ai_platform_get_weights_map+0x1a>
 80059ae:	3d04      	subs	r5, #4
 80059b0:	4602      	mov	r2, r0
 80059b2:	4621      	mov	r1, r4
 80059b4:	e000      	b.n	80059b8 <ai_platform_get_weights_map+0x50>
 80059b6:	4619      	mov	r1, r3
 80059b8:	f852 3f04 	ldr.w	r3, [r2, #4]!
 80059bc:	42b3      	cmp	r3, r6
 80059be:	d025      	beq.n	8005a0c <ai_platform_get_weights_map+0xa4>
 80059c0:	f845 3f04 	str.w	r3, [r5, #4]!
 80059c4:	1c4b      	adds	r3, r1, #1
 80059c6:	429f      	cmp	r7, r3
 80059c8:	d8f5      	bhi.n	80059b6 <ai_platform_get_weights_map+0x4e>
 80059ca:	d1da      	bne.n	8005982 <ai_platform_get_weights_map+0x1a>
 80059cc:	3102      	adds	r1, #2
 80059ce:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 80059d2:	42b3      	cmp	r3, r6
 80059d4:	d1d5      	bne.n	8005982 <ai_platform_get_weights_map+0x1a>
 80059d6:	2401      	movs	r4, #1
 80059d8:	e7d3      	b.n	8005982 <ai_platform_get_weights_map+0x1a>
 80059da:	1d30      	adds	r0, r6, #4
 80059dc:	f7ff ff14 	bl	8005808 <ai_buffer_array_sane>
 80059e0:	2800      	cmp	r0, #0
 80059e2:	d0cd      	beq.n	8005980 <ai_platform_get_weights_map+0x18>
 80059e4:	88f3      	ldrh	r3, [r6, #6]
 80059e6:	429f      	cmp	r7, r3
 80059e8:	d1ca      	bne.n	8005980 <ai_platform_get_weights_map+0x18>
 80059ea:	3d04      	subs	r5, #4
 80059ec:	4622      	mov	r2, r4
 80059ee:	68b3      	ldr	r3, [r6, #8]
 80059f0:	4423      	add	r3, r4
 80059f2:	341c      	adds	r4, #28
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	b123      	cbz	r3, 8005a02 <ai_platform_get_weights_map+0x9a>
 80059f8:	3201      	adds	r2, #1
 80059fa:	f845 3f04 	str.w	r3, [r5, #4]!
 80059fe:	4297      	cmp	r7, r2
 8005a00:	d8f5      	bhi.n	80059ee <ai_platform_get_weights_map+0x86>
 8005a02:	1abc      	subs	r4, r7, r2
 8005a04:	fab4 f484 	clz	r4, r4
 8005a08:	0964      	lsrs	r4, r4, #5
 8005a0a:	e7ba      	b.n	8005982 <ai_platform_get_weights_map+0x1a>
 8005a0c:	428f      	cmp	r7, r1
 8005a0e:	d1b8      	bne.n	8005982 <ai_platform_get_weights_map+0x1a>
 8005a10:	e7e1      	b.n	80059d6 <ai_platform_get_weights_map+0x6e>
 8005a12:	bf00      	nop
 8005a14:	a1facade 	.word	0xa1facade

08005a18 <ai_platform_get_activations_map>:
 8005a18:	2900      	cmp	r1, #0
 8005a1a:	bf18      	it	ne
 8005a1c:	2800      	cmpne	r0, #0
 8005a1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005a20:	bf0c      	ite	eq
 8005a22:	2401      	moveq	r4, #1
 8005a24:	2400      	movne	r4, #0
 8005a26:	2a00      	cmp	r2, #0
 8005a28:	bf08      	it	eq
 8005a2a:	f044 0401 	orreq.w	r4, r4, #1
 8005a2e:	b114      	cbz	r4, 8005a36 <ai_platform_get_activations_map+0x1e>
 8005a30:	2400      	movs	r4, #0
 8005a32:	4620      	mov	r0, r4
 8005a34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005a36:	4616      	mov	r6, r2
 8005a38:	4b22      	ldr	r3, [pc, #136]	; (8005ac4 <ai_platform_get_activations_map+0xac>)
 8005a3a:	6812      	ldr	r2, [r2, #0]
 8005a3c:	4605      	mov	r5, r0
 8005a3e:	460f      	mov	r7, r1
 8005a40:	429a      	cmp	r2, r3
 8005a42:	d022      	beq.n	8005a8a <ai_platform_get_activations_map+0x72>
 8005a44:	6a30      	ldr	r0, [r6, #32]
 8005a46:	2800      	cmp	r0, #0
 8005a48:	d0f2      	beq.n	8005a30 <ai_platform_get_activations_map+0x18>
 8005a4a:	6806      	ldr	r6, [r0, #0]
 8005a4c:	429e      	cmp	r6, r3
 8005a4e:	d006      	beq.n	8005a5e <ai_platform_get_activations_map+0x46>
 8005a50:	f1a1 0401 	sub.w	r4, r1, #1
 8005a54:	6028      	str	r0, [r5, #0]
 8005a56:	fab4 f484 	clz	r4, r4
 8005a5a:	0964      	lsrs	r4, r4, #5
 8005a5c:	e7e9      	b.n	8005a32 <ai_platform_get_activations_map+0x1a>
 8005a5e:	3d04      	subs	r5, #4
 8005a60:	4602      	mov	r2, r0
 8005a62:	4621      	mov	r1, r4
 8005a64:	e000      	b.n	8005a68 <ai_platform_get_activations_map+0x50>
 8005a66:	4619      	mov	r1, r3
 8005a68:	f852 3f04 	ldr.w	r3, [r2, #4]!
 8005a6c:	42b3      	cmp	r3, r6
 8005a6e:	d026      	beq.n	8005abe <ai_platform_get_activations_map+0xa6>
 8005a70:	f845 3f04 	str.w	r3, [r5, #4]!
 8005a74:	1c4b      	adds	r3, r1, #1
 8005a76:	429f      	cmp	r7, r3
 8005a78:	d8f5      	bhi.n	8005a66 <ai_platform_get_activations_map+0x4e>
 8005a7a:	d1da      	bne.n	8005a32 <ai_platform_get_activations_map+0x1a>
 8005a7c:	3102      	adds	r1, #2
 8005a7e:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
 8005a82:	42b3      	cmp	r3, r6
 8005a84:	d1d5      	bne.n	8005a32 <ai_platform_get_activations_map+0x1a>
 8005a86:	2401      	movs	r4, #1
 8005a88:	e7d3      	b.n	8005a32 <ai_platform_get_activations_map+0x1a>
 8005a8a:	f106 000c 	add.w	r0, r6, #12
 8005a8e:	f7ff febb 	bl	8005808 <ai_buffer_array_sane>
 8005a92:	2800      	cmp	r0, #0
 8005a94:	d0cc      	beq.n	8005a30 <ai_platform_get_activations_map+0x18>
 8005a96:	89f3      	ldrh	r3, [r6, #14]
 8005a98:	429f      	cmp	r7, r3
 8005a9a:	d1c9      	bne.n	8005a30 <ai_platform_get_activations_map+0x18>
 8005a9c:	3d04      	subs	r5, #4
 8005a9e:	4622      	mov	r2, r4
 8005aa0:	6933      	ldr	r3, [r6, #16]
 8005aa2:	4423      	add	r3, r4
 8005aa4:	341c      	adds	r4, #28
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	b123      	cbz	r3, 8005ab4 <ai_platform_get_activations_map+0x9c>
 8005aaa:	3201      	adds	r2, #1
 8005aac:	f845 3f04 	str.w	r3, [r5, #4]!
 8005ab0:	4297      	cmp	r7, r2
 8005ab2:	d8f5      	bhi.n	8005aa0 <ai_platform_get_activations_map+0x88>
 8005ab4:	1abc      	subs	r4, r7, r2
 8005ab6:	fab4 f484 	clz	r4, r4
 8005aba:	0964      	lsrs	r4, r4, #5
 8005abc:	e7b9      	b.n	8005a32 <ai_platform_get_activations_map+0x1a>
 8005abe:	428f      	cmp	r7, r1
 8005ac0:	d1b7      	bne.n	8005a32 <ai_platform_get_activations_map+0x1a>
 8005ac2:	e7e0      	b.n	8005a86 <ai_platform_get_activations_map+0x6e>
 8005ac4:	a1facade 	.word	0xa1facade

08005ac8 <ai_platform_bind_network_params>:
 8005ac8:	2a00      	cmp	r2, #0
 8005aca:	bf18      	it	ne
 8005acc:	2900      	cmpne	r1, #0
 8005ace:	d010      	beq.n	8005af2 <ai_platform_bind_network_params+0x2a>
 8005ad0:	b178      	cbz	r0, 8005af2 <ai_platform_bind_network_params+0x2a>
 8005ad2:	4603      	mov	r3, r0
 8005ad4:	4808      	ldr	r0, [pc, #32]	; (8005af8 <ai_platform_bind_network_params+0x30>)
 8005ad6:	f103 0c0c 	add.w	ip, r3, #12
 8005ada:	f843 0b04 	str.w	r0, [r3], #4
 8005ade:	c903      	ldmia	r1, {r0, r1}
 8005ae0:	e883 0003 	stmia.w	r3, {r0, r1}
 8005ae4:	2301      	movs	r3, #1
 8005ae6:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005aea:	e88c 0003 	stmia.w	ip, {r0, r1}
 8005aee:	4618      	mov	r0, r3
 8005af0:	4770      	bx	lr
 8005af2:	2300      	movs	r3, #0
 8005af4:	4618      	mov	r0, r3
 8005af6:	4770      	bx	lr
 8005af8:	a1facade 	.word	0xa1facade

08005afc <ai_platform_network_get_error>:
 8005afc:	b510      	push	{r4, lr}
 8005afe:	2800      	cmp	r0, #0
 8005b00:	d03f      	beq.n	8005b82 <ai_platform_network_get_error+0x86>
 8005b02:	4b7d      	ldr	r3, [pc, #500]	; (8005cf8 <ai_platform_network_get_error+0x1fc>)
 8005b04:	4604      	mov	r4, r0
 8005b06:	6802      	ldr	r2, [r0, #0]
 8005b08:	429a      	cmp	r2, r3
 8005b0a:	d13a      	bne.n	8005b82 <ai_platform_network_get_error+0x86>
 8005b0c:	f7ff ff28 	bl	8005960 <_ai_platform_acquire_crc>
 8005b10:	4b7a      	ldr	r3, [pc, #488]	; (8005cfc <ai_platform_network_get_error+0x200>)
 8005b12:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b1c:	189a      	adds	r2, r3, r2
 8005b1e:	2a01      	cmp	r2, #1
 8005b20:	f240 8086 	bls.w	8005c30 <ai_platform_network_get_error+0x134>
 8005b24:	f240 4249 	movw	r2, #1097	; 0x449
 8005b28:	4293      	cmp	r3, r2
 8005b2a:	f000 8081 	beq.w	8005c30 <ai_platform_network_get_error+0x134>
 8005b2e:	4a74      	ldr	r2, [pc, #464]	; (8005d00 <ai_platform_network_get_error+0x204>)
 8005b30:	6813      	ldr	r3, [r2, #0]
 8005b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b36:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005b3a:	f000 8087 	beq.w	8005c4c <ai_platform_network_get_error+0x150>
 8005b3e:	6813      	ldr	r3, [r2, #0]
 8005b40:	f240 4183 	movw	r1, #1155	; 0x483
 8005b44:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b48:	428b      	cmp	r3, r1
 8005b4a:	f000 80a9 	beq.w	8005ca0 <ai_platform_network_get_error+0x1a4>
 8005b4e:	6813      	ldr	r3, [r2, #0]
 8005b50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b54:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005b58:	f000 80c0 	beq.w	8005cdc <ai_platform_network_get_error+0x1e0>
 8005b5c:	6813      	ldr	r3, [r2, #0]
 8005b5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	f040 8082 	bne.w	8005c6c <ai_platform_network_get_error+0x170>
 8005b68:	4a66      	ldr	r2, [pc, #408]	; (8005d04 <ai_platform_network_get_error+0x208>)
 8005b6a:	2301      	movs	r3, #1
 8005b6c:	6093      	str	r3, [r2, #8]
 8005b6e:	6893      	ldr	r3, [r2, #8]
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d1fc      	bne.n	8005b6e <ai_platform_network_get_error+0x72>
 8005b74:	4964      	ldr	r1, [pc, #400]	; (8005d08 <ai_platform_network_get_error+0x20c>)
 8005b76:	4b65      	ldr	r3, [pc, #404]	; (8005d0c <ai_platform_network_get_error+0x210>)
 8005b78:	6011      	str	r1, [r2, #0]
 8005b7a:	6812      	ldr	r2, [r2, #0]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d075      	beq.n	8005c6c <ai_platform_network_get_error+0x170>
 8005b80:	e7fe      	b.n	8005b80 <ai_platform_network_get_error+0x84>
 8005b82:	f7ff feed 	bl	8005960 <_ai_platform_acquire_crc>
 8005b86:	4b5d      	ldr	r3, [pc, #372]	; (8005cfc <ai_platform_network_get_error+0x200>)
 8005b88:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005b92:	185a      	adds	r2, r3, r1
 8005b94:	2a01      	cmp	r2, #1
 8005b96:	d929      	bls.n	8005bec <ai_platform_network_get_error+0xf0>
 8005b98:	f240 4249 	movw	r2, #1097	; 0x449
 8005b9c:	4293      	cmp	r3, r2
 8005b9e:	d025      	beq.n	8005bec <ai_platform_network_get_error+0xf0>
 8005ba0:	4a57      	ldr	r2, [pc, #348]	; (8005d00 <ai_platform_network_get_error+0x204>)
 8005ba2:	6813      	ldr	r3, [r2, #0]
 8005ba4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ba8:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005bac:	d02b      	beq.n	8005c06 <ai_platform_network_get_error+0x10a>
 8005bae:	6813      	ldr	r3, [r2, #0]
 8005bb0:	f240 4183 	movw	r1, #1155	; 0x483
 8005bb4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bb8:	428b      	cmp	r3, r1
 8005bba:	d060      	beq.n	8005c7e <ai_platform_network_get_error+0x182>
 8005bbc:	6813      	ldr	r3, [r2, #0]
 8005bbe:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bc2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005bc6:	d07c      	beq.n	8005cc2 <ai_platform_network_get_error+0x1c6>
 8005bc8:	6813      	ldr	r3, [r2, #0]
 8005bca:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d129      	bne.n	8005c26 <ai_platform_network_get_error+0x12a>
 8005bd2:	4a4c      	ldr	r2, [pc, #304]	; (8005d04 <ai_platform_network_get_error+0x208>)
 8005bd4:	2301      	movs	r3, #1
 8005bd6:	6093      	str	r3, [r2, #8]
 8005bd8:	6893      	ldr	r3, [r2, #8]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d1fc      	bne.n	8005bd8 <ai_platform_network_get_error+0xdc>
 8005bde:	494a      	ldr	r1, [pc, #296]	; (8005d08 <ai_platform_network_get_error+0x20c>)
 8005be0:	4b4a      	ldr	r3, [pc, #296]	; (8005d0c <ai_platform_network_get_error+0x210>)
 8005be2:	6011      	str	r1, [r2, #0]
 8005be4:	6812      	ldr	r2, [r2, #0]
 8005be6:	429a      	cmp	r2, r3
 8005be8:	d01d      	beq.n	8005c26 <ai_platform_network_get_error+0x12a>
 8005bea:	e7fe      	b.n	8005bea <ai_platform_network_get_error+0xee>
 8005bec:	4a45      	ldr	r2, [pc, #276]	; (8005d04 <ai_platform_network_get_error+0x208>)
 8005bee:	2301      	movs	r3, #1
 8005bf0:	6093      	str	r3, [r2, #8]
 8005bf2:	6893      	ldr	r3, [r2, #8]
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d1fc      	bne.n	8005bf2 <ai_platform_network_get_error+0xf6>
 8005bf8:	4943      	ldr	r1, [pc, #268]	; (8005d08 <ai_platform_network_get_error+0x20c>)
 8005bfa:	4b44      	ldr	r3, [pc, #272]	; (8005d0c <ai_platform_network_get_error+0x210>)
 8005bfc:	6011      	str	r1, [r2, #0]
 8005bfe:	6812      	ldr	r2, [r2, #0]
 8005c00:	429a      	cmp	r2, r3
 8005c02:	d010      	beq.n	8005c26 <ai_platform_network_get_error+0x12a>
 8005c04:	e7fe      	b.n	8005c04 <ai_platform_network_get_error+0x108>
 8005c06:	4a42      	ldr	r2, [pc, #264]	; (8005d10 <ai_platform_network_get_error+0x214>)
 8005c08:	2301      	movs	r3, #1
 8005c0a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005c0e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	d1fb      	bne.n	8005c0e <ai_platform_network_get_error+0x112>
 8005c16:	493c      	ldr	r1, [pc, #240]	; (8005d08 <ai_platform_network_get_error+0x20c>)
 8005c18:	4b3c      	ldr	r3, [pc, #240]	; (8005d0c <ai_platform_network_get_error+0x210>)
 8005c1a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005c1e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005c22:	429a      	cmp	r2, r3
 8005c24:	d111      	bne.n	8005c4a <ai_platform_network_get_error+0x14e>
 8005c26:	f7ff fe9d 	bl	8005964 <_ai_platform_release_crc>
 8005c2a:	f241 0010 	movw	r0, #4112	; 0x1010
 8005c2e:	bd10      	pop	{r4, pc}
 8005c30:	4a34      	ldr	r2, [pc, #208]	; (8005d04 <ai_platform_network_get_error+0x208>)
 8005c32:	2301      	movs	r3, #1
 8005c34:	6093      	str	r3, [r2, #8]
 8005c36:	6893      	ldr	r3, [r2, #8]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d1fc      	bne.n	8005c36 <ai_platform_network_get_error+0x13a>
 8005c3c:	4932      	ldr	r1, [pc, #200]	; (8005d08 <ai_platform_network_get_error+0x20c>)
 8005c3e:	4b33      	ldr	r3, [pc, #204]	; (8005d0c <ai_platform_network_get_error+0x210>)
 8005c40:	6011      	str	r1, [r2, #0]
 8005c42:	6812      	ldr	r2, [r2, #0]
 8005c44:	429a      	cmp	r2, r3
 8005c46:	d011      	beq.n	8005c6c <ai_platform_network_get_error+0x170>
 8005c48:	e7fe      	b.n	8005c48 <ai_platform_network_get_error+0x14c>
 8005c4a:	e7fe      	b.n	8005c4a <ai_platform_network_get_error+0x14e>
 8005c4c:	4a30      	ldr	r2, [pc, #192]	; (8005d10 <ai_platform_network_get_error+0x214>)
 8005c4e:	2301      	movs	r3, #1
 8005c50:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005c54:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d1fb      	bne.n	8005c54 <ai_platform_network_get_error+0x158>
 8005c5c:	492a      	ldr	r1, [pc, #168]	; (8005d08 <ai_platform_network_get_error+0x20c>)
 8005c5e:	4b2b      	ldr	r3, [pc, #172]	; (8005d0c <ai_platform_network_get_error+0x210>)
 8005c60:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005c64:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005c68:	429a      	cmp	r2, r3
 8005c6a:	d107      	bne.n	8005c7c <ai_platform_network_get_error+0x180>
 8005c6c:	f7ff fe7a 	bl	8005964 <_ai_platform_release_crc>
 8005c70:	f104 0010 	add.w	r0, r4, #16
 8005c74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005c78:	f001 bd00 	b.w	800767c <core_get_error>
 8005c7c:	e7fe      	b.n	8005c7c <ai_platform_network_get_error+0x180>
 8005c7e:	4a24      	ldr	r2, [pc, #144]	; (8005d10 <ai_platform_network_get_error+0x214>)
 8005c80:	2301      	movs	r3, #1
 8005c82:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005c86:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d1fb      	bne.n	8005c86 <ai_platform_network_get_error+0x18a>
 8005c8e:	491e      	ldr	r1, [pc, #120]	; (8005d08 <ai_platform_network_get_error+0x20c>)
 8005c90:	4b1e      	ldr	r3, [pc, #120]	; (8005d0c <ai_platform_network_get_error+0x210>)
 8005c92:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005c96:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d0c3      	beq.n	8005c26 <ai_platform_network_get_error+0x12a>
 8005c9e:	e7fe      	b.n	8005c9e <ai_platform_network_get_error+0x1a2>
 8005ca0:	4a1b      	ldr	r2, [pc, #108]	; (8005d10 <ai_platform_network_get_error+0x214>)
 8005ca2:	2301      	movs	r3, #1
 8005ca4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ca8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d1fb      	bne.n	8005ca8 <ai_platform_network_get_error+0x1ac>
 8005cb0:	4915      	ldr	r1, [pc, #84]	; (8005d08 <ai_platform_network_get_error+0x20c>)
 8005cb2:	4b16      	ldr	r3, [pc, #88]	; (8005d0c <ai_platform_network_get_error+0x210>)
 8005cb4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005cb8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d0d5      	beq.n	8005c6c <ai_platform_network_get_error+0x170>
 8005cc0:	e7fe      	b.n	8005cc0 <ai_platform_network_get_error+0x1c4>
 8005cc2:	4a10      	ldr	r2, [pc, #64]	; (8005d04 <ai_platform_network_get_error+0x208>)
 8005cc4:	2301      	movs	r3, #1
 8005cc6:	6093      	str	r3, [r2, #8]
 8005cc8:	6893      	ldr	r3, [r2, #8]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d1fc      	bne.n	8005cc8 <ai_platform_network_get_error+0x1cc>
 8005cce:	490e      	ldr	r1, [pc, #56]	; (8005d08 <ai_platform_network_get_error+0x20c>)
 8005cd0:	4b0e      	ldr	r3, [pc, #56]	; (8005d0c <ai_platform_network_get_error+0x210>)
 8005cd2:	6011      	str	r1, [r2, #0]
 8005cd4:	6812      	ldr	r2, [r2, #0]
 8005cd6:	429a      	cmp	r2, r3
 8005cd8:	d0a5      	beq.n	8005c26 <ai_platform_network_get_error+0x12a>
 8005cda:	e7fe      	b.n	8005cda <ai_platform_network_get_error+0x1de>
 8005cdc:	4a09      	ldr	r2, [pc, #36]	; (8005d04 <ai_platform_network_get_error+0x208>)
 8005cde:	2301      	movs	r3, #1
 8005ce0:	6093      	str	r3, [r2, #8]
 8005ce2:	6893      	ldr	r3, [r2, #8]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d1fc      	bne.n	8005ce2 <ai_platform_network_get_error+0x1e6>
 8005ce8:	4907      	ldr	r1, [pc, #28]	; (8005d08 <ai_platform_network_get_error+0x20c>)
 8005cea:	4b08      	ldr	r3, [pc, #32]	; (8005d0c <ai_platform_network_get_error+0x210>)
 8005cec:	6011      	str	r1, [r2, #0]
 8005cee:	6812      	ldr	r2, [r2, #0]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d0bb      	beq.n	8005c6c <ai_platform_network_get_error+0x170>
 8005cf4:	e7fe      	b.n	8005cf4 <ai_platform_network_get_error+0x1f8>
 8005cf6:	bf00      	nop
 8005cf8:	a1c00100 	.word	0xa1c00100
 8005cfc:	e0042000 	.word	0xe0042000
 8005d00:	5c001000 	.word	0x5c001000
 8005d04:	40023000 	.word	0x40023000
 8005d08:	f407a5c2 	.word	0xf407a5c2
 8005d0c:	b5e8b5cd 	.word	0xb5e8b5cd
 8005d10:	58024000 	.word	0x58024000

08005d14 <ai_platform_network_set_error>:
 8005d14:	b110      	cbz	r0, 8005d1c <ai_platform_network_set_error+0x8>
 8005d16:	3010      	adds	r0, #16
 8005d18:	f001 bcb6 	b.w	8007688 <core_set_error>
 8005d1c:	4770      	bx	lr
 8005d1e:	bf00      	nop

08005d20 <ai_platform_inputs_get>:
 8005d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005d24:	b085      	sub	sp, #20
 8005d26:	9102      	str	r1, [sp, #8]
 8005d28:	2800      	cmp	r0, #0
 8005d2a:	f000 8093 	beq.w	8005e54 <ai_platform_inputs_get+0x134>
 8005d2e:	4baa      	ldr	r3, [pc, #680]	; (8005fd8 <ai_platform_inputs_get+0x2b8>)
 8005d30:	4681      	mov	r9, r0
 8005d32:	6802      	ldr	r2, [r0, #0]
 8005d34:	429a      	cmp	r2, r3
 8005d36:	f040 808d 	bne.w	8005e54 <ai_platform_inputs_get+0x134>
 8005d3a:	f7ff fe11 	bl	8005960 <_ai_platform_acquire_crc>
 8005d3e:	4ba7      	ldr	r3, [pc, #668]	; (8005fdc <ai_platform_inputs_get+0x2bc>)
 8005d40:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d4a:	189a      	adds	r2, r3, r2
 8005d4c:	2a01      	cmp	r2, #1
 8005d4e:	f240 80da 	bls.w	8005f06 <ai_platform_inputs_get+0x1e6>
 8005d52:	f240 4249 	movw	r2, #1097	; 0x449
 8005d56:	4293      	cmp	r3, r2
 8005d58:	f000 80d5 	beq.w	8005f06 <ai_platform_inputs_get+0x1e6>
 8005d5c:	4aa0      	ldr	r2, [pc, #640]	; (8005fe0 <ai_platform_inputs_get+0x2c0>)
 8005d5e:	6813      	ldr	r3, [r2, #0]
 8005d60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d64:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005d68:	f000 80dc 	beq.w	8005f24 <ai_platform_inputs_get+0x204>
 8005d6c:	6813      	ldr	r3, [r2, #0]
 8005d6e:	f240 4183 	movw	r1, #1155	; 0x483
 8005d72:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d76:	428b      	cmp	r3, r1
 8005d78:	f000 810e 	beq.w	8005f98 <ai_platform_inputs_get+0x278>
 8005d7c:	6813      	ldr	r3, [r2, #0]
 8005d7e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d82:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005d86:	f000 8143 	beq.w	8006010 <ai_platform_inputs_get+0x2f0>
 8005d8a:	6813      	ldr	r3, [r2, #0]
 8005d8c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f000 8113 	beq.w	8005fbc <ai_platform_inputs_get+0x29c>
 8005d96:	f7ff fde5 	bl	8005964 <_ai_platform_release_crc>
 8005d9a:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	f000 80d2 	beq.w	8005f48 <ai_platform_inputs_get+0x228>
 8005da4:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 8005da8:	f1ba 0f00 	cmp.w	sl, #0
 8005dac:	f000 80cc 	beq.w	8005f48 <ai_platform_inputs_get+0x228>
 8005db0:	2100      	movs	r1, #0
 8005db2:	f8cd 900c 	str.w	r9, [sp, #12]
 8005db6:	460d      	mov	r5, r1
 8005db8:	4689      	mov	r9, r1
 8005dba:	e016      	b.n	8005dea <ai_platform_inputs_get+0xca>
 8005dbc:	9a01      	ldr	r2, [sp, #4]
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f848 3002 	str.w	r3, [r8, r2]
 8005dc4:	69b2      	ldr	r2, [r6, #24]
 8005dc6:	f04f 0301 	mov.w	r3, #1
 8005dca:	6856      	ldr	r6, [r2, #4]
 8005dcc:	3501      	adds	r5, #1
 8005dce:	f109 091c 	add.w	r9, r9, #28
 8005dd2:	7523      	strb	r3, [r4, #20]
 8005dd4:	2300      	movs	r3, #0
 8005dd6:	6962      	ldr	r2, [r4, #20]
 8005dd8:	60a7      	str	r7, [r4, #8]
 8005dda:	f36b 221f 	bfi	r2, fp, #8, #24
 8005dde:	6126      	str	r6, [r4, #16]
 8005de0:	61a1      	str	r1, [r4, #24]
 8005de2:	60e3      	str	r3, [r4, #12]
 8005de4:	6162      	str	r2, [r4, #20]
 8005de6:	e9c4 0c00 	strd	r0, ip, [r4]
 8005dea:	f8ba 3000 	ldrh.w	r3, [sl]
 8005dee:	b2ac      	uxth	r4, r5
 8005df0:	42ab      	cmp	r3, r5
 8005df2:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8005df6:	9301      	str	r3, [sp, #4]
 8005df8:	f240 80b5 	bls.w	8005f66 <ai_platform_inputs_get+0x246>
 8005dfc:	f8da 3004 	ldr.w	r3, [sl, #4]
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	f000 80b0 	beq.w	8005f66 <ai_platform_inputs_get+0x246>
 8005e06:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 8005e0a:	2e00      	cmp	r6, #0
 8005e0c:	f000 80ab 	beq.w	8005f66 <ai_platform_inputs_get+0x246>
 8005e10:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005e14:	69b2      	ldr	r2, [r6, #24]
 8005e16:	68f1      	ldr	r1, [r6, #12]
 8005e18:	6810      	ldr	r0, [r2, #0]
 8005e1a:	9100      	str	r1, [sp, #0]
 8005e1c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8005e20:	68b3      	ldr	r3, [r6, #8]
 8005e22:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8005e26:	444c      	add	r4, r9
 8005e28:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 8005e2c:	f7ff fc14 	bl	8005658 <ai_array_to_buffer_fmt>
 8005e30:	69b2      	ldr	r2, [r6, #24]
 8005e32:	9900      	ldr	r1, [sp, #0]
 8005e34:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8005e38:	2f00      	cmp	r7, #0
 8005e3a:	d0c4      	beq.n	8005dc6 <ai_platform_inputs_get+0xa6>
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8005e42:	6832      	ldr	r2, [r6, #0]
 8005e44:	607a      	str	r2, [r7, #4]
 8005e46:	b112      	cbz	r2, 8005e4e <ai_platform_inputs_get+0x12e>
 8005e48:	8852      	ldrh	r2, [r2, #2]
 8005e4a:	2a00      	cmp	r2, #0
 8005e4c:	d1b6      	bne.n	8005dbc <ai_platform_inputs_get+0x9c>
 8005e4e:	69b2      	ldr	r2, [r6, #24]
 8005e50:	2700      	movs	r7, #0
 8005e52:	e7b8      	b.n	8005dc6 <ai_platform_inputs_get+0xa6>
 8005e54:	f7ff fd84 	bl	8005960 <_ai_platform_acquire_crc>
 8005e58:	4b60      	ldr	r3, [pc, #384]	; (8005fdc <ai_platform_inputs_get+0x2bc>)
 8005e5a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e64:	185a      	adds	r2, r3, r1
 8005e66:	2a01      	cmp	r2, #1
 8005e68:	d92a      	bls.n	8005ec0 <ai_platform_inputs_get+0x1a0>
 8005e6a:	f240 4249 	movw	r2, #1097	; 0x449
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d026      	beq.n	8005ec0 <ai_platform_inputs_get+0x1a0>
 8005e72:	4a5b      	ldr	r2, [pc, #364]	; (8005fe0 <ai_platform_inputs_get+0x2c0>)
 8005e74:	6813      	ldr	r3, [r2, #0]
 8005e76:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e7a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8005e7e:	d02c      	beq.n	8005eda <ai_platform_inputs_get+0x1ba>
 8005e80:	6813      	ldr	r3, [r2, #0]
 8005e82:	f240 4183 	movw	r1, #1155	; 0x483
 8005e86:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e8a:	428b      	cmp	r3, r1
 8005e8c:	d073      	beq.n	8005f76 <ai_platform_inputs_get+0x256>
 8005e8e:	6813      	ldr	r3, [r2, #0]
 8005e90:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005e94:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8005e98:	f000 80ac 	beq.w	8005ff4 <ai_platform_inputs_get+0x2d4>
 8005e9c:	6813      	ldr	r3, [r2, #0]
 8005e9e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d129      	bne.n	8005efa <ai_platform_inputs_get+0x1da>
 8005ea6:	4a4f      	ldr	r2, [pc, #316]	; (8005fe4 <ai_platform_inputs_get+0x2c4>)
 8005ea8:	2301      	movs	r3, #1
 8005eaa:	6093      	str	r3, [r2, #8]
 8005eac:	6893      	ldr	r3, [r2, #8]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d1fc      	bne.n	8005eac <ai_platform_inputs_get+0x18c>
 8005eb2:	494d      	ldr	r1, [pc, #308]	; (8005fe8 <ai_platform_inputs_get+0x2c8>)
 8005eb4:	4b4d      	ldr	r3, [pc, #308]	; (8005fec <ai_platform_inputs_get+0x2cc>)
 8005eb6:	6011      	str	r1, [r2, #0]
 8005eb8:	6812      	ldr	r2, [r2, #0]
 8005eba:	429a      	cmp	r2, r3
 8005ebc:	d01d      	beq.n	8005efa <ai_platform_inputs_get+0x1da>
 8005ebe:	e7fe      	b.n	8005ebe <ai_platform_inputs_get+0x19e>
 8005ec0:	4a48      	ldr	r2, [pc, #288]	; (8005fe4 <ai_platform_inputs_get+0x2c4>)
 8005ec2:	2301      	movs	r3, #1
 8005ec4:	6093      	str	r3, [r2, #8]
 8005ec6:	6893      	ldr	r3, [r2, #8]
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d1fc      	bne.n	8005ec6 <ai_platform_inputs_get+0x1a6>
 8005ecc:	4946      	ldr	r1, [pc, #280]	; (8005fe8 <ai_platform_inputs_get+0x2c8>)
 8005ece:	4b47      	ldr	r3, [pc, #284]	; (8005fec <ai_platform_inputs_get+0x2cc>)
 8005ed0:	6011      	str	r1, [r2, #0]
 8005ed2:	6812      	ldr	r2, [r2, #0]
 8005ed4:	429a      	cmp	r2, r3
 8005ed6:	d010      	beq.n	8005efa <ai_platform_inputs_get+0x1da>
 8005ed8:	e7fe      	b.n	8005ed8 <ai_platform_inputs_get+0x1b8>
 8005eda:	4a45      	ldr	r2, [pc, #276]	; (8005ff0 <ai_platform_inputs_get+0x2d0>)
 8005edc:	2301      	movs	r3, #1
 8005ede:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005ee2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d1fb      	bne.n	8005ee2 <ai_platform_inputs_get+0x1c2>
 8005eea:	493f      	ldr	r1, [pc, #252]	; (8005fe8 <ai_platform_inputs_get+0x2c8>)
 8005eec:	4b3f      	ldr	r3, [pc, #252]	; (8005fec <ai_platform_inputs_get+0x2cc>)
 8005eee:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005ef2:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005ef6:	429a      	cmp	r2, r3
 8005ef8:	d113      	bne.n	8005f22 <ai_platform_inputs_get+0x202>
 8005efa:	f7ff fd33 	bl	8005964 <_ai_platform_release_crc>
 8005efe:	2000      	movs	r0, #0
 8005f00:	b005      	add	sp, #20
 8005f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f06:	4a37      	ldr	r2, [pc, #220]	; (8005fe4 <ai_platform_inputs_get+0x2c4>)
 8005f08:	2301      	movs	r3, #1
 8005f0a:	6093      	str	r3, [r2, #8]
 8005f0c:	6893      	ldr	r3, [r2, #8]
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d1fc      	bne.n	8005f0c <ai_platform_inputs_get+0x1ec>
 8005f12:	4b35      	ldr	r3, [pc, #212]	; (8005fe8 <ai_platform_inputs_get+0x2c8>)
 8005f14:	6013      	str	r3, [r2, #0]
 8005f16:	4b35      	ldr	r3, [pc, #212]	; (8005fec <ai_platform_inputs_get+0x2cc>)
 8005f18:	6812      	ldr	r2, [r2, #0]
 8005f1a:	429a      	cmp	r2, r3
 8005f1c:	f43f af3b 	beq.w	8005d96 <ai_platform_inputs_get+0x76>
 8005f20:	e7fe      	b.n	8005f20 <ai_platform_inputs_get+0x200>
 8005f22:	e7fe      	b.n	8005f22 <ai_platform_inputs_get+0x202>
 8005f24:	4a32      	ldr	r2, [pc, #200]	; (8005ff0 <ai_platform_inputs_get+0x2d0>)
 8005f26:	2301      	movs	r3, #1
 8005f28:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005f2c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d1fb      	bne.n	8005f2c <ai_platform_inputs_get+0x20c>
 8005f34:	4b2c      	ldr	r3, [pc, #176]	; (8005fe8 <ai_platform_inputs_get+0x2c8>)
 8005f36:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005f3a:	4b2c      	ldr	r3, [pc, #176]	; (8005fec <ai_platform_inputs_get+0x2cc>)
 8005f3c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005f40:	429a      	cmp	r2, r3
 8005f42:	f43f af28 	beq.w	8005d96 <ai_platform_inputs_get+0x76>
 8005f46:	e7fe      	b.n	8005f46 <ai_platform_inputs_get+0x226>
 8005f48:	2400      	movs	r4, #0
 8005f4a:	2218      	movs	r2, #24
 8005f4c:	2111      	movs	r1, #17
 8005f4e:	f109 0010 	add.w	r0, r9, #16
 8005f52:	f001 fb99 	bl	8007688 <core_set_error>
 8005f56:	4620      	mov	r0, r4
 8005f58:	9b02      	ldr	r3, [sp, #8]
 8005f5a:	2b00      	cmp	r3, #0
 8005f5c:	d0d0      	beq.n	8005f00 <ai_platform_inputs_get+0x1e0>
 8005f5e:	801c      	strh	r4, [r3, #0]
 8005f60:	b005      	add	sp, #20
 8005f62:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f66:	f8dd 900c 	ldr.w	r9, [sp, #12]
 8005f6a:	2c00      	cmp	r4, #0
 8005f6c:	d0ec      	beq.n	8005f48 <ai_platform_inputs_get+0x228>
 8005f6e:	f8da 3008 	ldr.w	r3, [sl, #8]
 8005f72:	6858      	ldr	r0, [r3, #4]
 8005f74:	e7f0      	b.n	8005f58 <ai_platform_inputs_get+0x238>
 8005f76:	4a1e      	ldr	r2, [pc, #120]	; (8005ff0 <ai_platform_inputs_get+0x2d0>)
 8005f78:	2301      	movs	r3, #1
 8005f7a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005f7e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d1fb      	bne.n	8005f7e <ai_platform_inputs_get+0x25e>
 8005f86:	4918      	ldr	r1, [pc, #96]	; (8005fe8 <ai_platform_inputs_get+0x2c8>)
 8005f88:	4b18      	ldr	r3, [pc, #96]	; (8005fec <ai_platform_inputs_get+0x2cc>)
 8005f8a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8005f8e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005f92:	429a      	cmp	r2, r3
 8005f94:	d0b1      	beq.n	8005efa <ai_platform_inputs_get+0x1da>
 8005f96:	e7fe      	b.n	8005f96 <ai_platform_inputs_get+0x276>
 8005f98:	4a15      	ldr	r2, [pc, #84]	; (8005ff0 <ai_platform_inputs_get+0x2d0>)
 8005f9a:	2301      	movs	r3, #1
 8005f9c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8005fa0:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d1fb      	bne.n	8005fa0 <ai_platform_inputs_get+0x280>
 8005fa8:	4b0f      	ldr	r3, [pc, #60]	; (8005fe8 <ai_platform_inputs_get+0x2c8>)
 8005faa:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8005fae:	4b0f      	ldr	r3, [pc, #60]	; (8005fec <ai_platform_inputs_get+0x2cc>)
 8005fb0:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	f43f aeee 	beq.w	8005d96 <ai_platform_inputs_get+0x76>
 8005fba:	e7fe      	b.n	8005fba <ai_platform_inputs_get+0x29a>
 8005fbc:	4a09      	ldr	r2, [pc, #36]	; (8005fe4 <ai_platform_inputs_get+0x2c4>)
 8005fbe:	2301      	movs	r3, #1
 8005fc0:	6093      	str	r3, [r2, #8]
 8005fc2:	6893      	ldr	r3, [r2, #8]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1fc      	bne.n	8005fc2 <ai_platform_inputs_get+0x2a2>
 8005fc8:	4b07      	ldr	r3, [pc, #28]	; (8005fe8 <ai_platform_inputs_get+0x2c8>)
 8005fca:	6013      	str	r3, [r2, #0]
 8005fcc:	4b07      	ldr	r3, [pc, #28]	; (8005fec <ai_platform_inputs_get+0x2cc>)
 8005fce:	6812      	ldr	r2, [r2, #0]
 8005fd0:	429a      	cmp	r2, r3
 8005fd2:	f43f aee0 	beq.w	8005d96 <ai_platform_inputs_get+0x76>
 8005fd6:	e7fe      	b.n	8005fd6 <ai_platform_inputs_get+0x2b6>
 8005fd8:	a1c00100 	.word	0xa1c00100
 8005fdc:	e0042000 	.word	0xe0042000
 8005fe0:	5c001000 	.word	0x5c001000
 8005fe4:	40023000 	.word	0x40023000
 8005fe8:	f407a5c2 	.word	0xf407a5c2
 8005fec:	b5e8b5cd 	.word	0xb5e8b5cd
 8005ff0:	58024000 	.word	0x58024000
 8005ff4:	4a0d      	ldr	r2, [pc, #52]	; (800602c <ai_platform_inputs_get+0x30c>)
 8005ff6:	2301      	movs	r3, #1
 8005ff8:	6093      	str	r3, [r2, #8]
 8005ffa:	6893      	ldr	r3, [r2, #8]
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d1fc      	bne.n	8005ffa <ai_platform_inputs_get+0x2da>
 8006000:	490b      	ldr	r1, [pc, #44]	; (8006030 <ai_platform_inputs_get+0x310>)
 8006002:	4b0c      	ldr	r3, [pc, #48]	; (8006034 <ai_platform_inputs_get+0x314>)
 8006004:	6011      	str	r1, [r2, #0]
 8006006:	6812      	ldr	r2, [r2, #0]
 8006008:	429a      	cmp	r2, r3
 800600a:	f43f af76 	beq.w	8005efa <ai_platform_inputs_get+0x1da>
 800600e:	e7fe      	b.n	800600e <ai_platform_inputs_get+0x2ee>
 8006010:	4a06      	ldr	r2, [pc, #24]	; (800602c <ai_platform_inputs_get+0x30c>)
 8006012:	2301      	movs	r3, #1
 8006014:	6093      	str	r3, [r2, #8]
 8006016:	6893      	ldr	r3, [r2, #8]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d1fc      	bne.n	8006016 <ai_platform_inputs_get+0x2f6>
 800601c:	4b04      	ldr	r3, [pc, #16]	; (8006030 <ai_platform_inputs_get+0x310>)
 800601e:	6013      	str	r3, [r2, #0]
 8006020:	4b04      	ldr	r3, [pc, #16]	; (8006034 <ai_platform_inputs_get+0x314>)
 8006022:	6812      	ldr	r2, [r2, #0]
 8006024:	429a      	cmp	r2, r3
 8006026:	f43f aeb6 	beq.w	8005d96 <ai_platform_inputs_get+0x76>
 800602a:	e7fe      	b.n	800602a <ai_platform_inputs_get+0x30a>
 800602c:	40023000 	.word	0x40023000
 8006030:	f407a5c2 	.word	0xf407a5c2
 8006034:	b5e8b5cd 	.word	0xb5e8b5cd

08006038 <ai_platform_outputs_get>:
 8006038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800603c:	b085      	sub	sp, #20
 800603e:	9102      	str	r1, [sp, #8]
 8006040:	2800      	cmp	r0, #0
 8006042:	f000 808f 	beq.w	8006164 <ai_platform_outputs_get+0x12c>
 8006046:	4ba8      	ldr	r3, [pc, #672]	; (80062e8 <ai_platform_outputs_get+0x2b0>)
 8006048:	4681      	mov	r9, r0
 800604a:	6802      	ldr	r2, [r0, #0]
 800604c:	429a      	cmp	r2, r3
 800604e:	f040 8089 	bne.w	8006164 <ai_platform_outputs_get+0x12c>
 8006052:	f7ff fc85 	bl	8005960 <_ai_platform_acquire_crc>
 8006056:	4ba5      	ldr	r3, [pc, #660]	; (80062ec <ai_platform_outputs_get+0x2b4>)
 8006058:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006062:	189a      	adds	r2, r3, r2
 8006064:	2a01      	cmp	r2, #1
 8006066:	f240 80d6 	bls.w	8006216 <ai_platform_outputs_get+0x1de>
 800606a:	f240 4249 	movw	r2, #1097	; 0x449
 800606e:	4293      	cmp	r3, r2
 8006070:	f000 80d1 	beq.w	8006216 <ai_platform_outputs_get+0x1de>
 8006074:	4a9e      	ldr	r2, [pc, #632]	; (80062f0 <ai_platform_outputs_get+0x2b8>)
 8006076:	6813      	ldr	r3, [r2, #0]
 8006078:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800607c:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006080:	f000 80d8 	beq.w	8006234 <ai_platform_outputs_get+0x1fc>
 8006084:	6813      	ldr	r3, [r2, #0]
 8006086:	f240 4183 	movw	r1, #1155	; 0x483
 800608a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800608e:	428b      	cmp	r3, r1
 8006090:	f000 8109 	beq.w	80062a6 <ai_platform_outputs_get+0x26e>
 8006094:	6813      	ldr	r3, [r2, #0]
 8006096:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800609a:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800609e:	f000 813f 	beq.w	8006320 <ai_platform_outputs_get+0x2e8>
 80060a2:	6813      	ldr	r3, [r2, #0]
 80060a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	f000 810e 	beq.w	80062ca <ai_platform_outputs_get+0x292>
 80060ae:	f7ff fc59 	bl	8005964 <_ai_platform_release_crc>
 80060b2:	f8b9 302c 	ldrh.w	r3, [r9, #44]	; 0x2c
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	f240 80db 	bls.w	8006272 <ai_platform_outputs_get+0x23a>
 80060bc:	2100      	movs	r1, #0
 80060be:	f8d9 a030 	ldr.w	sl, [r9, #48]	; 0x30
 80060c2:	f8cd 900c 	str.w	r9, [sp, #12]
 80060c6:	460d      	mov	r5, r1
 80060c8:	4689      	mov	r9, r1
 80060ca:	e016      	b.n	80060fa <ai_platform_outputs_get+0xc2>
 80060cc:	9a01      	ldr	r2, [sp, #4]
 80060ce:	2301      	movs	r3, #1
 80060d0:	f848 3002 	str.w	r3, [r8, r2]
 80060d4:	69b2      	ldr	r2, [r6, #24]
 80060d6:	f04f 0301 	mov.w	r3, #1
 80060da:	6856      	ldr	r6, [r2, #4]
 80060dc:	3501      	adds	r5, #1
 80060de:	f109 091c 	add.w	r9, r9, #28
 80060e2:	7523      	strb	r3, [r4, #20]
 80060e4:	2300      	movs	r3, #0
 80060e6:	6962      	ldr	r2, [r4, #20]
 80060e8:	60a7      	str	r7, [r4, #8]
 80060ea:	f36b 221f 	bfi	r2, fp, #8, #24
 80060ee:	6126      	str	r6, [r4, #16]
 80060f0:	61a1      	str	r1, [r4, #24]
 80060f2:	60e3      	str	r3, [r4, #12]
 80060f4:	6162      	str	r2, [r4, #20]
 80060f6:	e9c4 0c00 	strd	r0, ip, [r4]
 80060fa:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 80060fe:	b2ac      	uxth	r4, r5
 8006100:	42ab      	cmp	r3, r5
 8006102:	ea4f 03c5 	mov.w	r3, r5, lsl #3
 8006106:	9301      	str	r3, [sp, #4]
 8006108:	f240 80a6 	bls.w	8006258 <ai_platform_outputs_get+0x220>
 800610c:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 80a1 	beq.w	8006258 <ai_platform_outputs_get+0x220>
 8006116:	f853 6025 	ldr.w	r6, [r3, r5, lsl #2]
 800611a:	2e00      	cmp	r6, #0
 800611c:	f000 809c 	beq.w	8006258 <ai_platform_outputs_get+0x220>
 8006120:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006124:	69b2      	ldr	r2, [r6, #24]
 8006126:	68f1      	ldr	r1, [r6, #12]
 8006128:	6810      	ldr	r0, [r2, #0]
 800612a:	9100      	str	r1, [sp, #0]
 800612c:	e9d3 4801 	ldrd	r4, r8, [r3, #4]
 8006130:	68b3      	ldr	r3, [r6, #8]
 8006132:	eb08 07c5 	add.w	r7, r8, r5, lsl #3
 8006136:	444c      	add	r4, r9
 8006138:	f3c3 2b17 	ubfx	fp, r3, #8, #24
 800613c:	f7ff fa8c 	bl	8005658 <ai_array_to_buffer_fmt>
 8006140:	69b2      	ldr	r2, [r6, #24]
 8006142:	9900      	ldr	r1, [sp, #0]
 8006144:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006148:	2f00      	cmp	r7, #0
 800614a:	d0c4      	beq.n	80060d6 <ai_platform_outputs_get+0x9e>
 800614c:	2200      	movs	r2, #0
 800614e:	f848 2035 	str.w	r2, [r8, r5, lsl #3]
 8006152:	6832      	ldr	r2, [r6, #0]
 8006154:	607a      	str	r2, [r7, #4]
 8006156:	b112      	cbz	r2, 800615e <ai_platform_outputs_get+0x126>
 8006158:	8852      	ldrh	r2, [r2, #2]
 800615a:	2a00      	cmp	r2, #0
 800615c:	d1b6      	bne.n	80060cc <ai_platform_outputs_get+0x94>
 800615e:	69b2      	ldr	r2, [r6, #24]
 8006160:	2700      	movs	r7, #0
 8006162:	e7b8      	b.n	80060d6 <ai_platform_outputs_get+0x9e>
 8006164:	f7ff fbfc 	bl	8005960 <_ai_platform_acquire_crc>
 8006168:	4b60      	ldr	r3, [pc, #384]	; (80062ec <ai_platform_outputs_get+0x2b4>)
 800616a:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006174:	185a      	adds	r2, r3, r1
 8006176:	2a01      	cmp	r2, #1
 8006178:	d92a      	bls.n	80061d0 <ai_platform_outputs_get+0x198>
 800617a:	f240 4249 	movw	r2, #1097	; 0x449
 800617e:	4293      	cmp	r3, r2
 8006180:	d026      	beq.n	80061d0 <ai_platform_outputs_get+0x198>
 8006182:	4a5b      	ldr	r2, [pc, #364]	; (80062f0 <ai_platform_outputs_get+0x2b8>)
 8006184:	6813      	ldr	r3, [r2, #0]
 8006186:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800618a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800618e:	d02c      	beq.n	80061ea <ai_platform_outputs_get+0x1b2>
 8006190:	6813      	ldr	r3, [r2, #0]
 8006192:	f240 4183 	movw	r1, #1155	; 0x483
 8006196:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800619a:	428b      	cmp	r3, r1
 800619c:	d072      	beq.n	8006284 <ai_platform_outputs_get+0x24c>
 800619e:	6813      	ldr	r3, [r2, #0]
 80061a0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061a4:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80061a8:	f000 80ac 	beq.w	8006304 <ai_platform_outputs_get+0x2cc>
 80061ac:	6813      	ldr	r3, [r2, #0]
 80061ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d129      	bne.n	800620a <ai_platform_outputs_get+0x1d2>
 80061b6:	4a4f      	ldr	r2, [pc, #316]	; (80062f4 <ai_platform_outputs_get+0x2bc>)
 80061b8:	2301      	movs	r3, #1
 80061ba:	6093      	str	r3, [r2, #8]
 80061bc:	6893      	ldr	r3, [r2, #8]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1fc      	bne.n	80061bc <ai_platform_outputs_get+0x184>
 80061c2:	494d      	ldr	r1, [pc, #308]	; (80062f8 <ai_platform_outputs_get+0x2c0>)
 80061c4:	4b4d      	ldr	r3, [pc, #308]	; (80062fc <ai_platform_outputs_get+0x2c4>)
 80061c6:	6011      	str	r1, [r2, #0]
 80061c8:	6812      	ldr	r2, [r2, #0]
 80061ca:	429a      	cmp	r2, r3
 80061cc:	d01d      	beq.n	800620a <ai_platform_outputs_get+0x1d2>
 80061ce:	e7fe      	b.n	80061ce <ai_platform_outputs_get+0x196>
 80061d0:	4a48      	ldr	r2, [pc, #288]	; (80062f4 <ai_platform_outputs_get+0x2bc>)
 80061d2:	2301      	movs	r3, #1
 80061d4:	6093      	str	r3, [r2, #8]
 80061d6:	6893      	ldr	r3, [r2, #8]
 80061d8:	2b00      	cmp	r3, #0
 80061da:	d1fc      	bne.n	80061d6 <ai_platform_outputs_get+0x19e>
 80061dc:	4946      	ldr	r1, [pc, #280]	; (80062f8 <ai_platform_outputs_get+0x2c0>)
 80061de:	4b47      	ldr	r3, [pc, #284]	; (80062fc <ai_platform_outputs_get+0x2c4>)
 80061e0:	6011      	str	r1, [r2, #0]
 80061e2:	6812      	ldr	r2, [r2, #0]
 80061e4:	429a      	cmp	r2, r3
 80061e6:	d010      	beq.n	800620a <ai_platform_outputs_get+0x1d2>
 80061e8:	e7fe      	b.n	80061e8 <ai_platform_outputs_get+0x1b0>
 80061ea:	4a45      	ldr	r2, [pc, #276]	; (8006300 <ai_platform_outputs_get+0x2c8>)
 80061ec:	2301      	movs	r3, #1
 80061ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80061f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d1fb      	bne.n	80061f2 <ai_platform_outputs_get+0x1ba>
 80061fa:	493f      	ldr	r1, [pc, #252]	; (80062f8 <ai_platform_outputs_get+0x2c0>)
 80061fc:	4b3f      	ldr	r3, [pc, #252]	; (80062fc <ai_platform_outputs_get+0x2c4>)
 80061fe:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006202:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006206:	429a      	cmp	r2, r3
 8006208:	d113      	bne.n	8006232 <ai_platform_outputs_get+0x1fa>
 800620a:	f7ff fbab 	bl	8005964 <_ai_platform_release_crc>
 800620e:	2000      	movs	r0, #0
 8006210:	b005      	add	sp, #20
 8006212:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006216:	4a37      	ldr	r2, [pc, #220]	; (80062f4 <ai_platform_outputs_get+0x2bc>)
 8006218:	2301      	movs	r3, #1
 800621a:	6093      	str	r3, [r2, #8]
 800621c:	6893      	ldr	r3, [r2, #8]
 800621e:	2b00      	cmp	r3, #0
 8006220:	d1fc      	bne.n	800621c <ai_platform_outputs_get+0x1e4>
 8006222:	4b35      	ldr	r3, [pc, #212]	; (80062f8 <ai_platform_outputs_get+0x2c0>)
 8006224:	6013      	str	r3, [r2, #0]
 8006226:	4b35      	ldr	r3, [pc, #212]	; (80062fc <ai_platform_outputs_get+0x2c4>)
 8006228:	6812      	ldr	r2, [r2, #0]
 800622a:	429a      	cmp	r2, r3
 800622c:	f43f af3f 	beq.w	80060ae <ai_platform_outputs_get+0x76>
 8006230:	e7fe      	b.n	8006230 <ai_platform_outputs_get+0x1f8>
 8006232:	e7fe      	b.n	8006232 <ai_platform_outputs_get+0x1fa>
 8006234:	4a32      	ldr	r2, [pc, #200]	; (8006300 <ai_platform_outputs_get+0x2c8>)
 8006236:	2301      	movs	r3, #1
 8006238:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800623c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006240:	2b00      	cmp	r3, #0
 8006242:	d1fb      	bne.n	800623c <ai_platform_outputs_get+0x204>
 8006244:	4b2c      	ldr	r3, [pc, #176]	; (80062f8 <ai_platform_outputs_get+0x2c0>)
 8006246:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800624a:	4b2c      	ldr	r3, [pc, #176]	; (80062fc <ai_platform_outputs_get+0x2c4>)
 800624c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006250:	429a      	cmp	r2, r3
 8006252:	f43f af2c 	beq.w	80060ae <ai_platform_outputs_get+0x76>
 8006256:	e7fe      	b.n	8006256 <ai_platform_outputs_get+0x21e>
 8006258:	f8dd 900c 	ldr.w	r9, [sp, #12]
 800625c:	b14c      	cbz	r4, 8006272 <ai_platform_outputs_get+0x23a>
 800625e:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006262:	6858      	ldr	r0, [r3, #4]
 8006264:	9b02      	ldr	r3, [sp, #8]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d0d2      	beq.n	8006210 <ai_platform_outputs_get+0x1d8>
 800626a:	801c      	strh	r4, [r3, #0]
 800626c:	b005      	add	sp, #20
 800626e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006272:	2400      	movs	r4, #0
 8006274:	2218      	movs	r2, #24
 8006276:	2111      	movs	r1, #17
 8006278:	f109 0010 	add.w	r0, r9, #16
 800627c:	f001 fa04 	bl	8007688 <core_set_error>
 8006280:	4620      	mov	r0, r4
 8006282:	e7ef      	b.n	8006264 <ai_platform_outputs_get+0x22c>
 8006284:	4a1e      	ldr	r2, [pc, #120]	; (8006300 <ai_platform_outputs_get+0x2c8>)
 8006286:	2301      	movs	r3, #1
 8006288:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800628c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006290:	2b00      	cmp	r3, #0
 8006292:	d1fb      	bne.n	800628c <ai_platform_outputs_get+0x254>
 8006294:	4918      	ldr	r1, [pc, #96]	; (80062f8 <ai_platform_outputs_get+0x2c0>)
 8006296:	4b19      	ldr	r3, [pc, #100]	; (80062fc <ai_platform_outputs_get+0x2c4>)
 8006298:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800629c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80062a0:	429a      	cmp	r2, r3
 80062a2:	d0b2      	beq.n	800620a <ai_platform_outputs_get+0x1d2>
 80062a4:	e7fe      	b.n	80062a4 <ai_platform_outputs_get+0x26c>
 80062a6:	4a16      	ldr	r2, [pc, #88]	; (8006300 <ai_platform_outputs_get+0x2c8>)
 80062a8:	2301      	movs	r3, #1
 80062aa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80062ae:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d1fb      	bne.n	80062ae <ai_platform_outputs_get+0x276>
 80062b6:	4b10      	ldr	r3, [pc, #64]	; (80062f8 <ai_platform_outputs_get+0x2c0>)
 80062b8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80062bc:	4b0f      	ldr	r3, [pc, #60]	; (80062fc <ai_platform_outputs_get+0x2c4>)
 80062be:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80062c2:	429a      	cmp	r2, r3
 80062c4:	f43f aef3 	beq.w	80060ae <ai_platform_outputs_get+0x76>
 80062c8:	e7fe      	b.n	80062c8 <ai_platform_outputs_get+0x290>
 80062ca:	4a0a      	ldr	r2, [pc, #40]	; (80062f4 <ai_platform_outputs_get+0x2bc>)
 80062cc:	2301      	movs	r3, #1
 80062ce:	6093      	str	r3, [r2, #8]
 80062d0:	6893      	ldr	r3, [r2, #8]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d1fc      	bne.n	80062d0 <ai_platform_outputs_get+0x298>
 80062d6:	4b08      	ldr	r3, [pc, #32]	; (80062f8 <ai_platform_outputs_get+0x2c0>)
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	4b08      	ldr	r3, [pc, #32]	; (80062fc <ai_platform_outputs_get+0x2c4>)
 80062dc:	6812      	ldr	r2, [r2, #0]
 80062de:	429a      	cmp	r2, r3
 80062e0:	f43f aee5 	beq.w	80060ae <ai_platform_outputs_get+0x76>
 80062e4:	e7fe      	b.n	80062e4 <ai_platform_outputs_get+0x2ac>
 80062e6:	bf00      	nop
 80062e8:	a1c00100 	.word	0xa1c00100
 80062ec:	e0042000 	.word	0xe0042000
 80062f0:	5c001000 	.word	0x5c001000
 80062f4:	40023000 	.word	0x40023000
 80062f8:	f407a5c2 	.word	0xf407a5c2
 80062fc:	b5e8b5cd 	.word	0xb5e8b5cd
 8006300:	58024000 	.word	0x58024000
 8006304:	4a0d      	ldr	r2, [pc, #52]	; (800633c <ai_platform_outputs_get+0x304>)
 8006306:	2301      	movs	r3, #1
 8006308:	6093      	str	r3, [r2, #8]
 800630a:	6893      	ldr	r3, [r2, #8]
 800630c:	2b00      	cmp	r3, #0
 800630e:	d1fc      	bne.n	800630a <ai_platform_outputs_get+0x2d2>
 8006310:	490b      	ldr	r1, [pc, #44]	; (8006340 <ai_platform_outputs_get+0x308>)
 8006312:	4b0c      	ldr	r3, [pc, #48]	; (8006344 <ai_platform_outputs_get+0x30c>)
 8006314:	6011      	str	r1, [r2, #0]
 8006316:	6812      	ldr	r2, [r2, #0]
 8006318:	429a      	cmp	r2, r3
 800631a:	f43f af76 	beq.w	800620a <ai_platform_outputs_get+0x1d2>
 800631e:	e7fe      	b.n	800631e <ai_platform_outputs_get+0x2e6>
 8006320:	4a06      	ldr	r2, [pc, #24]	; (800633c <ai_platform_outputs_get+0x304>)
 8006322:	2301      	movs	r3, #1
 8006324:	6093      	str	r3, [r2, #8]
 8006326:	6893      	ldr	r3, [r2, #8]
 8006328:	2b00      	cmp	r3, #0
 800632a:	d1fc      	bne.n	8006326 <ai_platform_outputs_get+0x2ee>
 800632c:	4b04      	ldr	r3, [pc, #16]	; (8006340 <ai_platform_outputs_get+0x308>)
 800632e:	6013      	str	r3, [r2, #0]
 8006330:	4b04      	ldr	r3, [pc, #16]	; (8006344 <ai_platform_outputs_get+0x30c>)
 8006332:	6812      	ldr	r2, [r2, #0]
 8006334:	429a      	cmp	r2, r3
 8006336:	f43f aeba 	beq.w	80060ae <ai_platform_outputs_get+0x76>
 800633a:	e7fe      	b.n	800633a <ai_platform_outputs_get+0x302>
 800633c:	40023000 	.word	0x40023000
 8006340:	f407a5c2 	.word	0xf407a5c2
 8006344:	b5e8b5cd 	.word	0xb5e8b5cd

08006348 <ai_platform_network_create>:
 8006348:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800634c:	b083      	sub	sp, #12
 800634e:	4604      	mov	r4, r0
 8006350:	4615      	mov	r5, r2
 8006352:	461e      	mov	r6, r3
 8006354:	f89d 7028 	ldrb.w	r7, [sp, #40]	; 0x28
 8006358:	f89d 802c 	ldrb.w	r8, [sp, #44]	; 0x2c
 800635c:	f7ff fb00 	bl	8005960 <_ai_platform_acquire_crc>
 8006360:	2800      	cmp	r0, #0
 8006362:	f000 80bd 	beq.w	80064e0 <ai_platform_network_create+0x198>
 8006366:	4ba5      	ldr	r3, [pc, #660]	; (80065fc <ai_platform_network_create+0x2b4>)
 8006368:	f46f 6c8a 	mvn.w	ip, #1104	; 0x450
 800636c:	4601      	mov	r1, r0
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006374:	eb03 020c 	add.w	r2, r3, ip
 8006378:	2a01      	cmp	r2, #1
 800637a:	f240 80a8 	bls.w	80064ce <ai_platform_network_create+0x186>
 800637e:	f240 4249 	movw	r2, #1097	; 0x449
 8006382:	4293      	cmp	r3, r2
 8006384:	f000 80a3 	beq.w	80064ce <ai_platform_network_create+0x186>
 8006388:	4a9d      	ldr	r2, [pc, #628]	; (8006600 <ai_platform_network_create+0x2b8>)
 800638a:	6813      	ldr	r3, [r2, #0]
 800638c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006390:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006394:	f000 80b9 	beq.w	800650a <ai_platform_network_create+0x1c2>
 8006398:	6813      	ldr	r3, [r2, #0]
 800639a:	f240 4c83 	movw	ip, #1155	; 0x483
 800639e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063a2:	4563      	cmp	r3, ip
 80063a4:	f000 80a1 	beq.w	80064ea <ai_platform_network_create+0x1a2>
 80063a8:	6813      	ldr	r3, [r2, #0]
 80063aa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063ae:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80063b2:	f000 8153 	beq.w	800665c <ai_platform_network_create+0x314>
 80063b6:	6813      	ldr	r3, [r2, #0]
 80063b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063bc:	2b00      	cmp	r3, #0
 80063be:	f040 808d 	bne.w	80064dc <ai_platform_network_create+0x194>
 80063c2:	4a90      	ldr	r2, [pc, #576]	; (8006604 <ai_platform_network_create+0x2bc>)
 80063c4:	2318      	movs	r3, #24
 80063c6:	6093      	str	r3, [r2, #8]
 80063c8:	6893      	ldr	r3, [r2, #8]
 80063ca:	2b18      	cmp	r3, #24
 80063cc:	f040 8086 	bne.w	80064dc <ai_platform_network_create+0x194>
 80063d0:	2301      	movs	r3, #1
 80063d2:	6093      	str	r3, [r2, #8]
 80063d4:	6893      	ldr	r3, [r2, #8]
 80063d6:	2b00      	cmp	r3, #0
 80063d8:	d1fc      	bne.n	80063d4 <ai_platform_network_create+0x8c>
 80063da:	4608      	mov	r0, r1
 80063dc:	f7ff fac2 	bl	8005964 <_ai_platform_release_crc>
 80063e0:	f7ff fabe 	bl	8005960 <_ai_platform_acquire_crc>
 80063e4:	4b85      	ldr	r3, [pc, #532]	; (80065fc <ai_platform_network_create+0x2b4>)
 80063e6:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80063f0:	189a      	adds	r2, r3, r2
 80063f2:	2a01      	cmp	r2, #1
 80063f4:	f240 809f 	bls.w	8006536 <ai_platform_network_create+0x1ee>
 80063f8:	f240 4249 	movw	r2, #1097	; 0x449
 80063fc:	4293      	cmp	r3, r2
 80063fe:	f000 809a 	beq.w	8006536 <ai_platform_network_create+0x1ee>
 8006402:	4a7f      	ldr	r2, [pc, #508]	; (8006600 <ai_platform_network_create+0x2b8>)
 8006404:	6813      	ldr	r3, [r2, #0]
 8006406:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800640a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800640e:	f000 80a0 	beq.w	8006552 <ai_platform_network_create+0x20a>
 8006412:	6813      	ldr	r3, [r2, #0]
 8006414:	f240 4183 	movw	r1, #1155	; 0x483
 8006418:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800641c:	428b      	cmp	r3, r1
 800641e:	f000 80bf 	beq.w	80065a0 <ai_platform_network_create+0x258>
 8006422:	6813      	ldr	r3, [r2, #0]
 8006424:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006428:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800642c:	f000 8123 	beq.w	8006676 <ai_platform_network_create+0x32e>
 8006430:	6813      	ldr	r3, [r2, #0]
 8006432:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006436:	2b00      	cmp	r3, #0
 8006438:	f000 80c4 	beq.w	80065c4 <ai_platform_network_create+0x27c>
 800643c:	f7ff fa92 	bl	8005964 <_ai_platform_release_crc>
 8006440:	2c00      	cmp	r4, #0
 8006442:	f000 80aa 	beq.w	800659a <ai_platform_network_create+0x252>
 8006446:	4b70      	ldr	r3, [pc, #448]	; (8006608 <ai_platform_network_create+0x2c0>)
 8006448:	602b      	str	r3, [r5, #0]
 800644a:	6025      	str	r5, [r4, #0]
 800644c:	f001 f914 	bl	8007678 <core_init>
 8006450:	2800      	cmp	r0, #0
 8006452:	f000 8090 	beq.w	8006576 <ai_platform_network_create+0x22e>
 8006456:	f7ff fa83 	bl	8005960 <_ai_platform_acquire_crc>
 800645a:	4b68      	ldr	r3, [pc, #416]	; (80065fc <ai_platform_network_create+0x2b4>)
 800645c:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006460:	681b      	ldr	r3, [r3, #0]
 8006462:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006466:	185a      	adds	r2, r3, r1
 8006468:	2a01      	cmp	r2, #1
 800646a:	f240 80b9 	bls.w	80065e0 <ai_platform_network_create+0x298>
 800646e:	f240 4249 	movw	r2, #1097	; 0x449
 8006472:	4293      	cmp	r3, r2
 8006474:	f000 80b4 	beq.w	80065e0 <ai_platform_network_create+0x298>
 8006478:	4a61      	ldr	r2, [pc, #388]	; (8006600 <ai_platform_network_create+0x2b8>)
 800647a:	6813      	ldr	r3, [r2, #0]
 800647c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006480:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006484:	f000 80c8 	beq.w	8006618 <ai_platform_network_create+0x2d0>
 8006488:	6813      	ldr	r3, [r2, #0]
 800648a:	f240 4183 	movw	r1, #1155	; 0x483
 800648e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006492:	428b      	cmp	r3, r1
 8006494:	f000 8107 	beq.w	80066a6 <ai_platform_network_create+0x35e>
 8006498:	6813      	ldr	r3, [r2, #0]
 800649a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800649e:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80064a2:	f000 8111 	beq.w	80066c8 <ai_platform_network_create+0x380>
 80064a6:	6813      	ldr	r3, [r2, #0]
 80064a8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	f040 80c3 	bne.w	8006638 <ai_platform_network_create+0x2f0>
 80064b2:	4b54      	ldr	r3, [pc, #336]	; (8006604 <ai_platform_network_create+0x2bc>)
 80064b4:	2201      	movs	r2, #1
 80064b6:	609a      	str	r2, [r3, #8]
 80064b8:	689a      	ldr	r2, [r3, #8]
 80064ba:	2a00      	cmp	r2, #0
 80064bc:	d1fc      	bne.n	80064b8 <ai_platform_network_create+0x170>
 80064be:	4a53      	ldr	r2, [pc, #332]	; (800660c <ai_platform_network_create+0x2c4>)
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	681a      	ldr	r2, [r3, #0]
 80064c4:	4b52      	ldr	r3, [pc, #328]	; (8006610 <ai_platform_network_create+0x2c8>)
 80064c6:	429a      	cmp	r2, r3
 80064c8:	f000 80b6 	beq.w	8006638 <ai_platform_network_create+0x2f0>
 80064cc:	e7fe      	b.n	80064cc <ai_platform_network_create+0x184>
 80064ce:	4b4d      	ldr	r3, [pc, #308]	; (8006604 <ai_platform_network_create+0x2bc>)
 80064d0:	2218      	movs	r2, #24
 80064d2:	609a      	str	r2, [r3, #8]
 80064d4:	689a      	ldr	r2, [r3, #8]
 80064d6:	2a18      	cmp	r2, #24
 80064d8:	d027      	beq.n	800652a <ai_platform_network_create+0x1e2>
 80064da:	4608      	mov	r0, r1
 80064dc:	f7ff fa42 	bl	8005964 <_ai_platform_release_crc>
 80064e0:	f244 1033 	movw	r0, #16691	; 0x4133
 80064e4:	b003      	add	sp, #12
 80064e6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80064ea:	4a4a      	ldr	r2, [pc, #296]	; (8006614 <ai_platform_network_create+0x2cc>)
 80064ec:	2318      	movs	r3, #24
 80064ee:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80064f2:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80064f6:	2b18      	cmp	r3, #24
 80064f8:	d1f0      	bne.n	80064dc <ai_platform_network_create+0x194>
 80064fa:	2301      	movs	r3, #1
 80064fc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006500:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006504:	2b00      	cmp	r3, #0
 8006506:	d1fb      	bne.n	8006500 <ai_platform_network_create+0x1b8>
 8006508:	e767      	b.n	80063da <ai_platform_network_create+0x92>
 800650a:	4a42      	ldr	r2, [pc, #264]	; (8006614 <ai_platform_network_create+0x2cc>)
 800650c:	2318      	movs	r3, #24
 800650e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006512:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006516:	2b18      	cmp	r3, #24
 8006518:	d1e0      	bne.n	80064dc <ai_platform_network_create+0x194>
 800651a:	2301      	movs	r3, #1
 800651c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006520:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006524:	2b00      	cmp	r3, #0
 8006526:	d1fb      	bne.n	8006520 <ai_platform_network_create+0x1d8>
 8006528:	e757      	b.n	80063da <ai_platform_network_create+0x92>
 800652a:	2201      	movs	r2, #1
 800652c:	609a      	str	r2, [r3, #8]
 800652e:	689a      	ldr	r2, [r3, #8]
 8006530:	2a00      	cmp	r2, #0
 8006532:	d1fc      	bne.n	800652e <ai_platform_network_create+0x1e6>
 8006534:	e751      	b.n	80063da <ai_platform_network_create+0x92>
 8006536:	4a33      	ldr	r2, [pc, #204]	; (8006604 <ai_platform_network_create+0x2bc>)
 8006538:	2301      	movs	r3, #1
 800653a:	6093      	str	r3, [r2, #8]
 800653c:	6891      	ldr	r1, [r2, #8]
 800653e:	2900      	cmp	r1, #0
 8006540:	d1fc      	bne.n	800653c <ai_platform_network_create+0x1f4>
 8006542:	4b32      	ldr	r3, [pc, #200]	; (800660c <ai_platform_network_create+0x2c4>)
 8006544:	6013      	str	r3, [r2, #0]
 8006546:	4b32      	ldr	r3, [pc, #200]	; (8006610 <ai_platform_network_create+0x2c8>)
 8006548:	6812      	ldr	r2, [r2, #0]
 800654a:	429a      	cmp	r2, r3
 800654c:	f43f af76 	beq.w	800643c <ai_platform_network_create+0xf4>
 8006550:	e7fe      	b.n	8006550 <ai_platform_network_create+0x208>
 8006552:	4a30      	ldr	r2, [pc, #192]	; (8006614 <ai_platform_network_create+0x2cc>)
 8006554:	2301      	movs	r3, #1
 8006556:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800655a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800655e:	2b00      	cmp	r3, #0
 8006560:	d1fb      	bne.n	800655a <ai_platform_network_create+0x212>
 8006562:	4b2a      	ldr	r3, [pc, #168]	; (800660c <ai_platform_network_create+0x2c4>)
 8006564:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006568:	4b29      	ldr	r3, [pc, #164]	; (8006610 <ai_platform_network_create+0x2c8>)
 800656a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800656e:	429a      	cmp	r2, r3
 8006570:	f43f af64 	beq.w	800643c <ai_platform_network_create+0xf4>
 8006574:	e7fe      	b.n	8006574 <ai_platform_network_create+0x22c>
 8006576:	f04f 0930 	mov.w	r9, #48	; 0x30
 800657a:	2300      	movs	r3, #0
 800657c:	6023      	str	r3, [r4, #0]
 800657e:	2410      	movs	r4, #16
 8006580:	4642      	mov	r2, r8
 8006582:	4639      	mov	r1, r7
 8006584:	4630      	mov	r0, r6
 8006586:	f002 fd8d 	bl	80090a4 <ai_version_get>
 800658a:	4603      	mov	r3, r0
 800658c:	2000      	movs	r0, #0
 800658e:	64ab      	str	r3, [r5, #72]	; 0x48
 8006590:	f369 0007 	bfi	r0, r9, #0, #8
 8006594:	f364 201f 	bfi	r0, r4, #8, #24
 8006598:	e7a4      	b.n	80064e4 <ai_platform_network_create+0x19c>
 800659a:	f241 0010 	movw	r0, #4112	; 0x1010
 800659e:	e7a1      	b.n	80064e4 <ai_platform_network_create+0x19c>
 80065a0:	4a1c      	ldr	r2, [pc, #112]	; (8006614 <ai_platform_network_create+0x2cc>)
 80065a2:	2301      	movs	r3, #1
 80065a4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80065a8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80065ac:	2b00      	cmp	r3, #0
 80065ae:	d1fb      	bne.n	80065a8 <ai_platform_network_create+0x260>
 80065b0:	4b16      	ldr	r3, [pc, #88]	; (800660c <ai_platform_network_create+0x2c4>)
 80065b2:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80065b6:	4b16      	ldr	r3, [pc, #88]	; (8006610 <ai_platform_network_create+0x2c8>)
 80065b8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80065bc:	429a      	cmp	r2, r3
 80065be:	f43f af3d 	beq.w	800643c <ai_platform_network_create+0xf4>
 80065c2:	e7fe      	b.n	80065c2 <ai_platform_network_create+0x27a>
 80065c4:	4a0f      	ldr	r2, [pc, #60]	; (8006604 <ai_platform_network_create+0x2bc>)
 80065c6:	2301      	movs	r3, #1
 80065c8:	6093      	str	r3, [r2, #8]
 80065ca:	6893      	ldr	r3, [r2, #8]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d1fc      	bne.n	80065ca <ai_platform_network_create+0x282>
 80065d0:	4b0e      	ldr	r3, [pc, #56]	; (800660c <ai_platform_network_create+0x2c4>)
 80065d2:	6013      	str	r3, [r2, #0]
 80065d4:	4b0e      	ldr	r3, [pc, #56]	; (8006610 <ai_platform_network_create+0x2c8>)
 80065d6:	6812      	ldr	r2, [r2, #0]
 80065d8:	429a      	cmp	r2, r3
 80065da:	f43f af2f 	beq.w	800643c <ai_platform_network_create+0xf4>
 80065de:	e7fe      	b.n	80065de <ai_platform_network_create+0x296>
 80065e0:	4a08      	ldr	r2, [pc, #32]	; (8006604 <ai_platform_network_create+0x2bc>)
 80065e2:	2301      	movs	r3, #1
 80065e4:	6093      	str	r3, [r2, #8]
 80065e6:	6893      	ldr	r3, [r2, #8]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d1fc      	bne.n	80065e6 <ai_platform_network_create+0x29e>
 80065ec:	4b07      	ldr	r3, [pc, #28]	; (800660c <ai_platform_network_create+0x2c4>)
 80065ee:	6013      	str	r3, [r2, #0]
 80065f0:	4b07      	ldr	r3, [pc, #28]	; (8006610 <ai_platform_network_create+0x2c8>)
 80065f2:	6812      	ldr	r2, [r2, #0]
 80065f4:	429a      	cmp	r2, r3
 80065f6:	d01f      	beq.n	8006638 <ai_platform_network_create+0x2f0>
 80065f8:	e7fe      	b.n	80065f8 <ai_platform_network_create+0x2b0>
 80065fa:	bf00      	nop
 80065fc:	e0042000 	.word	0xe0042000
 8006600:	5c001000 	.word	0x5c001000
 8006604:	40023000 	.word	0x40023000
 8006608:	a1c00100 	.word	0xa1c00100
 800660c:	f407a5c2 	.word	0xf407a5c2
 8006610:	b5e8b5cd 	.word	0xb5e8b5cd
 8006614:	58024000 	.word	0x58024000
 8006618:	4a33      	ldr	r2, [pc, #204]	; (80066e8 <ai_platform_network_create+0x3a0>)
 800661a:	2301      	movs	r3, #1
 800661c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006620:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006624:	2b00      	cmp	r3, #0
 8006626:	d1fb      	bne.n	8006620 <ai_platform_network_create+0x2d8>
 8006628:	4b30      	ldr	r3, [pc, #192]	; (80066ec <ai_platform_network_create+0x3a4>)
 800662a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800662e:	4b30      	ldr	r3, [pc, #192]	; (80066f0 <ai_platform_network_create+0x3a8>)
 8006630:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006634:	429a      	cmp	r2, r3
 8006636:	d12c      	bne.n	8006692 <ai_platform_network_create+0x34a>
 8006638:	f7ff f994 	bl	8005964 <_ai_platform_release_crc>
 800663c:	2200      	movs	r2, #0
 800663e:	4639      	mov	r1, r7
 8006640:	4630      	mov	r0, r6
 8006642:	f002 fd2f 	bl	80090a4 <ai_version_get>
 8006646:	4681      	mov	r9, r0
 8006648:	2200      	movs	r2, #0
 800664a:	2105      	movs	r1, #5
 800664c:	2001      	movs	r0, #1
 800664e:	f002 fd29 	bl	80090a4 <ai_version_get>
 8006652:	4581      	cmp	r9, r0
 8006654:	d01e      	beq.n	8006694 <ai_platform_network_create+0x34c>
 8006656:	f04f 0901 	mov.w	r9, #1
 800665a:	e78e      	b.n	800657a <ai_platform_network_create+0x232>
 800665c:	4b25      	ldr	r3, [pc, #148]	; (80066f4 <ai_platform_network_create+0x3ac>)
 800665e:	2218      	movs	r2, #24
 8006660:	609a      	str	r2, [r3, #8]
 8006662:	689a      	ldr	r2, [r3, #8]
 8006664:	2a18      	cmp	r2, #24
 8006666:	f47f af39 	bne.w	80064dc <ai_platform_network_create+0x194>
 800666a:	2201      	movs	r2, #1
 800666c:	609a      	str	r2, [r3, #8]
 800666e:	689a      	ldr	r2, [r3, #8]
 8006670:	2a00      	cmp	r2, #0
 8006672:	d1fc      	bne.n	800666e <ai_platform_network_create+0x326>
 8006674:	e6b1      	b.n	80063da <ai_platform_network_create+0x92>
 8006676:	4a1f      	ldr	r2, [pc, #124]	; (80066f4 <ai_platform_network_create+0x3ac>)
 8006678:	2301      	movs	r3, #1
 800667a:	6093      	str	r3, [r2, #8]
 800667c:	6893      	ldr	r3, [r2, #8]
 800667e:	2b00      	cmp	r3, #0
 8006680:	d1fc      	bne.n	800667c <ai_platform_network_create+0x334>
 8006682:	4b1a      	ldr	r3, [pc, #104]	; (80066ec <ai_platform_network_create+0x3a4>)
 8006684:	6013      	str	r3, [r2, #0]
 8006686:	4b1a      	ldr	r3, [pc, #104]	; (80066f0 <ai_platform_network_create+0x3a8>)
 8006688:	6812      	ldr	r2, [r2, #0]
 800668a:	429a      	cmp	r2, r3
 800668c:	f43f aed6 	beq.w	800643c <ai_platform_network_create+0xf4>
 8006690:	e7fe      	b.n	8006690 <ai_platform_network_create+0x348>
 8006692:	e7fe      	b.n	8006692 <ai_platform_network_create+0x34a>
 8006694:	4b18      	ldr	r3, [pc, #96]	; (80066f8 <ai_platform_network_create+0x3b0>)
 8006696:	a801      	add	r0, sp, #4
 8006698:	9301      	str	r3, [sp, #4]
 800669a:	f001 f80f 	bl	80076bc <ai_check_custom_types>
 800669e:	b300      	cbz	r0, 80066e2 <ai_platform_network_create+0x39a>
 80066a0:	2400      	movs	r4, #0
 80066a2:	46a1      	mov	r9, r4
 80066a4:	e76c      	b.n	8006580 <ai_platform_network_create+0x238>
 80066a6:	4b10      	ldr	r3, [pc, #64]	; (80066e8 <ai_platform_network_create+0x3a0>)
 80066a8:	2201      	movs	r2, #1
 80066aa:	f8c3 2c08 	str.w	r2, [r3, #3080]	; 0xc08
 80066ae:	f8d3 2c08 	ldr.w	r2, [r3, #3080]	; 0xc08
 80066b2:	2a00      	cmp	r2, #0
 80066b4:	d1fb      	bne.n	80066ae <ai_platform_network_create+0x366>
 80066b6:	4a0d      	ldr	r2, [pc, #52]	; (80066ec <ai_platform_network_create+0x3a4>)
 80066b8:	f8c3 2c00 	str.w	r2, [r3, #3072]	; 0xc00
 80066bc:	f8d3 2c00 	ldr.w	r2, [r3, #3072]	; 0xc00
 80066c0:	4b0b      	ldr	r3, [pc, #44]	; (80066f0 <ai_platform_network_create+0x3a8>)
 80066c2:	429a      	cmp	r2, r3
 80066c4:	d0b8      	beq.n	8006638 <ai_platform_network_create+0x2f0>
 80066c6:	e7fe      	b.n	80066c6 <ai_platform_network_create+0x37e>
 80066c8:	4b0a      	ldr	r3, [pc, #40]	; (80066f4 <ai_platform_network_create+0x3ac>)
 80066ca:	2201      	movs	r2, #1
 80066cc:	609a      	str	r2, [r3, #8]
 80066ce:	689a      	ldr	r2, [r3, #8]
 80066d0:	2a00      	cmp	r2, #0
 80066d2:	d1fc      	bne.n	80066ce <ai_platform_network_create+0x386>
 80066d4:	4a05      	ldr	r2, [pc, #20]	; (80066ec <ai_platform_network_create+0x3a4>)
 80066d6:	601a      	str	r2, [r3, #0]
 80066d8:	681a      	ldr	r2, [r3, #0]
 80066da:	4b05      	ldr	r3, [pc, #20]	; (80066f0 <ai_platform_network_create+0x3a8>)
 80066dc:	429a      	cmp	r2, r3
 80066de:	d0ab      	beq.n	8006638 <ai_platform_network_create+0x2f0>
 80066e0:	e7fe      	b.n	80066e0 <ai_platform_network_create+0x398>
 80066e2:	f04f 0902 	mov.w	r9, #2
 80066e6:	e748      	b.n	800657a <ai_platform_network_create+0x232>
 80066e8:	58024000 	.word	0x58024000
 80066ec:	f407a5c2 	.word	0xf407a5c2
 80066f0:	b5e8b5cd 	.word	0xb5e8b5cd
 80066f4:	40023000 	.word	0x40023000
 80066f8:	84048403 	.word	0x84048403

080066fc <ai_platform_network_init>:
 80066fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006700:	2800      	cmp	r0, #0
 8006702:	d052      	beq.n	80067aa <ai_platform_network_init+0xae>
 8006704:	4bab      	ldr	r3, [pc, #684]	; (80069b4 <ai_platform_network_init+0x2b8>)
 8006706:	4604      	mov	r4, r0
 8006708:	6802      	ldr	r2, [r0, #0]
 800670a:	429a      	cmp	r2, r3
 800670c:	d14d      	bne.n	80067aa <ai_platform_network_init+0xae>
 800670e:	460d      	mov	r5, r1
 8006710:	f7ff f926 	bl	8005960 <_ai_platform_acquire_crc>
 8006714:	4ba8      	ldr	r3, [pc, #672]	; (80069b8 <ai_platform_network_init+0x2bc>)
 8006716:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006720:	189a      	adds	r2, r3, r2
 8006722:	2a01      	cmp	r2, #1
 8006724:	f240 809b 	bls.w	800685e <ai_platform_network_init+0x162>
 8006728:	f240 4249 	movw	r2, #1097	; 0x449
 800672c:	4293      	cmp	r3, r2
 800672e:	f000 8096 	beq.w	800685e <ai_platform_network_init+0x162>
 8006732:	4aa2      	ldr	r2, [pc, #648]	; (80069bc <ai_platform_network_init+0x2c0>)
 8006734:	6813      	ldr	r3, [r2, #0]
 8006736:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800673a:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800673e:	f000 809d 	beq.w	800687c <ai_platform_network_init+0x180>
 8006742:	6813      	ldr	r3, [r2, #0]
 8006744:	f240 4183 	movw	r1, #1155	; 0x483
 8006748:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800674c:	428b      	cmp	r3, r1
 800674e:	f000 80e4 	beq.w	800691a <ai_platform_network_init+0x21e>
 8006752:	6813      	ldr	r3, [r2, #0]
 8006754:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006758:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 800675c:	f000 811b 	beq.w	8006996 <ai_platform_network_init+0x29a>
 8006760:	6813      	ldr	r3, [r2, #0]
 8006762:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006766:	2b00      	cmp	r3, #0
 8006768:	f000 80f9 	beq.w	800695e <ai_platform_network_init+0x262>
 800676c:	f7ff f8fa 	bl	8005964 <_ai_platform_release_crc>
 8006770:	2d00      	cmp	r5, #0
 8006772:	f000 8147 	beq.w	8006a04 <ai_platform_network_init+0x308>
 8006776:	4b92      	ldr	r3, [pc, #584]	; (80069c0 <ai_platform_network_init+0x2c4>)
 8006778:	682a      	ldr	r2, [r5, #0]
 800677a:	429a      	cmp	r2, r3
 800677c:	f040 8090 	bne.w	80068a0 <ai_platform_network_init+0x1a4>
 8006780:	692b      	ldr	r3, [r5, #16]
 8006782:	89ae      	ldrh	r6, [r5, #12]
 8006784:	f8b5 c00e 	ldrh.w	ip, [r5, #14]
 8006788:	e9d5 1201 	ldrd	r1, r2, [r5, #4]
 800678c:	62a3      	str	r3, [r4, #40]	; 0x28
 800678e:	e9c4 1207 	strd	r1, r2, [r4, #28]
 8006792:	2303      	movs	r3, #3
 8006794:	84a6      	strh	r6, [r4, #36]	; 0x24
 8006796:	4626      	mov	r6, r4
 8006798:	4620      	mov	r0, r4
 800679a:	f8a4 c026 	strh.w	ip, [r4, #38]	; 0x26
 800679e:	60e3      	str	r3, [r4, #12]
 80067a0:	f000 ffb4 	bl	800770c <ai_layers_init_all>
 80067a4:	4630      	mov	r0, r6
 80067a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80067aa:	f7ff f8d9 	bl	8005960 <_ai_platform_acquire_crc>
 80067ae:	4b82      	ldr	r3, [pc, #520]	; (80069b8 <ai_platform_network_init+0x2bc>)
 80067b0:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067ba:	185a      	adds	r2, r3, r1
 80067bc:	2a01      	cmp	r2, #1
 80067be:	d92b      	bls.n	8006818 <ai_platform_network_init+0x11c>
 80067c0:	f240 4249 	movw	r2, #1097	; 0x449
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d027      	beq.n	8006818 <ai_platform_network_init+0x11c>
 80067c8:	4a7c      	ldr	r2, [pc, #496]	; (80069bc <ai_platform_network_init+0x2c0>)
 80067ca:	6813      	ldr	r3, [r2, #0]
 80067cc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067d0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80067d4:	d02d      	beq.n	8006832 <ai_platform_network_init+0x136>
 80067d6:	6813      	ldr	r3, [r2, #0]
 80067d8:	f240 4183 	movw	r1, #1155	; 0x483
 80067dc:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067e0:	428b      	cmp	r3, r1
 80067e2:	f000 8089 	beq.w	80068f8 <ai_platform_network_init+0x1fc>
 80067e6:	6813      	ldr	r3, [r2, #0]
 80067e8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067ec:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80067f0:	f000 80c3 	beq.w	800697a <ai_platform_network_init+0x27e>
 80067f4:	6813      	ldr	r3, [r2, #0]
 80067f6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80067fa:	2b00      	cmp	r3, #0
 80067fc:	d129      	bne.n	8006852 <ai_platform_network_init+0x156>
 80067fe:	4a71      	ldr	r2, [pc, #452]	; (80069c4 <ai_platform_network_init+0x2c8>)
 8006800:	2301      	movs	r3, #1
 8006802:	6093      	str	r3, [r2, #8]
 8006804:	6893      	ldr	r3, [r2, #8]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1fc      	bne.n	8006804 <ai_platform_network_init+0x108>
 800680a:	496f      	ldr	r1, [pc, #444]	; (80069c8 <ai_platform_network_init+0x2cc>)
 800680c:	4b6f      	ldr	r3, [pc, #444]	; (80069cc <ai_platform_network_init+0x2d0>)
 800680e:	6011      	str	r1, [r2, #0]
 8006810:	6812      	ldr	r2, [r2, #0]
 8006812:	429a      	cmp	r2, r3
 8006814:	d01d      	beq.n	8006852 <ai_platform_network_init+0x156>
 8006816:	e7fe      	b.n	8006816 <ai_platform_network_init+0x11a>
 8006818:	4a6a      	ldr	r2, [pc, #424]	; (80069c4 <ai_platform_network_init+0x2c8>)
 800681a:	2301      	movs	r3, #1
 800681c:	6093      	str	r3, [r2, #8]
 800681e:	6893      	ldr	r3, [r2, #8]
 8006820:	2b00      	cmp	r3, #0
 8006822:	d1fc      	bne.n	800681e <ai_platform_network_init+0x122>
 8006824:	4968      	ldr	r1, [pc, #416]	; (80069c8 <ai_platform_network_init+0x2cc>)
 8006826:	4b69      	ldr	r3, [pc, #420]	; (80069cc <ai_platform_network_init+0x2d0>)
 8006828:	6011      	str	r1, [r2, #0]
 800682a:	6812      	ldr	r2, [r2, #0]
 800682c:	429a      	cmp	r2, r3
 800682e:	d010      	beq.n	8006852 <ai_platform_network_init+0x156>
 8006830:	e7fe      	b.n	8006830 <ai_platform_network_init+0x134>
 8006832:	4a67      	ldr	r2, [pc, #412]	; (80069d0 <ai_platform_network_init+0x2d4>)
 8006834:	2301      	movs	r3, #1
 8006836:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800683a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800683e:	2b00      	cmp	r3, #0
 8006840:	d1fb      	bne.n	800683a <ai_platform_network_init+0x13e>
 8006842:	4961      	ldr	r1, [pc, #388]	; (80069c8 <ai_platform_network_init+0x2cc>)
 8006844:	4b61      	ldr	r3, [pc, #388]	; (80069cc <ai_platform_network_init+0x2d0>)
 8006846:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800684a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800684e:	429a      	cmp	r2, r3
 8006850:	d113      	bne.n	800687a <ai_platform_network_init+0x17e>
 8006852:	2600      	movs	r6, #0
 8006854:	f7ff f886 	bl	8005964 <_ai_platform_release_crc>
 8006858:	4630      	mov	r0, r6
 800685a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800685e:	4a59      	ldr	r2, [pc, #356]	; (80069c4 <ai_platform_network_init+0x2c8>)
 8006860:	2301      	movs	r3, #1
 8006862:	6093      	str	r3, [r2, #8]
 8006864:	6893      	ldr	r3, [r2, #8]
 8006866:	2b00      	cmp	r3, #0
 8006868:	d1fc      	bne.n	8006864 <ai_platform_network_init+0x168>
 800686a:	4b57      	ldr	r3, [pc, #348]	; (80069c8 <ai_platform_network_init+0x2cc>)
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	4b57      	ldr	r3, [pc, #348]	; (80069cc <ai_platform_network_init+0x2d0>)
 8006870:	6812      	ldr	r2, [r2, #0]
 8006872:	429a      	cmp	r2, r3
 8006874:	f43f af7a 	beq.w	800676c <ai_platform_network_init+0x70>
 8006878:	e7fe      	b.n	8006878 <ai_platform_network_init+0x17c>
 800687a:	e7fe      	b.n	800687a <ai_platform_network_init+0x17e>
 800687c:	4a54      	ldr	r2, [pc, #336]	; (80069d0 <ai_platform_network_init+0x2d4>)
 800687e:	2301      	movs	r3, #1
 8006880:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006884:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006888:	2b00      	cmp	r3, #0
 800688a:	d1fb      	bne.n	8006884 <ai_platform_network_init+0x188>
 800688c:	4b4e      	ldr	r3, [pc, #312]	; (80069c8 <ai_platform_network_init+0x2cc>)
 800688e:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006892:	4b4e      	ldr	r3, [pc, #312]	; (80069cc <ai_platform_network_init+0x2d0>)
 8006894:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006898:	429a      	cmp	r2, r3
 800689a:	f43f af67 	beq.w	800676c <ai_platform_network_init+0x70>
 800689e:	e7fe      	b.n	800689e <ai_platform_network_init+0x1a2>
 80068a0:	2101      	movs	r1, #1
 80068a2:	4628      	mov	r0, r5
 80068a4:	f105 081c 	add.w	r8, r5, #28
 80068a8:	686e      	ldr	r6, [r5, #4]
 80068aa:	f7fe ff79 	bl	80057a0 <ai_buffer_get_size>
 80068ae:	4607      	mov	r7, r0
 80068b0:	2101      	movs	r1, #1
 80068b2:	4640      	mov	r0, r8
 80068b4:	f8d5 9020 	ldr.w	r9, [r5, #32]
 80068b8:	f7fe ff72 	bl	80057a0 <ai_buffer_get_size>
 80068bc:	2f00      	cmp	r7, #0
 80068be:	d13e      	bne.n	800693e <ai_platform_network_init+0x242>
 80068c0:	2800      	cmp	r0, #0
 80068c2:	f000 808e 	beq.w	80069e2 <ai_platform_network_init+0x2e6>
 80068c6:	f1b9 0f00 	cmp.w	r9, #0
 80068ca:	f000 8094 	beq.w	80069f6 <ai_platform_network_init+0x2fa>
 80068ce:	f04f 0c01 	mov.w	ip, #1
 80068d2:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
 80068d4:	2600      	movs	r6, #0
 80068d6:	83e7      	strh	r7, [r4, #30]
 80068d8:	4563      	cmp	r3, ip
 80068da:	83a6      	strh	r6, [r4, #28]
 80068dc:	d37a      	bcc.n	80069d4 <ai_platform_network_init+0x2d8>
 80068de:	f1bc 0f00 	cmp.w	ip, #0
 80068e2:	f000 809c 	beq.w	8006a1e <ai_platform_network_init+0x322>
 80068e6:	6aa5      	ldr	r5, [r4, #40]	; 0x28
 80068e8:	e8b8 000f 	ldmia.w	r8!, {r0, r1, r2, r3}
 80068ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80068ee:	e898 0007 	ldmia.w	r8, {r0, r1, r2}
 80068f2:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 80068f6:	e74c      	b.n	8006792 <ai_platform_network_init+0x96>
 80068f8:	4a35      	ldr	r2, [pc, #212]	; (80069d0 <ai_platform_network_init+0x2d4>)
 80068fa:	2301      	movs	r3, #1
 80068fc:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006900:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1fb      	bne.n	8006900 <ai_platform_network_init+0x204>
 8006908:	492f      	ldr	r1, [pc, #188]	; (80069c8 <ai_platform_network_init+0x2cc>)
 800690a:	4b30      	ldr	r3, [pc, #192]	; (80069cc <ai_platform_network_init+0x2d0>)
 800690c:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006910:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006914:	429a      	cmp	r2, r3
 8006916:	d09c      	beq.n	8006852 <ai_platform_network_init+0x156>
 8006918:	e7fe      	b.n	8006918 <ai_platform_network_init+0x21c>
 800691a:	4a2d      	ldr	r2, [pc, #180]	; (80069d0 <ai_platform_network_init+0x2d4>)
 800691c:	2301      	movs	r3, #1
 800691e:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006922:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006926:	2b00      	cmp	r3, #0
 8006928:	d1fb      	bne.n	8006922 <ai_platform_network_init+0x226>
 800692a:	4b27      	ldr	r3, [pc, #156]	; (80069c8 <ai_platform_network_init+0x2cc>)
 800692c:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006930:	4b26      	ldr	r3, [pc, #152]	; (80069cc <ai_platform_network_init+0x2d0>)
 8006932:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006936:	429a      	cmp	r2, r3
 8006938:	f43f af18 	beq.w	800676c <ai_platform_network_init+0x70>
 800693c:	e7fe      	b.n	800693c <ai_platform_network_init+0x240>
 800693e:	2800      	cmp	r0, #0
 8006940:	d153      	bne.n	80069ea <ai_platform_network_init+0x2ee>
 8006942:	4680      	mov	r8, r0
 8006944:	4684      	mov	ip, r0
 8006946:	2e00      	cmp	r6, #0
 8006948:	d063      	beq.n	8006a12 <ai_platform_network_init+0x316>
 800694a:	8be6      	ldrh	r6, [r4, #30]
 800694c:	2e00      	cmp	r6, #0
 800694e:	d168      	bne.n	8006a22 <ai_platform_network_init+0x326>
 8006950:	2212      	movs	r2, #18
 8006952:	2116      	movs	r1, #22
 8006954:	f104 0010 	add.w	r0, r4, #16
 8006958:	f000 fe96 	bl	8007688 <core_set_error>
 800695c:	e77c      	b.n	8006858 <ai_platform_network_init+0x15c>
 800695e:	4a19      	ldr	r2, [pc, #100]	; (80069c4 <ai_platform_network_init+0x2c8>)
 8006960:	2301      	movs	r3, #1
 8006962:	6093      	str	r3, [r2, #8]
 8006964:	6893      	ldr	r3, [r2, #8]
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1fc      	bne.n	8006964 <ai_platform_network_init+0x268>
 800696a:	4b17      	ldr	r3, [pc, #92]	; (80069c8 <ai_platform_network_init+0x2cc>)
 800696c:	6013      	str	r3, [r2, #0]
 800696e:	4b17      	ldr	r3, [pc, #92]	; (80069cc <ai_platform_network_init+0x2d0>)
 8006970:	6812      	ldr	r2, [r2, #0]
 8006972:	429a      	cmp	r2, r3
 8006974:	f43f aefa 	beq.w	800676c <ai_platform_network_init+0x70>
 8006978:	e7fe      	b.n	8006978 <ai_platform_network_init+0x27c>
 800697a:	4a12      	ldr	r2, [pc, #72]	; (80069c4 <ai_platform_network_init+0x2c8>)
 800697c:	2301      	movs	r3, #1
 800697e:	6093      	str	r3, [r2, #8]
 8006980:	6893      	ldr	r3, [r2, #8]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d1fc      	bne.n	8006980 <ai_platform_network_init+0x284>
 8006986:	4910      	ldr	r1, [pc, #64]	; (80069c8 <ai_platform_network_init+0x2cc>)
 8006988:	4b10      	ldr	r3, [pc, #64]	; (80069cc <ai_platform_network_init+0x2d0>)
 800698a:	6011      	str	r1, [r2, #0]
 800698c:	6812      	ldr	r2, [r2, #0]
 800698e:	429a      	cmp	r2, r3
 8006990:	f43f af5f 	beq.w	8006852 <ai_platform_network_init+0x156>
 8006994:	e7fe      	b.n	8006994 <ai_platform_network_init+0x298>
 8006996:	4a0b      	ldr	r2, [pc, #44]	; (80069c4 <ai_platform_network_init+0x2c8>)
 8006998:	2301      	movs	r3, #1
 800699a:	6093      	str	r3, [r2, #8]
 800699c:	6893      	ldr	r3, [r2, #8]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d1fc      	bne.n	800699c <ai_platform_network_init+0x2a0>
 80069a2:	4b09      	ldr	r3, [pc, #36]	; (80069c8 <ai_platform_network_init+0x2cc>)
 80069a4:	6013      	str	r3, [r2, #0]
 80069a6:	4b09      	ldr	r3, [pc, #36]	; (80069cc <ai_platform_network_init+0x2d0>)
 80069a8:	6812      	ldr	r2, [r2, #0]
 80069aa:	429a      	cmp	r2, r3
 80069ac:	f43f aede 	beq.w	800676c <ai_platform_network_init+0x70>
 80069b0:	e7fe      	b.n	80069b0 <ai_platform_network_init+0x2b4>
 80069b2:	bf00      	nop
 80069b4:	a1c00100 	.word	0xa1c00100
 80069b8:	e0042000 	.word	0xe0042000
 80069bc:	5c001000 	.word	0x5c001000
 80069c0:	a1facade 	.word	0xa1facade
 80069c4:	40023000 	.word	0x40023000
 80069c8:	f407a5c2 	.word	0xf407a5c2
 80069cc:	b5e8b5cd 	.word	0xb5e8b5cd
 80069d0:	58024000 	.word	0x58024000
 80069d4:	2213      	movs	r2, #19
 80069d6:	2116      	movs	r1, #22
 80069d8:	f104 0010 	add.w	r0, r4, #16
 80069dc:	f000 fe54 	bl	8007688 <core_set_error>
 80069e0:	e73a      	b.n	8006858 <ai_platform_network_init+0x15c>
 80069e2:	4607      	mov	r7, r0
 80069e4:	4680      	mov	r8, r0
 80069e6:	4684      	mov	ip, r0
 80069e8:	e773      	b.n	80068d2 <ai_platform_network_init+0x1d6>
 80069ea:	f1b9 0f00 	cmp.w	r9, #0
 80069ee:	d002      	beq.n	80069f6 <ai_platform_network_init+0x2fa>
 80069f0:	f04f 0c01 	mov.w	ip, #1
 80069f4:	e7a7      	b.n	8006946 <ai_platform_network_init+0x24a>
 80069f6:	2110      	movs	r1, #16
 80069f8:	2213      	movs	r2, #19
 80069fa:	2600      	movs	r6, #0
 80069fc:	1860      	adds	r0, r4, r1
 80069fe:	f000 fe43 	bl	8007688 <core_set_error>
 8006a02:	e729      	b.n	8006858 <ai_platform_network_init+0x15c>
 8006a04:	2110      	movs	r1, #16
 8006a06:	2211      	movs	r2, #17
 8006a08:	462e      	mov	r6, r5
 8006a0a:	1860      	adds	r0, r4, r1
 8006a0c:	f000 fe3c 	bl	8007688 <core_set_error>
 8006a10:	e722      	b.n	8006858 <ai_platform_network_init+0x15c>
 8006a12:	2110      	movs	r1, #16
 8006a14:	2212      	movs	r2, #18
 8006a16:	1860      	adds	r0, r4, r1
 8006a18:	f000 fe36 	bl	8007688 <core_set_error>
 8006a1c:	e71c      	b.n	8006858 <ai_platform_network_init+0x15c>
 8006a1e:	4666      	mov	r6, ip
 8006a20:	e6b7      	b.n	8006792 <ai_platform_network_init+0x96>
 8006a22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8006a24:	6a26      	ldr	r6, [r4, #32]
 8006a26:	2701      	movs	r7, #1
 8006a28:	c60f      	stmia	r6!, {r0, r1, r2, r3}
 8006a2a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8006a2e:	e886 0007 	stmia.w	r6, {r0, r1, r2}
 8006a32:	e74e      	b.n	80068d2 <ai_platform_network_init+0x1d6>

08006a34 <ai_platform_network_post_init>:
 8006a34:	b538      	push	{r3, r4, r5, lr}
 8006a36:	2800      	cmp	r0, #0
 8006a38:	d04e      	beq.n	8006ad8 <ai_platform_network_post_init+0xa4>
 8006a3a:	4b8c      	ldr	r3, [pc, #560]	; (8006c6c <ai_platform_network_post_init+0x238>)
 8006a3c:	4604      	mov	r4, r0
 8006a3e:	6802      	ldr	r2, [r0, #0]
 8006a40:	429a      	cmp	r2, r3
 8006a42:	d149      	bne.n	8006ad8 <ai_platform_network_post_init+0xa4>
 8006a44:	f7fe ff8c 	bl	8005960 <_ai_platform_acquire_crc>
 8006a48:	4b89      	ldr	r3, [pc, #548]	; (8006c70 <ai_platform_network_post_init+0x23c>)
 8006a4a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a54:	189a      	adds	r2, r3, r2
 8006a56:	2a01      	cmp	r2, #1
 8006a58:	f240 8095 	bls.w	8006b86 <ai_platform_network_post_init+0x152>
 8006a5c:	f240 4249 	movw	r2, #1097	; 0x449
 8006a60:	4293      	cmp	r3, r2
 8006a62:	f000 8090 	beq.w	8006b86 <ai_platform_network_post_init+0x152>
 8006a66:	4a83      	ldr	r2, [pc, #524]	; (8006c74 <ai_platform_network_post_init+0x240>)
 8006a68:	6813      	ldr	r3, [r2, #0]
 8006a6a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a6e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006a72:	f000 8096 	beq.w	8006ba2 <ai_platform_network_post_init+0x16e>
 8006a76:	6813      	ldr	r3, [r2, #0]
 8006a78:	f240 4183 	movw	r1, #1155	; 0x483
 8006a7c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a80:	428b      	cmp	r3, r1
 8006a82:	f000 80b8 	beq.w	8006bf6 <ai_platform_network_post_init+0x1c2>
 8006a86:	6813      	ldr	r3, [r2, #0]
 8006a88:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a8c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006a90:	f000 80de 	beq.w	8006c50 <ai_platform_network_post_init+0x21c>
 8006a94:	6813      	ldr	r3, [r2, #0]
 8006a96:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	f000 80bd 	beq.w	8006c1a <ai_platform_network_post_init+0x1e6>
 8006aa0:	f7fe ff60 	bl	8005964 <_ai_platform_release_crc>
 8006aa4:	68e3      	ldr	r3, [r4, #12]
 8006aa6:	f013 0502 	ands.w	r5, r3, #2
 8006aaa:	f000 808c 	beq.w	8006bc6 <ai_platform_network_post_init+0x192>
 8006aae:	4620      	mov	r0, r4
 8006ab0:	f000 fe3a 	bl	8007728 <ai_layers_post_init_all>
 8006ab4:	6be3      	ldr	r3, [r4, #60]	; 0x3c
 8006ab6:	b16b      	cbz	r3, 8006ad4 <ai_platform_network_post_init+0xa0>
 8006ab8:	6b65      	ldr	r5, [r4, #52]	; 0x34
 8006aba:	e007      	b.n	8006acc <ai_platform_network_post_init+0x98>
 8006abc:	e9d4 320f 	ldrd	r3, r2, [r4, #60]	; 0x3c
 8006ac0:	4798      	blx	r3
 8006ac2:	692b      	ldr	r3, [r5, #16]
 8006ac4:	b133      	cbz	r3, 8006ad4 <ai_platform_network_post_init+0xa0>
 8006ac6:	42ab      	cmp	r3, r5
 8006ac8:	461d      	mov	r5, r3
 8006aca:	d003      	beq.n	8006ad4 <ai_platform_network_post_init+0xa0>
 8006acc:	4629      	mov	r1, r5
 8006ace:	2000      	movs	r0, #0
 8006ad0:	2d00      	cmp	r5, #0
 8006ad2:	d1f3      	bne.n	8006abc <ai_platform_network_post_init+0x88>
 8006ad4:	2001      	movs	r0, #1
 8006ad6:	bd38      	pop	{r3, r4, r5, pc}
 8006ad8:	f7fe ff42 	bl	8005960 <_ai_platform_acquire_crc>
 8006adc:	4b64      	ldr	r3, [pc, #400]	; (8006c70 <ai_platform_network_post_init+0x23c>)
 8006ade:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ae8:	185a      	adds	r2, r3, r1
 8006aea:	2a01      	cmp	r2, #1
 8006aec:	d92a      	bls.n	8006b44 <ai_platform_network_post_init+0x110>
 8006aee:	f240 4249 	movw	r2, #1097	; 0x449
 8006af2:	4293      	cmp	r3, r2
 8006af4:	d026      	beq.n	8006b44 <ai_platform_network_post_init+0x110>
 8006af6:	4a5f      	ldr	r2, [pc, #380]	; (8006c74 <ai_platform_network_post_init+0x240>)
 8006af8:	6813      	ldr	r3, [r2, #0]
 8006afa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006afe:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006b02:	d02c      	beq.n	8006b5e <ai_platform_network_post_init+0x12a>
 8006b04:	6813      	ldr	r3, [r2, #0]
 8006b06:	f240 4183 	movw	r1, #1155	; 0x483
 8006b0a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b0e:	428b      	cmp	r3, r1
 8006b10:	d060      	beq.n	8006bd4 <ai_platform_network_post_init+0x1a0>
 8006b12:	6813      	ldr	r3, [r2, #0]
 8006b14:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b18:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006b1c:	f000 808b 	beq.w	8006c36 <ai_platform_network_post_init+0x202>
 8006b20:	6813      	ldr	r3, [r2, #0]
 8006b22:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d129      	bne.n	8006b7e <ai_platform_network_post_init+0x14a>
 8006b2a:	4a53      	ldr	r2, [pc, #332]	; (8006c78 <ai_platform_network_post_init+0x244>)
 8006b2c:	2301      	movs	r3, #1
 8006b2e:	6093      	str	r3, [r2, #8]
 8006b30:	6893      	ldr	r3, [r2, #8]
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d1fc      	bne.n	8006b30 <ai_platform_network_post_init+0xfc>
 8006b36:	4951      	ldr	r1, [pc, #324]	; (8006c7c <ai_platform_network_post_init+0x248>)
 8006b38:	4b51      	ldr	r3, [pc, #324]	; (8006c80 <ai_platform_network_post_init+0x24c>)
 8006b3a:	6011      	str	r1, [r2, #0]
 8006b3c:	6812      	ldr	r2, [r2, #0]
 8006b3e:	429a      	cmp	r2, r3
 8006b40:	d01d      	beq.n	8006b7e <ai_platform_network_post_init+0x14a>
 8006b42:	e7fe      	b.n	8006b42 <ai_platform_network_post_init+0x10e>
 8006b44:	4a4c      	ldr	r2, [pc, #304]	; (8006c78 <ai_platform_network_post_init+0x244>)
 8006b46:	2301      	movs	r3, #1
 8006b48:	6093      	str	r3, [r2, #8]
 8006b4a:	6893      	ldr	r3, [r2, #8]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d1fc      	bne.n	8006b4a <ai_platform_network_post_init+0x116>
 8006b50:	494a      	ldr	r1, [pc, #296]	; (8006c7c <ai_platform_network_post_init+0x248>)
 8006b52:	4b4b      	ldr	r3, [pc, #300]	; (8006c80 <ai_platform_network_post_init+0x24c>)
 8006b54:	6011      	str	r1, [r2, #0]
 8006b56:	6812      	ldr	r2, [r2, #0]
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d010      	beq.n	8006b7e <ai_platform_network_post_init+0x14a>
 8006b5c:	e7fe      	b.n	8006b5c <ai_platform_network_post_init+0x128>
 8006b5e:	4a49      	ldr	r2, [pc, #292]	; (8006c84 <ai_platform_network_post_init+0x250>)
 8006b60:	2301      	movs	r3, #1
 8006b62:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006b66:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d1fb      	bne.n	8006b66 <ai_platform_network_post_init+0x132>
 8006b6e:	4943      	ldr	r1, [pc, #268]	; (8006c7c <ai_platform_network_post_init+0x248>)
 8006b70:	4b43      	ldr	r3, [pc, #268]	; (8006c80 <ai_platform_network_post_init+0x24c>)
 8006b72:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006b76:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006b7a:	429a      	cmp	r2, r3
 8006b7c:	d110      	bne.n	8006ba0 <ai_platform_network_post_init+0x16c>
 8006b7e:	f7fe fef1 	bl	8005964 <_ai_platform_release_crc>
 8006b82:	2000      	movs	r0, #0
 8006b84:	bd38      	pop	{r3, r4, r5, pc}
 8006b86:	4a3c      	ldr	r2, [pc, #240]	; (8006c78 <ai_platform_network_post_init+0x244>)
 8006b88:	2301      	movs	r3, #1
 8006b8a:	6093      	str	r3, [r2, #8]
 8006b8c:	6893      	ldr	r3, [r2, #8]
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1fc      	bne.n	8006b8c <ai_platform_network_post_init+0x158>
 8006b92:	493a      	ldr	r1, [pc, #232]	; (8006c7c <ai_platform_network_post_init+0x248>)
 8006b94:	4b3a      	ldr	r3, [pc, #232]	; (8006c80 <ai_platform_network_post_init+0x24c>)
 8006b96:	6011      	str	r1, [r2, #0]
 8006b98:	6812      	ldr	r2, [r2, #0]
 8006b9a:	429a      	cmp	r2, r3
 8006b9c:	d080      	beq.n	8006aa0 <ai_platform_network_post_init+0x6c>
 8006b9e:	e7fe      	b.n	8006b9e <ai_platform_network_post_init+0x16a>
 8006ba0:	e7fe      	b.n	8006ba0 <ai_platform_network_post_init+0x16c>
 8006ba2:	4a38      	ldr	r2, [pc, #224]	; (8006c84 <ai_platform_network_post_init+0x250>)
 8006ba4:	2301      	movs	r3, #1
 8006ba6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006baa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d1fb      	bne.n	8006baa <ai_platform_network_post_init+0x176>
 8006bb2:	4932      	ldr	r1, [pc, #200]	; (8006c7c <ai_platform_network_post_init+0x248>)
 8006bb4:	4b32      	ldr	r3, [pc, #200]	; (8006c80 <ai_platform_network_post_init+0x24c>)
 8006bb6:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006bba:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006bbe:	429a      	cmp	r2, r3
 8006bc0:	f43f af6e 	beq.w	8006aa0 <ai_platform_network_post_init+0x6c>
 8006bc4:	e7fe      	b.n	8006bc4 <ai_platform_network_post_init+0x190>
 8006bc6:	2210      	movs	r2, #16
 8006bc8:	2111      	movs	r1, #17
 8006bca:	18a0      	adds	r0, r4, r2
 8006bcc:	f000 fd5c 	bl	8007688 <core_set_error>
 8006bd0:	4628      	mov	r0, r5
 8006bd2:	bd38      	pop	{r3, r4, r5, pc}
 8006bd4:	4a2b      	ldr	r2, [pc, #172]	; (8006c84 <ai_platform_network_post_init+0x250>)
 8006bd6:	2301      	movs	r3, #1
 8006bd8:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006bdc:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d1fb      	bne.n	8006bdc <ai_platform_network_post_init+0x1a8>
 8006be4:	4925      	ldr	r1, [pc, #148]	; (8006c7c <ai_platform_network_post_init+0x248>)
 8006be6:	4b26      	ldr	r3, [pc, #152]	; (8006c80 <ai_platform_network_post_init+0x24c>)
 8006be8:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006bec:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006bf0:	429a      	cmp	r2, r3
 8006bf2:	d0c4      	beq.n	8006b7e <ai_platform_network_post_init+0x14a>
 8006bf4:	e7fe      	b.n	8006bf4 <ai_platform_network_post_init+0x1c0>
 8006bf6:	4a23      	ldr	r2, [pc, #140]	; (8006c84 <ai_platform_network_post_init+0x250>)
 8006bf8:	2301      	movs	r3, #1
 8006bfa:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006bfe:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006c02:	2b00      	cmp	r3, #0
 8006c04:	d1fb      	bne.n	8006bfe <ai_platform_network_post_init+0x1ca>
 8006c06:	491d      	ldr	r1, [pc, #116]	; (8006c7c <ai_platform_network_post_init+0x248>)
 8006c08:	4b1d      	ldr	r3, [pc, #116]	; (8006c80 <ai_platform_network_post_init+0x24c>)
 8006c0a:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 8006c0e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006c12:	429a      	cmp	r2, r3
 8006c14:	f43f af44 	beq.w	8006aa0 <ai_platform_network_post_init+0x6c>
 8006c18:	e7fe      	b.n	8006c18 <ai_platform_network_post_init+0x1e4>
 8006c1a:	4a17      	ldr	r2, [pc, #92]	; (8006c78 <ai_platform_network_post_init+0x244>)
 8006c1c:	2301      	movs	r3, #1
 8006c1e:	6093      	str	r3, [r2, #8]
 8006c20:	6893      	ldr	r3, [r2, #8]
 8006c22:	2b00      	cmp	r3, #0
 8006c24:	d1fc      	bne.n	8006c20 <ai_platform_network_post_init+0x1ec>
 8006c26:	4915      	ldr	r1, [pc, #84]	; (8006c7c <ai_platform_network_post_init+0x248>)
 8006c28:	4b15      	ldr	r3, [pc, #84]	; (8006c80 <ai_platform_network_post_init+0x24c>)
 8006c2a:	6011      	str	r1, [r2, #0]
 8006c2c:	6812      	ldr	r2, [r2, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	f43f af36 	beq.w	8006aa0 <ai_platform_network_post_init+0x6c>
 8006c34:	e7fe      	b.n	8006c34 <ai_platform_network_post_init+0x200>
 8006c36:	4a10      	ldr	r2, [pc, #64]	; (8006c78 <ai_platform_network_post_init+0x244>)
 8006c38:	2301      	movs	r3, #1
 8006c3a:	6093      	str	r3, [r2, #8]
 8006c3c:	6893      	ldr	r3, [r2, #8]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d1fc      	bne.n	8006c3c <ai_platform_network_post_init+0x208>
 8006c42:	490e      	ldr	r1, [pc, #56]	; (8006c7c <ai_platform_network_post_init+0x248>)
 8006c44:	4b0e      	ldr	r3, [pc, #56]	; (8006c80 <ai_platform_network_post_init+0x24c>)
 8006c46:	6011      	str	r1, [r2, #0]
 8006c48:	6812      	ldr	r2, [r2, #0]
 8006c4a:	429a      	cmp	r2, r3
 8006c4c:	d097      	beq.n	8006b7e <ai_platform_network_post_init+0x14a>
 8006c4e:	e7fe      	b.n	8006c4e <ai_platform_network_post_init+0x21a>
 8006c50:	4a09      	ldr	r2, [pc, #36]	; (8006c78 <ai_platform_network_post_init+0x244>)
 8006c52:	2301      	movs	r3, #1
 8006c54:	6093      	str	r3, [r2, #8]
 8006c56:	6893      	ldr	r3, [r2, #8]
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d1fc      	bne.n	8006c56 <ai_platform_network_post_init+0x222>
 8006c5c:	4907      	ldr	r1, [pc, #28]	; (8006c7c <ai_platform_network_post_init+0x248>)
 8006c5e:	4b08      	ldr	r3, [pc, #32]	; (8006c80 <ai_platform_network_post_init+0x24c>)
 8006c60:	6011      	str	r1, [r2, #0]
 8006c62:	6812      	ldr	r2, [r2, #0]
 8006c64:	429a      	cmp	r2, r3
 8006c66:	f43f af1b 	beq.w	8006aa0 <ai_platform_network_post_init+0x6c>
 8006c6a:	e7fe      	b.n	8006c6a <ai_platform_network_post_init+0x236>
 8006c6c:	a1c00100 	.word	0xa1c00100
 8006c70:	e0042000 	.word	0xe0042000
 8006c74:	5c001000 	.word	0x5c001000
 8006c78:	40023000 	.word	0x40023000
 8006c7c:	f407a5c2 	.word	0xf407a5c2
 8006c80:	b5e8b5cd 	.word	0xb5e8b5cd
 8006c84:	58024000 	.word	0x58024000

08006c88 <ai_platform_network_process>:
 8006c88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c8c:	b085      	sub	sp, #20
 8006c8e:	460e      	mov	r6, r1
 8006c90:	4605      	mov	r5, r0
 8006c92:	9201      	str	r2, [sp, #4]
 8006c94:	b120      	cbz	r0, 8006ca0 <ai_platform_network_process+0x18>
 8006c96:	4b24      	ldr	r3, [pc, #144]	; (8006d28 <ai_platform_network_process+0xa0>)
 8006c98:	6802      	ldr	r2, [r0, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	bf18      	it	ne
 8006c9e:	2500      	movne	r5, #0
 8006ca0:	f7fe fe5e 	bl	8005960 <_ai_platform_acquire_crc>
 8006ca4:	4b21      	ldr	r3, [pc, #132]	; (8006d2c <ai_platform_network_process+0xa4>)
 8006ca6:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cb0:	185a      	adds	r2, r3, r1
 8006cb2:	2a01      	cmp	r2, #1
 8006cb4:	d92b      	bls.n	8006d0e <ai_platform_network_process+0x86>
 8006cb6:	f240 4249 	movw	r2, #1097	; 0x449
 8006cba:	4293      	cmp	r3, r2
 8006cbc:	d027      	beq.n	8006d0e <ai_platform_network_process+0x86>
 8006cbe:	4a1c      	ldr	r2, [pc, #112]	; (8006d30 <ai_platform_network_process+0xa8>)
 8006cc0:	6813      	ldr	r3, [r2, #0]
 8006cc2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cc6:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8006cca:	d039      	beq.n	8006d40 <ai_platform_network_process+0xb8>
 8006ccc:	6813      	ldr	r3, [r2, #0]
 8006cce:	f240 4183 	movw	r1, #1155	; 0x483
 8006cd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cd6:	428b      	cmp	r3, r1
 8006cd8:	f000 819c 	beq.w	8007014 <ai_platform_network_process+0x38c>
 8006cdc:	6813      	ldr	r3, [r2, #0]
 8006cde:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006ce2:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8006ce6:	f000 8179 	beq.w	8006fdc <ai_platform_network_process+0x354>
 8006cea:	6813      	ldr	r3, [r2, #0]
 8006cec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d136      	bne.n	8006d62 <ai_platform_network_process+0xda>
 8006cf4:	4a0f      	ldr	r2, [pc, #60]	; (8006d34 <ai_platform_network_process+0xac>)
 8006cf6:	2301      	movs	r3, #1
 8006cf8:	6093      	str	r3, [r2, #8]
 8006cfa:	6893      	ldr	r3, [r2, #8]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d1fc      	bne.n	8006cfa <ai_platform_network_process+0x72>
 8006d00:	4b0d      	ldr	r3, [pc, #52]	; (8006d38 <ai_platform_network_process+0xb0>)
 8006d02:	6013      	str	r3, [r2, #0]
 8006d04:	4b0d      	ldr	r3, [pc, #52]	; (8006d3c <ai_platform_network_process+0xb4>)
 8006d06:	6812      	ldr	r2, [r2, #0]
 8006d08:	429a      	cmp	r2, r3
 8006d0a:	d02a      	beq.n	8006d62 <ai_platform_network_process+0xda>
 8006d0c:	e7fe      	b.n	8006d0c <ai_platform_network_process+0x84>
 8006d0e:	4a09      	ldr	r2, [pc, #36]	; (8006d34 <ai_platform_network_process+0xac>)
 8006d10:	2301      	movs	r3, #1
 8006d12:	6093      	str	r3, [r2, #8]
 8006d14:	6893      	ldr	r3, [r2, #8]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d1fc      	bne.n	8006d14 <ai_platform_network_process+0x8c>
 8006d1a:	4b07      	ldr	r3, [pc, #28]	; (8006d38 <ai_platform_network_process+0xb0>)
 8006d1c:	6013      	str	r3, [r2, #0]
 8006d1e:	4b07      	ldr	r3, [pc, #28]	; (8006d3c <ai_platform_network_process+0xb4>)
 8006d20:	6812      	ldr	r2, [r2, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d01d      	beq.n	8006d62 <ai_platform_network_process+0xda>
 8006d26:	e7fe      	b.n	8006d26 <ai_platform_network_process+0x9e>
 8006d28:	a1c00100 	.word	0xa1c00100
 8006d2c:	e0042000 	.word	0xe0042000
 8006d30:	5c001000 	.word	0x5c001000
 8006d34:	40023000 	.word	0x40023000
 8006d38:	f407a5c2 	.word	0xf407a5c2
 8006d3c:	b5e8b5cd 	.word	0xb5e8b5cd
 8006d40:	4ab0      	ldr	r2, [pc, #704]	; (8007004 <ai_platform_network_process+0x37c>)
 8006d42:	2301      	movs	r3, #1
 8006d44:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8006d48:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	d1fb      	bne.n	8006d48 <ai_platform_network_process+0xc0>
 8006d50:	4bad      	ldr	r3, [pc, #692]	; (8007008 <ai_platform_network_process+0x380>)
 8006d52:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8006d56:	4bad      	ldr	r3, [pc, #692]	; (800700c <ai_platform_network_process+0x384>)
 8006d58:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	f040 812b 	bne.w	8006fb8 <ai_platform_network_process+0x330>
 8006d62:	f7fe fdff 	bl	8005964 <_ai_platform_release_crc>
 8006d66:	2d00      	cmp	r5, #0
 8006d68:	f000 8172 	beq.w	8007050 <ai_platform_network_process+0x3c8>
 8006d6c:	8dab      	ldrh	r3, [r5, #44]	; 0x2c
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	f000 8123 	beq.w	8006fba <ai_platform_network_process+0x332>
 8006d74:	68eb      	ldr	r3, [r5, #12]
 8006d76:	2200      	movs	r2, #0
 8006d78:	f8d5 8030 	ldr.w	r8, [r5, #48]	; 0x30
 8006d7c:	f003 0303 	and.w	r3, r3, #3
 8006d80:	616a      	str	r2, [r5, #20]
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	f040 811f 	bne.w	8006fc6 <ai_platform_network_process+0x33e>
 8006d88:	2e00      	cmp	r6, #0
 8006d8a:	f000 8156 	beq.w	800703a <ai_platform_network_process+0x3b2>
 8006d8e:	fab8 f788 	clz	r7, r8
 8006d92:	097f      	lsrs	r7, r7, #5
 8006d94:	f1b8 0f00 	cmp.w	r8, #0
 8006d98:	f000 814f 	beq.w	800703a <ai_platform_network_process+0x3b2>
 8006d9c:	f8b8 3000 	ldrh.w	r3, [r8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	f000 814a 	beq.w	800703a <ai_platform_network_process+0x3b2>
 8006da6:	69b3      	ldr	r3, [r6, #24]
 8006da8:	681b      	ldr	r3, [r3, #0]
 8006daa:	e9cd 3502 	strd	r3, r5, [sp, #8]
 8006dae:	f8d8 3004 	ldr.w	r3, [r8, #4]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d072      	beq.n	8006e9c <ai_platform_network_process+0x214>
 8006db6:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006dba:	2c00      	cmp	r4, #0
 8006dbc:	d06e      	beq.n	8006e9c <ai_platform_network_process+0x214>
 8006dbe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8006dc2:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006dc6:	f8d3 a000 	ldr.w	sl, [r3]
 8006dca:	eb1a 1907 	adds.w	r9, sl, r7, lsl #4
 8006dce:	f000 8133 	beq.w	8007038 <ai_platform_network_process+0x3b0>
 8006dd2:	69a3      	ldr	r3, [r4, #24]
 8006dd4:	2101      	movs	r1, #1
 8006dd6:	4630      	mov	r0, r6
 8006dd8:	685d      	ldr	r5, [r3, #4]
 8006dda:	f7fe fce1 	bl	80057a0 <ai_buffer_get_size>
 8006dde:	4285      	cmp	r5, r0
 8006de0:	f0c0 8138 	bcc.w	8007054 <ai_platform_network_process+0x3cc>
 8006de4:	68e0      	ldr	r0, [r4, #12]
 8006de6:	69b1      	ldr	r1, [r6, #24]
 8006de8:	68c2      	ldr	r2, [r0, #12]
 8006dea:	68cb      	ldr	r3, [r1, #12]
 8006dec:	429a      	cmp	r2, r3
 8006dee:	f040 8131 	bne.w	8007054 <ai_platform_network_process+0x3cc>
 8006df2:	6882      	ldr	r2, [r0, #8]
 8006df4:	688b      	ldr	r3, [r1, #8]
 8006df6:	429a      	cmp	r2, r3
 8006df8:	f040 812c 	bne.w	8007054 <ai_platform_network_process+0x3cc>
 8006dfc:	6842      	ldr	r2, [r0, #4]
 8006dfe:	684b      	ldr	r3, [r1, #4]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	f040 8127 	bne.w	8007054 <ai_platform_network_process+0x3cc>
 8006e06:	69a3      	ldr	r3, [r4, #24]
 8006e08:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006e0c:	f7fe fcb8 	bl	8005780 <ai_array_get_data_byte_size>
 8006e10:	4605      	mov	r5, r0
 8006e12:	4620      	mov	r0, r4
 8006e14:	f002 f94c 	bl	80090b0 <get_tensor_byte_size>
 8006e18:	4285      	cmp	r5, r0
 8006e1a:	f0c0 811b 	bcc.w	8007054 <ai_platform_network_process+0x3cc>
 8006e1e:	69a3      	ldr	r3, [r4, #24]
 8006e20:	6818      	ldr	r0, [r3, #0]
 8006e22:	f7fe fc19 	bl	8005658 <ai_array_to_buffer_fmt>
 8006e26:	6833      	ldr	r3, [r6, #0]
 8006e28:	4058      	eors	r0, r3
 8006e2a:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006e2e:	f040 81c8 	bne.w	80071c2 <ai_platform_network_process+0x53a>
 8006e32:	6873      	ldr	r3, [r6, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	f000 81bb 	beq.w	80071b0 <ai_platform_network_process+0x528>
 8006e3a:	69b3      	ldr	r3, [r6, #24]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	2b00      	cmp	r3, #0
 8006e40:	f000 81c8 	beq.w	80071d4 <ai_platform_network_process+0x54c>
 8006e44:	9a02      	ldr	r2, [sp, #8]
 8006e46:	4620      	mov	r0, r4
 8006e48:	3701      	adds	r7, #1
 8006e4a:	361c      	adds	r6, #28
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	bf38      	it	cc
 8006e50:	461a      	movcc	r2, r3
 8006e52:	9202      	str	r2, [sp, #8]
 8006e54:	f002 f92c 	bl	80090b0 <get_tensor_byte_size>
 8006e58:	f8c9 0008 	str.w	r0, [r9, #8]
 8006e5c:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	fb00 f303 	mul.w	r3, r0, r3
 8006e66:	f8c9 300c 	str.w	r3, [r9, #12]
 8006e6a:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8006e6e:	440b      	add	r3, r1
 8006e70:	f8c9 1004 	str.w	r1, [r9, #4]
 8006e74:	f84a 300b 	str.w	r3, [sl, fp]
 8006e78:	69a0      	ldr	r0, [r4, #24]
 8006e7a:	6803      	ldr	r3, [r0, #0]
 8006e7c:	009a      	lsls	r2, r3, #2
 8006e7e:	f100 80bb 	bmi.w	8006ff8 <ai_platform_network_process+0x370>
 8006e82:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006e86:	1a9b      	subs	r3, r3, r2
 8006e88:	4419      	add	r1, r3
 8006e8a:	6081      	str	r1, [r0, #8]
 8006e8c:	69a3      	ldr	r3, [r4, #24]
 8006e8e:	f8d9 2004 	ldr.w	r2, [r9, #4]
 8006e92:	60da      	str	r2, [r3, #12]
 8006e94:	f8b8 3000 	ldrh.w	r3, [r8]
 8006e98:	42bb      	cmp	r3, r7
 8006e9a:	d888      	bhi.n	8006dae <ai_platform_network_process+0x126>
 8006e9c:	9d03      	ldr	r5, [sp, #12]
 8006e9e:	9b01      	ldr	r3, [sp, #4]
 8006ea0:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 819f 	beq.w	80071e6 <ai_platform_network_process+0x55e>
 8006ea8:	2a01      	cmp	r2, #1
 8006eaa:	f240 8179 	bls.w	80071a0 <ai_platform_network_process+0x518>
 8006eae:	f8d5 9030 	ldr.w	r9, [r5, #48]	; 0x30
 8006eb2:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	f000 8172 	beq.w	80071a0 <ai_platform_network_process+0x518>
 8006ebc:	9e01      	ldr	r6, [sp, #4]
 8006ebe:	2700      	movs	r7, #0
 8006ec0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	f000 80d3 	beq.w	8007070 <ai_platform_network_process+0x3e8>
 8006eca:	f853 4027 	ldr.w	r4, [r3, r7, lsl #2]
 8006ece:	2c00      	cmp	r4, #0
 8006ed0:	f000 80ce 	beq.w	8007070 <ai_platform_network_process+0x3e8>
 8006ed4:	f8d9 3014 	ldr.w	r3, [r9, #20]
 8006ed8:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006edc:	f8d3 8000 	ldr.w	r8, [r3]
 8006ee0:	eb18 1a07 	adds.w	sl, r8, r7, lsl #4
 8006ee4:	f000 819d 	beq.w	8007222 <ai_platform_network_process+0x59a>
 8006ee8:	69a3      	ldr	r3, [r4, #24]
 8006eea:	2101      	movs	r1, #1
 8006eec:	4630      	mov	r0, r6
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	9301      	str	r3, [sp, #4]
 8006ef2:	f7fe fc55 	bl	80057a0 <ai_buffer_get_size>
 8006ef6:	9b01      	ldr	r3, [sp, #4]
 8006ef8:	4283      	cmp	r3, r0
 8006efa:	f0c0 8151 	bcc.w	80071a0 <ai_platform_network_process+0x518>
 8006efe:	68e0      	ldr	r0, [r4, #12]
 8006f00:	69b1      	ldr	r1, [r6, #24]
 8006f02:	68c2      	ldr	r2, [r0, #12]
 8006f04:	68cb      	ldr	r3, [r1, #12]
 8006f06:	429a      	cmp	r2, r3
 8006f08:	f040 814a 	bne.w	80071a0 <ai_platform_network_process+0x518>
 8006f0c:	6882      	ldr	r2, [r0, #8]
 8006f0e:	688b      	ldr	r3, [r1, #8]
 8006f10:	429a      	cmp	r2, r3
 8006f12:	f040 8145 	bne.w	80071a0 <ai_platform_network_process+0x518>
 8006f16:	6842      	ldr	r2, [r0, #4]
 8006f18:	684b      	ldr	r3, [r1, #4]
 8006f1a:	429a      	cmp	r2, r3
 8006f1c:	f040 8140 	bne.w	80071a0 <ai_platform_network_process+0x518>
 8006f20:	69a3      	ldr	r3, [r4, #24]
 8006f22:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006f26:	f7fe fc2b 	bl	8005780 <ai_array_get_data_byte_size>
 8006f2a:	9001      	str	r0, [sp, #4]
 8006f2c:	4620      	mov	r0, r4
 8006f2e:	f002 f8bf 	bl	80090b0 <get_tensor_byte_size>
 8006f32:	9b01      	ldr	r3, [sp, #4]
 8006f34:	4283      	cmp	r3, r0
 8006f36:	f0c0 8133 	bcc.w	80071a0 <ai_platform_network_process+0x518>
 8006f3a:	69a3      	ldr	r3, [r4, #24]
 8006f3c:	6818      	ldr	r0, [r3, #0]
 8006f3e:	f7fe fb8b 	bl	8005658 <ai_array_to_buffer_fmt>
 8006f42:	6833      	ldr	r3, [r6, #0]
 8006f44:	4058      	eors	r0, r3
 8006f46:	f030 407e 	bics.w	r0, r0, #4261412864	; 0xfe000000
 8006f4a:	f040 815a 	bne.w	8007202 <ai_platform_network_process+0x57a>
 8006f4e:	6873      	ldr	r3, [r6, #4]
 8006f50:	2b00      	cmp	r3, #0
 8006f52:	f000 814e 	beq.w	80071f2 <ai_platform_network_process+0x56a>
 8006f56:	69b3      	ldr	r3, [r6, #24]
 8006f58:	681b      	ldr	r3, [r3, #0]
 8006f5a:	2b00      	cmp	r3, #0
 8006f5c:	f000 8159 	beq.w	8007212 <ai_platform_network_process+0x58a>
 8006f60:	9a02      	ldr	r2, [sp, #8]
 8006f62:	4620      	mov	r0, r4
 8006f64:	3701      	adds	r7, #1
 8006f66:	361c      	adds	r6, #28
 8006f68:	429a      	cmp	r2, r3
 8006f6a:	bf38      	it	cc
 8006f6c:	461a      	movcc	r2, r3
 8006f6e:	9202      	str	r2, [sp, #8]
 8006f70:	f002 f89e 	bl	80090b0 <get_tensor_byte_size>
 8006f74:	f8ca 0008 	str.w	r0, [sl, #8]
 8006f78:	f856 3c04 	ldr.w	r3, [r6, #-4]
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	fb00 f303 	mul.w	r3, r0, r3
 8006f82:	f8ca 300c 	str.w	r3, [sl, #12]
 8006f86:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8006f8a:	440b      	add	r3, r1
 8006f8c:	f8ca 1004 	str.w	r1, [sl, #4]
 8006f90:	f848 300b 	str.w	r3, [r8, fp]
 8006f94:	69a0      	ldr	r0, [r4, #24]
 8006f96:	6803      	ldr	r3, [r0, #0]
 8006f98:	009b      	lsls	r3, r3, #2
 8006f9a:	d464      	bmi.n	8007066 <ai_platform_network_process+0x3de>
 8006f9c:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006fa0:	1a9b      	subs	r3, r3, r2
 8006fa2:	4419      	add	r1, r3
 8006fa4:	6081      	str	r1, [r0, #8]
 8006fa6:	69a3      	ldr	r3, [r4, #24]
 8006fa8:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006fac:	60da      	str	r2, [r3, #12]
 8006fae:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 8006fb2:	429f      	cmp	r7, r3
 8006fb4:	d384      	bcc.n	8006ec0 <ai_platform_network_process+0x238>
 8006fb6:	e05b      	b.n	8007070 <ai_platform_network_process+0x3e8>
 8006fb8:	e7fe      	b.n	8006fb8 <ai_platform_network_process+0x330>
 8006fba:	68ea      	ldr	r2, [r5, #12]
 8006fbc:	616b      	str	r3, [r5, #20]
 8006fbe:	f002 0203 	and.w	r2, r2, #3
 8006fc2:	2a03      	cmp	r2, #3
 8006fc4:	d039      	beq.n	800703a <ai_platform_network_process+0x3b2>
 8006fc6:	2230      	movs	r2, #48	; 0x30
 8006fc8:	2111      	movs	r1, #17
 8006fca:	f105 0010 	add.w	r0, r5, #16
 8006fce:	2400      	movs	r4, #0
 8006fd0:	f000 fb5a 	bl	8007688 <core_set_error>
 8006fd4:	4620      	mov	r0, r4
 8006fd6:	b005      	add	sp, #20
 8006fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fdc:	4a0c      	ldr	r2, [pc, #48]	; (8007010 <ai_platform_network_process+0x388>)
 8006fde:	2301      	movs	r3, #1
 8006fe0:	6093      	str	r3, [r2, #8]
 8006fe2:	6893      	ldr	r3, [r2, #8]
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d1fc      	bne.n	8006fe2 <ai_platform_network_process+0x35a>
 8006fe8:	4b07      	ldr	r3, [pc, #28]	; (8007008 <ai_platform_network_process+0x380>)
 8006fea:	6013      	str	r3, [r2, #0]
 8006fec:	4b07      	ldr	r3, [pc, #28]	; (800700c <ai_platform_network_process+0x384>)
 8006fee:	6812      	ldr	r2, [r2, #0]
 8006ff0:	429a      	cmp	r2, r3
 8006ff2:	f43f aeb6 	beq.w	8006d62 <ai_platform_network_process+0xda>
 8006ff6:	e7fe      	b.n	8006ff6 <ai_platform_network_process+0x36e>
 8006ff8:	f8b8 3000 	ldrh.w	r3, [r8]
 8006ffc:	429f      	cmp	r7, r3
 8006ffe:	f4ff aed6 	bcc.w	8006dae <ai_platform_network_process+0x126>
 8007002:	e74b      	b.n	8006e9c <ai_platform_network_process+0x214>
 8007004:	58024000 	.word	0x58024000
 8007008:	f407a5c2 	.word	0xf407a5c2
 800700c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007010:	40023000 	.word	0x40023000
 8007014:	4a87      	ldr	r2, [pc, #540]	; (8007234 <ai_platform_network_process+0x5ac>)
 8007016:	2301      	movs	r3, #1
 8007018:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800701c:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007020:	2b00      	cmp	r3, #0
 8007022:	d1fb      	bne.n	800701c <ai_platform_network_process+0x394>
 8007024:	4b84      	ldr	r3, [pc, #528]	; (8007238 <ai_platform_network_process+0x5b0>)
 8007026:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800702a:	4b84      	ldr	r3, [pc, #528]	; (800723c <ai_platform_network_process+0x5b4>)
 800702c:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007030:	429a      	cmp	r2, r3
 8007032:	f43f ae96 	beq.w	8006d62 <ai_platform_network_process+0xda>
 8007036:	e7fe      	b.n	8007036 <ai_platform_network_process+0x3ae>
 8007038:	9d03      	ldr	r5, [sp, #12]
 800703a:	2400      	movs	r4, #0
 800703c:	2217      	movs	r2, #23
 800703e:	2112      	movs	r1, #18
 8007040:	f105 0010 	add.w	r0, r5, #16
 8007044:	f000 fb20 	bl	8007688 <core_set_error>
 8007048:	4620      	mov	r0, r4
 800704a:	b005      	add	sp, #20
 800704c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007050:	462c      	mov	r4, r5
 8007052:	e7bf      	b.n	8006fd4 <ai_platform_network_process+0x34c>
 8007054:	9d03      	ldr	r5, [sp, #12]
 8007056:	2218      	movs	r2, #24
 8007058:	2112      	movs	r1, #18
 800705a:	2400      	movs	r4, #0
 800705c:	f105 0010 	add.w	r0, r5, #16
 8007060:	f000 fb12 	bl	8007688 <core_set_error>
 8007064:	e7b6      	b.n	8006fd4 <ai_platform_network_process+0x34c>
 8007066:	f8b9 300c 	ldrh.w	r3, [r9, #12]
 800706a:	429f      	cmp	r7, r3
 800706c:	f4ff af28 	bcc.w	8006ec0 <ai_platform_network_process+0x238>
 8007070:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 8007074:	8daa      	ldrh	r2, [r5, #44]	; 0x2c
 8007076:	82ab      	strh	r3, [r5, #20]
 8007078:	2a00      	cmp	r2, #0
 800707a:	f040 808b 	bne.w	8007194 <ai_platform_network_process+0x50c>
 800707e:	4616      	mov	r6, r2
 8007080:	4617      	mov	r7, r2
 8007082:	8aec      	ldrh	r4, [r5, #22]
 8007084:	429c      	cmp	r4, r3
 8007086:	d2a5      	bcs.n	8006fd4 <ai_platform_network_process+0x34c>
 8007088:	46ab      	mov	fp, r5
 800708a:	2e00      	cmp	r6, #0
 800708c:	d030      	beq.n	80070f0 <ai_platform_network_process+0x468>
 800708e:	f04f 0800 	mov.w	r8, #0
 8007092:	e014      	b.n	80070be <ai_platform_network_process+0x436>
 8007094:	6882      	ldr	r2, [r0, #8]
 8007096:	68c5      	ldr	r5, [r0, #12]
 8007098:	6863      	ldr	r3, [r4, #4]
 800709a:	1b52      	subs	r2, r2, r5
 800709c:	4413      	add	r3, r2
 800709e:	6083      	str	r3, [r0, #8]
 80070a0:	698b      	ldr	r3, [r1, #24]
 80070a2:	6862      	ldr	r2, [r4, #4]
 80070a4:	60da      	str	r2, [r3, #12]
 80070a6:	f859 200a 	ldr.w	r2, [r9, sl]
 80070aa:	f108 0801 	add.w	r8, r8, #1
 80070ae:	e9d4 3101 	ldrd	r3, r1, [r4, #4]
 80070b2:	440b      	add	r3, r1
 80070b4:	4293      	cmp	r3, r2
 80070b6:	d301      	bcc.n	80070bc <ai_platform_network_process+0x434>
 80070b8:	68e3      	ldr	r3, [r4, #12]
 80070ba:	1ad3      	subs	r3, r2, r3
 80070bc:	6063      	str	r3, [r4, #4]
 80070be:	8833      	ldrh	r3, [r6, #0]
 80070c0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80070c4:	4543      	cmp	r3, r8
 80070c6:	d913      	bls.n	80070f0 <ai_platform_network_process+0x468>
 80070c8:	6873      	ldr	r3, [r6, #4]
 80070ca:	b18b      	cbz	r3, 80070f0 <ai_platform_network_process+0x468>
 80070cc:	f853 1028 	ldr.w	r1, [r3, r8, lsl #2]
 80070d0:	b171      	cbz	r1, 80070f0 <ai_platform_network_process+0x468>
 80070d2:	6988      	ldr	r0, [r1, #24]
 80070d4:	68b2      	ldr	r2, [r6, #8]
 80070d6:	6803      	ldr	r3, [r0, #0]
 80070d8:	f8d2 9000 	ldr.w	r9, [r2]
 80070dc:	009d      	lsls	r5, r3, #2
 80070de:	eb09 1408 	add.w	r4, r9, r8, lsl #4
 80070e2:	d5d7      	bpl.n	8007094 <ai_platform_network_process+0x40c>
 80070e4:	6881      	ldr	r1, [r0, #8]
 80070e6:	68a2      	ldr	r2, [r4, #8]
 80070e8:	6860      	ldr	r0, [r4, #4]
 80070ea:	f001 ff39 	bl	8008f60 <st_int8_copy>
 80070ee:	e7da      	b.n	80070a6 <ai_platform_network_process+0x41e>
 80070f0:	4658      	mov	r0, fp
 80070f2:	f000 fb2d 	bl	8007750 <ai_layers_forward_all>
 80070f6:	2f00      	cmp	r7, #0
 80070f8:	d03d      	beq.n	8007176 <ai_platform_network_process+0x4ee>
 80070fa:	2400      	movs	r4, #0
 80070fc:	e016      	b.n	800712c <ai_platform_network_process+0x4a4>
 80070fe:	e9d8 3201 	ldrd	r3, r2, [r8, #4]
 8007102:	f859 100a 	ldr.w	r1, [r9, sl]
 8007106:	4413      	add	r3, r2
 8007108:	428b      	cmp	r3, r1
 800710a:	d302      	bcc.n	8007112 <ai_platform_network_process+0x48a>
 800710c:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8007110:	1acb      	subs	r3, r1, r3
 8007112:	f8c8 3004 	str.w	r3, [r8, #4]
 8007116:	6981      	ldr	r1, [r0, #24]
 8007118:	e9d1 2502 	ldrd	r2, r5, [r1, #8]
 800711c:	1b52      	subs	r2, r2, r5
 800711e:	4413      	add	r3, r2
 8007120:	608b      	str	r3, [r1, #8]
 8007122:	6983      	ldr	r3, [r0, #24]
 8007124:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8007128:	60da      	str	r2, [r3, #12]
 800712a:	3401      	adds	r4, #1
 800712c:	883b      	ldrh	r3, [r7, #0]
 800712e:	42a3      	cmp	r3, r4
 8007130:	d921      	bls.n	8007176 <ai_platform_network_process+0x4ee>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	b1fb      	cbz	r3, 8007176 <ai_platform_network_process+0x4ee>
 8007136:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
 800713a:	b1e0      	cbz	r0, 8007176 <ai_platform_network_process+0x4ee>
 800713c:	68ba      	ldr	r2, [r7, #8]
 800713e:	ea4f 1a04 	mov.w	sl, r4, lsl #4
 8007142:	6983      	ldr	r3, [r0, #24]
 8007144:	f8d2 9000 	ldr.w	r9, [r2]
 8007148:	681a      	ldr	r2, [r3, #0]
 800714a:	eb09 1804 	add.w	r8, r9, r4, lsl #4
 800714e:	0092      	lsls	r2, r2, #2
 8007150:	d5d5      	bpl.n	80070fe <ai_platform_network_process+0x476>
 8007152:	6898      	ldr	r0, [r3, #8]
 8007154:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8007158:	f001 ff02 	bl	8008f60 <st_int8_copy>
 800715c:	f859 200a 	ldr.w	r2, [r9, sl]
 8007160:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8007164:	440b      	add	r3, r1
 8007166:	4293      	cmp	r3, r2
 8007168:	d302      	bcc.n	8007170 <ai_platform_network_process+0x4e8>
 800716a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	f8c8 3004 	str.w	r3, [r8, #4]
 8007174:	e7d9      	b.n	800712a <ai_platform_network_process+0x4a2>
 8007176:	f8bb 4016 	ldrh.w	r4, [fp, #22]
 800717a:	f8bb 3014 	ldrh.w	r3, [fp, #20]
 800717e:	3401      	adds	r4, #1
 8007180:	b2a4      	uxth	r4, r4
 8007182:	42a3      	cmp	r3, r4
 8007184:	f8ab 4016 	strh.w	r4, [fp, #22]
 8007188:	f63f af7f 	bhi.w	800708a <ai_platform_network_process+0x402>
 800718c:	4620      	mov	r0, r4
 800718e:	b005      	add	sp, #20
 8007190:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007194:	2a01      	cmp	r2, #1
 8007196:	6b2e      	ldr	r6, [r5, #48]	; 0x30
 8007198:	d029      	beq.n	80071ee <ai_platform_network_process+0x566>
 800719a:	f106 070c 	add.w	r7, r6, #12
 800719e:	e770      	b.n	8007082 <ai_platform_network_process+0x3fa>
 80071a0:	2218      	movs	r2, #24
 80071a2:	2113      	movs	r1, #19
 80071a4:	f105 0010 	add.w	r0, r5, #16
 80071a8:	2400      	movs	r4, #0
 80071aa:	f000 fa6d 	bl	8007688 <core_set_error>
 80071ae:	e711      	b.n	8006fd4 <ai_platform_network_process+0x34c>
 80071b0:	9d03      	ldr	r5, [sp, #12]
 80071b2:	4604      	mov	r4, r0
 80071b4:	2217      	movs	r2, #23
 80071b6:	2112      	movs	r1, #18
 80071b8:	f105 0010 	add.w	r0, r5, #16
 80071bc:	f000 fa64 	bl	8007688 <core_set_error>
 80071c0:	e708      	b.n	8006fd4 <ai_platform_network_process+0x34c>
 80071c2:	9d03      	ldr	r5, [sp, #12]
 80071c4:	2219      	movs	r2, #25
 80071c6:	2112      	movs	r1, #18
 80071c8:	2400      	movs	r4, #0
 80071ca:	f105 0010 	add.w	r0, r5, #16
 80071ce:	f000 fa5b 	bl	8007688 <core_set_error>
 80071d2:	e6ff      	b.n	8006fd4 <ai_platform_network_process+0x34c>
 80071d4:	9d03      	ldr	r5, [sp, #12]
 80071d6:	4604      	mov	r4, r0
 80071d8:	2221      	movs	r2, #33	; 0x21
 80071da:	2112      	movs	r1, #18
 80071dc:	f105 0010 	add.w	r0, r5, #16
 80071e0:	f000 fa52 	bl	8007688 <core_set_error>
 80071e4:	e6f6      	b.n	8006fd4 <ai_platform_network_process+0x34c>
 80071e6:	f8bd 3008 	ldrh.w	r3, [sp, #8]
 80071ea:	82ab      	strh	r3, [r5, #20]
 80071ec:	e744      	b.n	8007078 <ai_platform_network_process+0x3f0>
 80071ee:	2700      	movs	r7, #0
 80071f0:	e747      	b.n	8007082 <ai_platform_network_process+0x3fa>
 80071f2:	4604      	mov	r4, r0
 80071f4:	2217      	movs	r2, #23
 80071f6:	2113      	movs	r1, #19
 80071f8:	f105 0010 	add.w	r0, r5, #16
 80071fc:	f000 fa44 	bl	8007688 <core_set_error>
 8007200:	e6e8      	b.n	8006fd4 <ai_platform_network_process+0x34c>
 8007202:	2219      	movs	r2, #25
 8007204:	2113      	movs	r1, #19
 8007206:	f105 0010 	add.w	r0, r5, #16
 800720a:	2400      	movs	r4, #0
 800720c:	f000 fa3c 	bl	8007688 <core_set_error>
 8007210:	e6e0      	b.n	8006fd4 <ai_platform_network_process+0x34c>
 8007212:	4604      	mov	r4, r0
 8007214:	2221      	movs	r2, #33	; 0x21
 8007216:	2113      	movs	r1, #19
 8007218:	f105 0010 	add.w	r0, r5, #16
 800721c:	f000 fa34 	bl	8007688 <core_set_error>
 8007220:	e6d8      	b.n	8006fd4 <ai_platform_network_process+0x34c>
 8007222:	2217      	movs	r2, #23
 8007224:	2113      	movs	r1, #19
 8007226:	f105 0010 	add.w	r0, r5, #16
 800722a:	4654      	mov	r4, sl
 800722c:	f000 fa2c 	bl	8007688 <core_set_error>
 8007230:	e6d0      	b.n	8006fd4 <ai_platform_network_process+0x34c>
 8007232:	bf00      	nop
 8007234:	58024000 	.word	0x58024000
 8007238:	f407a5c2 	.word	0xf407a5c2
 800723c:	b5e8b5cd 	.word	0xb5e8b5cd

08007240 <ai_platform_observer_node_info>:
 8007240:	b570      	push	{r4, r5, r6, lr}
 8007242:	4604      	mov	r4, r0
 8007244:	460d      	mov	r5, r1
 8007246:	b120      	cbz	r0, 8007252 <ai_platform_observer_node_info+0x12>
 8007248:	4b61      	ldr	r3, [pc, #388]	; (80073d0 <ai_platform_observer_node_info+0x190>)
 800724a:	6802      	ldr	r2, [r0, #0]
 800724c:	429a      	cmp	r2, r3
 800724e:	bf18      	it	ne
 8007250:	2400      	movne	r4, #0
 8007252:	f7fe fb85 	bl	8005960 <_ai_platform_acquire_crc>
 8007256:	4b5f      	ldr	r3, [pc, #380]	; (80073d4 <ai_platform_observer_node_info+0x194>)
 8007258:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007262:	189a      	adds	r2, r3, r2
 8007264:	2a01      	cmp	r2, #1
 8007266:	d929      	bls.n	80072bc <ai_platform_observer_node_info+0x7c>
 8007268:	f240 4249 	movw	r2, #1097	; 0x449
 800726c:	4293      	cmp	r3, r2
 800726e:	d025      	beq.n	80072bc <ai_platform_observer_node_info+0x7c>
 8007270:	4a59      	ldr	r2, [pc, #356]	; (80073d8 <ai_platform_observer_node_info+0x198>)
 8007272:	6813      	ldr	r3, [r2, #0]
 8007274:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007278:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 800727c:	d02b      	beq.n	80072d6 <ai_platform_observer_node_info+0x96>
 800727e:	6813      	ldr	r3, [r2, #0]
 8007280:	f240 4183 	movw	r1, #1155	; 0x483
 8007284:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007288:	428b      	cmp	r3, r1
 800728a:	d06c      	beq.n	8007366 <ai_platform_observer_node_info+0x126>
 800728c:	6813      	ldr	r3, [r2, #0]
 800728e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007292:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007296:	d051      	beq.n	800733c <ai_platform_observer_node_info+0xfc>
 8007298:	6813      	ldr	r3, [r2, #0]
 800729a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800729e:	2b00      	cmp	r3, #0
 80072a0:	d129      	bne.n	80072f6 <ai_platform_observer_node_info+0xb6>
 80072a2:	4a4e      	ldr	r2, [pc, #312]	; (80073dc <ai_platform_observer_node_info+0x19c>)
 80072a4:	2301      	movs	r3, #1
 80072a6:	6093      	str	r3, [r2, #8]
 80072a8:	6893      	ldr	r3, [r2, #8]
 80072aa:	2b00      	cmp	r3, #0
 80072ac:	d1fc      	bne.n	80072a8 <ai_platform_observer_node_info+0x68>
 80072ae:	4b4c      	ldr	r3, [pc, #304]	; (80073e0 <ai_platform_observer_node_info+0x1a0>)
 80072b0:	6013      	str	r3, [r2, #0]
 80072b2:	4b4c      	ldr	r3, [pc, #304]	; (80073e4 <ai_platform_observer_node_info+0x1a4>)
 80072b4:	6812      	ldr	r2, [r2, #0]
 80072b6:	429a      	cmp	r2, r3
 80072b8:	d01d      	beq.n	80072f6 <ai_platform_observer_node_info+0xb6>
 80072ba:	e7fe      	b.n	80072ba <ai_platform_observer_node_info+0x7a>
 80072bc:	4a47      	ldr	r2, [pc, #284]	; (80073dc <ai_platform_observer_node_info+0x19c>)
 80072be:	2301      	movs	r3, #1
 80072c0:	6093      	str	r3, [r2, #8]
 80072c2:	6893      	ldr	r3, [r2, #8]
 80072c4:	2b00      	cmp	r3, #0
 80072c6:	d1fc      	bne.n	80072c2 <ai_platform_observer_node_info+0x82>
 80072c8:	4b45      	ldr	r3, [pc, #276]	; (80073e0 <ai_platform_observer_node_info+0x1a0>)
 80072ca:	6013      	str	r3, [r2, #0]
 80072cc:	4b45      	ldr	r3, [pc, #276]	; (80073e4 <ai_platform_observer_node_info+0x1a4>)
 80072ce:	6812      	ldr	r2, [r2, #0]
 80072d0:	429a      	cmp	r2, r3
 80072d2:	d010      	beq.n	80072f6 <ai_platform_observer_node_info+0xb6>
 80072d4:	e7fe      	b.n	80072d4 <ai_platform_observer_node_info+0x94>
 80072d6:	4a44      	ldr	r2, [pc, #272]	; (80073e8 <ai_platform_observer_node_info+0x1a8>)
 80072d8:	2301      	movs	r3, #1
 80072da:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80072de:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80072e2:	2b00      	cmp	r3, #0
 80072e4:	d1fb      	bne.n	80072de <ai_platform_observer_node_info+0x9e>
 80072e6:	4b3e      	ldr	r3, [pc, #248]	; (80073e0 <ai_platform_observer_node_info+0x1a0>)
 80072e8:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 80072ec:	4b3d      	ldr	r3, [pc, #244]	; (80073e4 <ai_platform_observer_node_info+0x1a4>)
 80072ee:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d121      	bne.n	800733a <ai_platform_observer_node_info+0xfa>
 80072f6:	f7fe fb35 	bl	8005964 <_ai_platform_release_crc>
 80072fa:	2d00      	cmp	r5, #0
 80072fc:	bf18      	it	ne
 80072fe:	2c00      	cmpne	r4, #0
 8007300:	bf0c      	ite	eq
 8007302:	2601      	moveq	r6, #1
 8007304:	2600      	movne	r6, #0
 8007306:	d026      	beq.n	8007356 <ai_platform_observer_node_info+0x116>
 8007308:	68e3      	ldr	r3, [r4, #12]
 800730a:	079b      	lsls	r3, r3, #30
 800730c:	d54b      	bpl.n	80073a6 <ai_platform_observer_node_info+0x166>
 800730e:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007310:	4631      	mov	r1, r6
 8007312:	e000      	b.n	8007316 <ai_platform_observer_node_info+0xd6>
 8007314:	b14a      	cbz	r2, 800732a <ai_platform_observer_node_info+0xea>
 8007316:	b288      	uxth	r0, r1
 8007318:	3101      	adds	r1, #1
 800731a:	b133      	cbz	r3, 800732a <ai_platform_observer_node_info+0xea>
 800731c:	882a      	ldrh	r2, [r5, #0]
 800731e:	4282      	cmp	r2, r0
 8007320:	d032      	beq.n	8007388 <ai_platform_observer_node_info+0x148>
 8007322:	691a      	ldr	r2, [r3, #16]
 8007324:	429a      	cmp	r2, r3
 8007326:	4613      	mov	r3, r2
 8007328:	d1f4      	bne.n	8007314 <ai_platform_observer_node_info+0xd4>
 800732a:	2214      	movs	r2, #20
 800732c:	f104 0010 	add.w	r0, r4, #16
 8007330:	4611      	mov	r1, r2
 8007332:	f000 f9a9 	bl	8007688 <core_set_error>
 8007336:	4630      	mov	r0, r6
 8007338:	bd70      	pop	{r4, r5, r6, pc}
 800733a:	e7fe      	b.n	800733a <ai_platform_observer_node_info+0xfa>
 800733c:	4a27      	ldr	r2, [pc, #156]	; (80073dc <ai_platform_observer_node_info+0x19c>)
 800733e:	2301      	movs	r3, #1
 8007340:	6093      	str	r3, [r2, #8]
 8007342:	6893      	ldr	r3, [r2, #8]
 8007344:	2b00      	cmp	r3, #0
 8007346:	d1fc      	bne.n	8007342 <ai_platform_observer_node_info+0x102>
 8007348:	4b25      	ldr	r3, [pc, #148]	; (80073e0 <ai_platform_observer_node_info+0x1a0>)
 800734a:	6013      	str	r3, [r2, #0]
 800734c:	4b25      	ldr	r3, [pc, #148]	; (80073e4 <ai_platform_observer_node_info+0x1a4>)
 800734e:	6812      	ldr	r2, [r2, #0]
 8007350:	429a      	cmp	r2, r3
 8007352:	d0d0      	beq.n	80072f6 <ai_platform_observer_node_info+0xb6>
 8007354:	e7fe      	b.n	8007354 <ai_platform_observer_node_info+0x114>
 8007356:	b364      	cbz	r4, 80073b2 <ai_platform_observer_node_info+0x172>
 8007358:	2210      	movs	r2, #16
 800735a:	2600      	movs	r6, #0
 800735c:	18a0      	adds	r0, r4, r2
 800735e:	4611      	mov	r1, r2
 8007360:	f000 f992 	bl	8007688 <core_set_error>
 8007364:	e7e7      	b.n	8007336 <ai_platform_observer_node_info+0xf6>
 8007366:	4a20      	ldr	r2, [pc, #128]	; (80073e8 <ai_platform_observer_node_info+0x1a8>)
 8007368:	2301      	movs	r3, #1
 800736a:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800736e:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007372:	2b00      	cmp	r3, #0
 8007374:	d1fb      	bne.n	800736e <ai_platform_observer_node_info+0x12e>
 8007376:	4b1a      	ldr	r3, [pc, #104]	; (80073e0 <ai_platform_observer_node_info+0x1a0>)
 8007378:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800737c:	4b19      	ldr	r3, [pc, #100]	; (80073e4 <ai_platform_observer_node_info+0x1a4>)
 800737e:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007382:	429a      	cmp	r2, r3
 8007384:	d0b7      	beq.n	80072f6 <ai_platform_observer_node_info+0xb6>
 8007386:	e7fe      	b.n	8007386 <ai_platform_observer_node_info+0x146>
 8007388:	6999      	ldr	r1, [r3, #24]
 800738a:	f240 120f 	movw	r2, #271	; 0x10f
 800738e:	60e9      	str	r1, [r5, #12]
 8007390:	8819      	ldrh	r1, [r3, #0]
 8007392:	4291      	cmp	r1, r2
 8007394:	d00f      	beq.n	80073b6 <ai_platform_observer_node_info+0x176>
 8007396:	8859      	ldrh	r1, [r3, #2]
 8007398:	2200      	movs	r2, #0
 800739a:	2601      	movs	r6, #1
 800739c:	80a9      	strh	r1, [r5, #4]
 800739e:	881b      	ldrh	r3, [r3, #0]
 80073a0:	60aa      	str	r2, [r5, #8]
 80073a2:	806b      	strh	r3, [r5, #2]
 80073a4:	e7c7      	b.n	8007336 <ai_platform_observer_node_info+0xf6>
 80073a6:	2210      	movs	r2, #16
 80073a8:	2111      	movs	r1, #17
 80073aa:	18a0      	adds	r0, r4, r2
 80073ac:	f000 f96c 	bl	8007688 <core_set_error>
 80073b0:	e7c1      	b.n	8007336 <ai_platform_observer_node_info+0xf6>
 80073b2:	4626      	mov	r6, r4
 80073b4:	e7bf      	b.n	8007336 <ai_platform_observer_node_info+0xf6>
 80073b6:	69da      	ldr	r2, [r3, #28]
 80073b8:	2601      	movs	r6, #1
 80073ba:	8853      	ldrh	r3, [r2, #2]
 80073bc:	80ab      	strh	r3, [r5, #4]
 80073be:	8813      	ldrh	r3, [r2, #0]
 80073c0:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80073c4:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80073c8:	806b      	strh	r3, [r5, #2]
 80073ca:	6993      	ldr	r3, [r2, #24]
 80073cc:	60ab      	str	r3, [r5, #8]
 80073ce:	e7b2      	b.n	8007336 <ai_platform_observer_node_info+0xf6>
 80073d0:	a1c00100 	.word	0xa1c00100
 80073d4:	e0042000 	.word	0xe0042000
 80073d8:	5c001000 	.word	0x5c001000
 80073dc:	40023000 	.word	0x40023000
 80073e0:	f407a5c2 	.word	0xf407a5c2
 80073e4:	b5e8b5cd 	.word	0xb5e8b5cd
 80073e8:	58024000 	.word	0x58024000

080073ec <ai_platform_observer_register>:
 80073ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80073f0:	2800      	cmp	r0, #0
 80073f2:	d042      	beq.n	800747a <ai_platform_observer_register+0x8e>
 80073f4:	4690      	mov	r8, r2
 80073f6:	461e      	mov	r6, r3
 80073f8:	6802      	ldr	r2, [r0, #0]
 80073fa:	4604      	mov	r4, r0
 80073fc:	4b96      	ldr	r3, [pc, #600]	; (8007658 <ai_platform_observer_register+0x26c>)
 80073fe:	429a      	cmp	r2, r3
 8007400:	d13b      	bne.n	800747a <ai_platform_observer_register+0x8e>
 8007402:	460f      	mov	r7, r1
 8007404:	f7fe faac 	bl	8005960 <_ai_platform_acquire_crc>
 8007408:	4b94      	ldr	r3, [pc, #592]	; (800765c <ai_platform_observer_register+0x270>)
 800740a:	f46f 628a 	mvn.w	r2, #1104	; 0x450
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007414:	189a      	adds	r2, r3, r2
 8007416:	2a01      	cmp	r2, #1
 8007418:	f240 8088 	bls.w	800752c <ai_platform_observer_register+0x140>
 800741c:	f240 4249 	movw	r2, #1097	; 0x449
 8007420:	4293      	cmp	r3, r2
 8007422:	f000 8083 	beq.w	800752c <ai_platform_observer_register+0x140>
 8007426:	4a8e      	ldr	r2, [pc, #568]	; (8007660 <ai_platform_observer_register+0x274>)
 8007428:	6813      	ldr	r3, [r2, #0]
 800742a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800742e:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 8007432:	f000 8089 	beq.w	8007548 <ai_platform_observer_register+0x15c>
 8007436:	6813      	ldr	r3, [r2, #0]
 8007438:	f240 4183 	movw	r1, #1155	; 0x483
 800743c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8007440:	428b      	cmp	r3, r1
 8007442:	f000 80d6 	beq.w	80075f2 <ai_platform_observer_register+0x206>
 8007446:	6813      	ldr	r3, [r2, #0]
 8007448:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800744c:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 8007450:	f000 80ee 	beq.w	8007630 <ai_platform_observer_register+0x244>
 8007454:	6813      	ldr	r3, [r2, #0]
 8007456:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800745a:	2b00      	cmp	r3, #0
 800745c:	f040 8084 	bne.w	8007568 <ai_platform_observer_register+0x17c>
 8007460:	4a80      	ldr	r2, [pc, #512]	; (8007664 <ai_platform_observer_register+0x278>)
 8007462:	2301      	movs	r3, #1
 8007464:	6093      	str	r3, [r2, #8]
 8007466:	6893      	ldr	r3, [r2, #8]
 8007468:	2b00      	cmp	r3, #0
 800746a:	d1fc      	bne.n	8007466 <ai_platform_observer_register+0x7a>
 800746c:	4b7e      	ldr	r3, [pc, #504]	; (8007668 <ai_platform_observer_register+0x27c>)
 800746e:	6013      	str	r3, [r2, #0]
 8007470:	4b7e      	ldr	r3, [pc, #504]	; (800766c <ai_platform_observer_register+0x280>)
 8007472:	6812      	ldr	r2, [r2, #0]
 8007474:	429a      	cmp	r2, r3
 8007476:	d077      	beq.n	8007568 <ai_platform_observer_register+0x17c>
 8007478:	e7fe      	b.n	8007478 <ai_platform_observer_register+0x8c>
 800747a:	f7fe fa71 	bl	8005960 <_ai_platform_acquire_crc>
 800747e:	4b77      	ldr	r3, [pc, #476]	; (800765c <ai_platform_observer_register+0x270>)
 8007480:	f46f 618a 	mvn.w	r1, #1104	; 0x450
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800748a:	185a      	adds	r2, r3, r1
 800748c:	2a01      	cmp	r2, #1
 800748e:	d92b      	bls.n	80074e8 <ai_platform_observer_register+0xfc>
 8007490:	f240 4249 	movw	r2, #1097	; 0x449
 8007494:	4293      	cmp	r3, r2
 8007496:	d027      	beq.n	80074e8 <ai_platform_observer_register+0xfc>
 8007498:	4a71      	ldr	r2, [pc, #452]	; (8007660 <ai_platform_observer_register+0x274>)
 800749a:	6813      	ldr	r3, [r2, #0]
 800749c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074a0:	f5b3 6f8a 	cmp.w	r3, #1104	; 0x450
 80074a4:	d02d      	beq.n	8007502 <ai_platform_observer_register+0x116>
 80074a6:	6813      	ldr	r3, [r2, #0]
 80074a8:	f240 4183 	movw	r1, #1155	; 0x483
 80074ac:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074b0:	428b      	cmp	r3, r1
 80074b2:	f000 808d 	beq.w	80075d0 <ai_platform_observer_register+0x1e4>
 80074b6:	6813      	ldr	r3, [r2, #0]
 80074b8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074bc:	f5b3 6f90 	cmp.w	r3, #1152	; 0x480
 80074c0:	f000 80a8 	beq.w	8007614 <ai_platform_observer_register+0x228>
 80074c4:	6813      	ldr	r3, [r2, #0]
 80074c6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d129      	bne.n	8007522 <ai_platform_observer_register+0x136>
 80074ce:	4a65      	ldr	r2, [pc, #404]	; (8007664 <ai_platform_observer_register+0x278>)
 80074d0:	2301      	movs	r3, #1
 80074d2:	6093      	str	r3, [r2, #8]
 80074d4:	6893      	ldr	r3, [r2, #8]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d1fc      	bne.n	80074d4 <ai_platform_observer_register+0xe8>
 80074da:	4963      	ldr	r1, [pc, #396]	; (8007668 <ai_platform_observer_register+0x27c>)
 80074dc:	4b63      	ldr	r3, [pc, #396]	; (800766c <ai_platform_observer_register+0x280>)
 80074de:	6011      	str	r1, [r2, #0]
 80074e0:	6812      	ldr	r2, [r2, #0]
 80074e2:	429a      	cmp	r2, r3
 80074e4:	d01d      	beq.n	8007522 <ai_platform_observer_register+0x136>
 80074e6:	e7fe      	b.n	80074e6 <ai_platform_observer_register+0xfa>
 80074e8:	4a5e      	ldr	r2, [pc, #376]	; (8007664 <ai_platform_observer_register+0x278>)
 80074ea:	2301      	movs	r3, #1
 80074ec:	6093      	str	r3, [r2, #8]
 80074ee:	6893      	ldr	r3, [r2, #8]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1fc      	bne.n	80074ee <ai_platform_observer_register+0x102>
 80074f4:	495c      	ldr	r1, [pc, #368]	; (8007668 <ai_platform_observer_register+0x27c>)
 80074f6:	4b5d      	ldr	r3, [pc, #372]	; (800766c <ai_platform_observer_register+0x280>)
 80074f8:	6011      	str	r1, [r2, #0]
 80074fa:	6812      	ldr	r2, [r2, #0]
 80074fc:	429a      	cmp	r2, r3
 80074fe:	d010      	beq.n	8007522 <ai_platform_observer_register+0x136>
 8007500:	e7fe      	b.n	8007500 <ai_platform_observer_register+0x114>
 8007502:	4a5b      	ldr	r2, [pc, #364]	; (8007670 <ai_platform_observer_register+0x284>)
 8007504:	2301      	movs	r3, #1
 8007506:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 800750a:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 800750e:	2b00      	cmp	r3, #0
 8007510:	d1fb      	bne.n	800750a <ai_platform_observer_register+0x11e>
 8007512:	4955      	ldr	r1, [pc, #340]	; (8007668 <ai_platform_observer_register+0x27c>)
 8007514:	4b55      	ldr	r3, [pc, #340]	; (800766c <ai_platform_observer_register+0x280>)
 8007516:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 800751a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800751e:	429a      	cmp	r2, r3
 8007520:	d111      	bne.n	8007546 <ai_platform_observer_register+0x15a>
 8007522:	f7fe fa1f 	bl	8005964 <_ai_platform_release_crc>
 8007526:	2000      	movs	r0, #0
 8007528:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800752c:	4b4d      	ldr	r3, [pc, #308]	; (8007664 <ai_platform_observer_register+0x278>)
 800752e:	2201      	movs	r2, #1
 8007530:	609a      	str	r2, [r3, #8]
 8007532:	689d      	ldr	r5, [r3, #8]
 8007534:	2d00      	cmp	r5, #0
 8007536:	d1fc      	bne.n	8007532 <ai_platform_observer_register+0x146>
 8007538:	4a4b      	ldr	r2, [pc, #300]	; (8007668 <ai_platform_observer_register+0x27c>)
 800753a:	601a      	str	r2, [r3, #0]
 800753c:	681a      	ldr	r2, [r3, #0]
 800753e:	4b4b      	ldr	r3, [pc, #300]	; (800766c <ai_platform_observer_register+0x280>)
 8007540:	429a      	cmp	r2, r3
 8007542:	d011      	beq.n	8007568 <ai_platform_observer_register+0x17c>
 8007544:	e7fe      	b.n	8007544 <ai_platform_observer_register+0x158>
 8007546:	e7fe      	b.n	8007546 <ai_platform_observer_register+0x15a>
 8007548:	4a49      	ldr	r2, [pc, #292]	; (8007670 <ai_platform_observer_register+0x284>)
 800754a:	2301      	movs	r3, #1
 800754c:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 8007550:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 8007554:	2b00      	cmp	r3, #0
 8007556:	d1fb      	bne.n	8007550 <ai_platform_observer_register+0x164>
 8007558:	4b43      	ldr	r3, [pc, #268]	; (8007668 <ai_platform_observer_register+0x27c>)
 800755a:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 800755e:	4b43      	ldr	r3, [pc, #268]	; (800766c <ai_platform_observer_register+0x280>)
 8007560:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 8007564:	429a      	cmp	r2, r3
 8007566:	d10c      	bne.n	8007582 <ai_platform_observer_register+0x196>
 8007568:	f7fe f9fc 	bl	8005964 <_ai_platform_release_crc>
 800756c:	6c25      	ldr	r5, [r4, #64]	; 0x40
 800756e:	b14d      	cbz	r5, 8007584 <ai_platform_observer_register+0x198>
 8007570:	2240      	movs	r2, #64	; 0x40
 8007572:	2111      	movs	r1, #17
 8007574:	f104 0010 	add.w	r0, r4, #16
 8007578:	f000 f886 	bl	8007688 <core_set_error>
 800757c:	2000      	movs	r0, #0
 800757e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007582:	e7fe      	b.n	8007582 <ai_platform_observer_register+0x196>
 8007584:	2014      	movs	r0, #20
 8007586:	f000 f88b 	bl	80076a0 <core_mem_alloc>
 800758a:	4681      	mov	r9, r0
 800758c:	2800      	cmp	r0, #0
 800758e:	d05c      	beq.n	800764a <ai_platform_observer_register+0x25e>
 8007590:	81c5      	strh	r5, [r0, #14]
 8007592:	2101      	movs	r1, #1
 8007594:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8007596:	e007      	b.n	80075a8 <ai_platform_observer_register+0x1bc>
 8007598:	f8a9 100e 	strh.w	r1, [r9, #14]
 800759c:	b2a9      	uxth	r1, r5
 800759e:	691a      	ldr	r2, [r3, #16]
 80075a0:	b12a      	cbz	r2, 80075ae <ai_platform_observer_register+0x1c2>
 80075a2:	429a      	cmp	r2, r3
 80075a4:	4613      	mov	r3, r2
 80075a6:	d002      	beq.n	80075ae <ai_platform_observer_register+0x1c2>
 80075a8:	1c4d      	adds	r5, r1, #1
 80075aa:	2b00      	cmp	r3, #0
 80075ac:	d1f4      	bne.n	8007598 <ai_platform_observer_register+0x1ac>
 80075ae:	2200      	movs	r2, #0
 80075b0:	b2f3      	uxtb	r3, r6
 80075b2:	f8c9 7000 	str.w	r7, [r9]
 80075b6:	2001      	movs	r0, #1
 80075b8:	f8a9 200c 	strh.w	r2, [r9, #12]
 80075bc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80075c0:	4a2c      	ldr	r2, [pc, #176]	; (8007674 <ai_platform_observer_register+0x288>)
 80075c2:	f8c9 8004 	str.w	r8, [r9, #4]
 80075c6:	f8c9 3008 	str.w	r3, [r9, #8]
 80075ca:	e9c4 290f 	strd	r2, r9, [r4, #60]	; 0x3c
 80075ce:	e7ab      	b.n	8007528 <ai_platform_observer_register+0x13c>
 80075d0:	4a27      	ldr	r2, [pc, #156]	; (8007670 <ai_platform_observer_register+0x284>)
 80075d2:	2301      	movs	r3, #1
 80075d4:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80075d8:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d1fb      	bne.n	80075d8 <ai_platform_observer_register+0x1ec>
 80075e0:	4921      	ldr	r1, [pc, #132]	; (8007668 <ai_platform_observer_register+0x27c>)
 80075e2:	4b22      	ldr	r3, [pc, #136]	; (800766c <ai_platform_observer_register+0x280>)
 80075e4:	f8c2 1c00 	str.w	r1, [r2, #3072]	; 0xc00
 80075e8:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d098      	beq.n	8007522 <ai_platform_observer_register+0x136>
 80075f0:	e7fe      	b.n	80075f0 <ai_platform_observer_register+0x204>
 80075f2:	4a1f      	ldr	r2, [pc, #124]	; (8007670 <ai_platform_observer_register+0x284>)
 80075f4:	2301      	movs	r3, #1
 80075f6:	f8c2 3c08 	str.w	r3, [r2, #3080]	; 0xc08
 80075fa:	f8d2 3c08 	ldr.w	r3, [r2, #3080]	; 0xc08
 80075fe:	2b00      	cmp	r3, #0
 8007600:	d1fb      	bne.n	80075fa <ai_platform_observer_register+0x20e>
 8007602:	4b19      	ldr	r3, [pc, #100]	; (8007668 <ai_platform_observer_register+0x27c>)
 8007604:	f8c2 3c00 	str.w	r3, [r2, #3072]	; 0xc00
 8007608:	4b18      	ldr	r3, [pc, #96]	; (800766c <ai_platform_observer_register+0x280>)
 800760a:	f8d2 2c00 	ldr.w	r2, [r2, #3072]	; 0xc00
 800760e:	429a      	cmp	r2, r3
 8007610:	d0aa      	beq.n	8007568 <ai_platform_observer_register+0x17c>
 8007612:	e7fe      	b.n	8007612 <ai_platform_observer_register+0x226>
 8007614:	4a13      	ldr	r2, [pc, #76]	; (8007664 <ai_platform_observer_register+0x278>)
 8007616:	2301      	movs	r3, #1
 8007618:	6093      	str	r3, [r2, #8]
 800761a:	6893      	ldr	r3, [r2, #8]
 800761c:	2b00      	cmp	r3, #0
 800761e:	d1fc      	bne.n	800761a <ai_platform_observer_register+0x22e>
 8007620:	4911      	ldr	r1, [pc, #68]	; (8007668 <ai_platform_observer_register+0x27c>)
 8007622:	4b12      	ldr	r3, [pc, #72]	; (800766c <ai_platform_observer_register+0x280>)
 8007624:	6011      	str	r1, [r2, #0]
 8007626:	6812      	ldr	r2, [r2, #0]
 8007628:	429a      	cmp	r2, r3
 800762a:	f43f af7a 	beq.w	8007522 <ai_platform_observer_register+0x136>
 800762e:	e7fe      	b.n	800762e <ai_platform_observer_register+0x242>
 8007630:	4a0c      	ldr	r2, [pc, #48]	; (8007664 <ai_platform_observer_register+0x278>)
 8007632:	2301      	movs	r3, #1
 8007634:	6093      	str	r3, [r2, #8]
 8007636:	6893      	ldr	r3, [r2, #8]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1fc      	bne.n	8007636 <ai_platform_observer_register+0x24a>
 800763c:	4b0a      	ldr	r3, [pc, #40]	; (8007668 <ai_platform_observer_register+0x27c>)
 800763e:	6013      	str	r3, [r2, #0]
 8007640:	4b0a      	ldr	r3, [pc, #40]	; (800766c <ai_platform_observer_register+0x280>)
 8007642:	6812      	ldr	r2, [r2, #0]
 8007644:	429a      	cmp	r2, r3
 8007646:	d08f      	beq.n	8007568 <ai_platform_observer_register+0x17c>
 8007648:	e7fe      	b.n	8007648 <ai_platform_observer_register+0x25c>
 800764a:	2210      	movs	r2, #16
 800764c:	2131      	movs	r1, #49	; 0x31
 800764e:	18a0      	adds	r0, r4, r2
 8007650:	f000 f81a 	bl	8007688 <core_set_error>
 8007654:	4648      	mov	r0, r9
 8007656:	e767      	b.n	8007528 <ai_platform_observer_register+0x13c>
 8007658:	a1c00100 	.word	0xa1c00100
 800765c:	e0042000 	.word	0xe0042000
 8007660:	5c001000 	.word	0x5c001000
 8007664:	40023000 	.word	0x40023000
 8007668:	f407a5c2 	.word	0xf407a5c2
 800766c:	b5e8b5cd 	.word	0xb5e8b5cd
 8007670:	58024000 	.word	0x58024000
 8007674:	0800583d 	.word	0x0800583d

08007678 <core_init>:
 8007678:	2001      	movs	r0, #1
 800767a:	4770      	bx	lr

0800767c <core_get_error>:
 800767c:	4603      	mov	r3, r0
 800767e:	2200      	movs	r2, #0
 8007680:	6800      	ldr	r0, [r0, #0]
 8007682:	601a      	str	r2, [r3, #0]
 8007684:	4770      	bx	lr
 8007686:	bf00      	nop

08007688 <core_set_error>:
 8007688:	4603      	mov	r3, r0
 800768a:	7800      	ldrb	r0, [r0, #0]
 800768c:	b108      	cbz	r0, 8007692 <core_set_error+0xa>
 800768e:	2000      	movs	r0, #0
 8007690:	4770      	bx	lr
 8007692:	7019      	strb	r1, [r3, #0]
 8007694:	2001      	movs	r0, #1
 8007696:	6819      	ldr	r1, [r3, #0]
 8007698:	f362 211f 	bfi	r1, r2, #8, #24
 800769c:	6019      	str	r1, [r3, #0]
 800769e:	4770      	bx	lr

080076a0 <core_mem_alloc>:
 80076a0:	b150      	cbz	r0, 80076b8 <core_mem_alloc+0x18>
 80076a2:	3004      	adds	r0, #4
 80076a4:	b508      	push	{r3, lr}
 80076a6:	f001 fdcf 	bl	8009248 <malloc>
 80076aa:	4603      	mov	r3, r0
 80076ac:	b110      	cbz	r0, 80076b4 <core_mem_alloc+0x14>
 80076ae:	3004      	adds	r0, #4
 80076b0:	601b      	str	r3, [r3, #0]
 80076b2:	bd08      	pop	{r3, pc}
 80076b4:	2000      	movs	r0, #0
 80076b6:	bd08      	pop	{r3, pc}
 80076b8:	2000      	movs	r0, #0
 80076ba:	4770      	bx	lr

080076bc <ai_check_custom_types>:
 80076bc:	b082      	sub	sp, #8
 80076be:	4b12      	ldr	r3, [pc, #72]	; (8007708 <ai_check_custom_types+0x4c>)
 80076c0:	9301      	str	r3, [sp, #4]
 80076c2:	b118      	cbz	r0, 80076cc <ai_check_custom_types+0x10>
 80076c4:	7803      	ldrb	r3, [r0, #0]
 80076c6:	2b03      	cmp	r3, #3
 80076c8:	d002      	beq.n	80076d0 <ai_check_custom_types+0x14>
 80076ca:	2000      	movs	r0, #0
 80076cc:	b002      	add	sp, #8
 80076ce:	4770      	bx	lr
 80076d0:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80076d4:	4293      	cmp	r3, r2
 80076d6:	d004      	beq.n	80076e2 <ai_check_custom_types+0x26>
 80076d8:	2001      	movs	r0, #1
 80076da:	f080 0001 	eor.w	r0, r0, #1
 80076de:	b002      	add	sp, #8
 80076e0:	4770      	bx	lr
 80076e2:	7842      	ldrb	r2, [r0, #1]
 80076e4:	3001      	adds	r0, #1
 80076e6:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80076ea:	429a      	cmp	r2, r3
 80076ec:	d1f4      	bne.n	80076d8 <ai_check_custom_types+0x1c>
 80076ee:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80076f2:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d1ee      	bne.n	80076d8 <ai_check_custom_types+0x1c>
 80076fa:	7842      	ldrb	r2, [r0, #1]
 80076fc:	f89d 3007 	ldrb.w	r3, [sp, #7]
 8007700:	429a      	cmp	r2, r3
 8007702:	d1e9      	bne.n	80076d8 <ai_check_custom_types+0x1c>
 8007704:	2000      	movs	r0, #0
 8007706:	e7e8      	b.n	80076da <ai_check_custom_types+0x1e>
 8007708:	84048403 	.word	0x84048403

0800770c <ai_layers_init_all>:
 800770c:	2100      	movs	r1, #0
 800770e:	6b43      	ldr	r3, [r0, #52]	; 0x34
 8007710:	b13b      	cbz	r3, 8007722 <ai_layers_init_all+0x16>
 8007712:	691a      	ldr	r2, [r3, #16]
 8007714:	3101      	adds	r1, #1
 8007716:	60d8      	str	r0, [r3, #12]
 8007718:	429a      	cmp	r2, r3
 800771a:	4613      	mov	r3, r2
 800771c:	d001      	beq.n	8007722 <ai_layers_init_all+0x16>
 800771e:	2a00      	cmp	r2, #0
 8007720:	d1f6      	bne.n	8007710 <ai_layers_init_all+0x4>
 8007722:	4608      	mov	r0, r1
 8007724:	4770      	bx	lr
 8007726:	bf00      	nop

08007728 <ai_layers_post_init_all>:
 8007728:	b538      	push	{r3, r4, r5, lr}
 800772a:	2500      	movs	r5, #0
 800772c:	6b44      	ldr	r4, [r0, #52]	; 0x34
 800772e:	b16c      	cbz	r4, 800774c <ai_layers_post_init_all+0x24>
 8007730:	6863      	ldr	r3, [r4, #4]
 8007732:	07db      	lsls	r3, r3, #31
 8007734:	d504      	bpl.n	8007740 <ai_layers_post_init_all+0x18>
 8007736:	6a23      	ldr	r3, [r4, #32]
 8007738:	4620      	mov	r0, r4
 800773a:	b10b      	cbz	r3, 8007740 <ai_layers_post_init_all+0x18>
 800773c:	3501      	adds	r5, #1
 800773e:	4798      	blx	r3
 8007740:	6923      	ldr	r3, [r4, #16]
 8007742:	42a3      	cmp	r3, r4
 8007744:	461c      	mov	r4, r3
 8007746:	d001      	beq.n	800774c <ai_layers_post_init_all+0x24>
 8007748:	2b00      	cmp	r3, #0
 800774a:	d1f0      	bne.n	800772e <ai_layers_post_init_all+0x6>
 800774c:	4628      	mov	r0, r5
 800774e:	bd38      	pop	{r3, r4, r5, pc}

08007750 <ai_layers_forward_all>:
 8007750:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007754:	f8d0 803c 	ldr.w	r8, [r0, #60]	; 0x3c
 8007758:	4604      	mov	r4, r0
 800775a:	f1b8 0f00 	cmp.w	r8, #0
 800775e:	d02a      	beq.n	80077b6 <ai_layers_forward_all+0x66>
 8007760:	6b41      	ldr	r1, [r0, #52]	; 0x34
 8007762:	6381      	str	r1, [r0, #56]	; 0x38
 8007764:	b319      	cbz	r1, 80077ae <ai_layers_forward_all+0x5e>
 8007766:	6c02      	ldr	r2, [r0, #64]	; 0x40
 8007768:	2001      	movs	r0, #1
 800776a:	47c0      	blx	r8
 800776c:	6ba6      	ldr	r6, [r4, #56]	; 0x38
 800776e:	b1f6      	cbz	r6, 80077ae <ai_layers_forward_all+0x5e>
 8007770:	2700      	movs	r7, #0
 8007772:	4631      	mov	r1, r6
 8007774:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007776:	2002      	movs	r0, #2
 8007778:	47c0      	blx	r8
 800777a:	6ba5      	ldr	r5, [r4, #56]	; 0x38
 800777c:	4628      	mov	r0, r5
 800777e:	696b      	ldr	r3, [r5, #20]
 8007780:	4798      	blx	r3
 8007782:	692e      	ldr	r6, [r5, #16]
 8007784:	2003      	movs	r0, #3
 8007786:	6c22      	ldr	r2, [r4, #64]	; 0x40
 8007788:	42b5      	cmp	r5, r6
 800778a:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800778c:	d007      	beq.n	800779e <ai_layers_forward_all+0x4e>
 800778e:	47c0      	blx	r8
 8007790:	3701      	adds	r7, #1
 8007792:	63a6      	str	r6, [r4, #56]	; 0x38
 8007794:	2e00      	cmp	r6, #0
 8007796:	d1ec      	bne.n	8007772 <ai_layers_forward_all+0x22>
 8007798:	4638      	mov	r0, r7
 800779a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800779e:	2003      	movs	r0, #3
 80077a0:	3701      	adds	r7, #1
 80077a2:	47c0      	blx	r8
 80077a4:	2300      	movs	r3, #0
 80077a6:	4638      	mov	r0, r7
 80077a8:	63a3      	str	r3, [r4, #56]	; 0x38
 80077aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077ae:	2700      	movs	r7, #0
 80077b0:	4638      	mov	r0, r7
 80077b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80077b6:	6b45      	ldr	r5, [r0, #52]	; 0x34
 80077b8:	6385      	str	r5, [r0, #56]	; 0x38
 80077ba:	2d00      	cmp	r5, #0
 80077bc:	d0f7      	beq.n	80077ae <ai_layers_forward_all+0x5e>
 80077be:	4647      	mov	r7, r8
 80077c0:	696b      	ldr	r3, [r5, #20]
 80077c2:	4628      	mov	r0, r5
 80077c4:	4798      	blx	r3
 80077c6:	462b      	mov	r3, r5
 80077c8:	692d      	ldr	r5, [r5, #16]
 80077ca:	429d      	cmp	r5, r3
 80077cc:	d004      	beq.n	80077d8 <ai_layers_forward_all+0x88>
 80077ce:	3701      	adds	r7, #1
 80077d0:	63a5      	str	r5, [r4, #56]	; 0x38
 80077d2:	2d00      	cmp	r5, #0
 80077d4:	d1f4      	bne.n	80077c0 <ai_layers_forward_all+0x70>
 80077d6:	e7df      	b.n	8007798 <ai_layers_forward_all+0x48>
 80077d8:	2300      	movs	r3, #0
 80077da:	3701      	adds	r7, #1
 80077dc:	63a3      	str	r3, [r4, #56]	; 0x38
 80077de:	e7db      	b.n	8007798 <ai_layers_forward_all+0x48>

080077e0 <ai_dict_decompress_f32>:
 80077e0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80077e4:	9d08      	ldr	r5, [sp, #32]
 80077e6:	2b04      	cmp	r3, #4
 80077e8:	eb00 0585 	add.w	r5, r0, r5, lsl #2
 80077ec:	d00e      	beq.n	800780c <ai_dict_decompress_f32+0x2c>
 80077ee:	2b08      	cmp	r3, #8
 80077f0:	d10a      	bne.n	8007808 <ai_dict_decompress_f32+0x28>
 80077f2:	42a8      	cmp	r0, r5
 80077f4:	d208      	bcs.n	8007808 <ai_dict_decompress_f32+0x28>
 80077f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80077fa:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	f840 3b04 	str.w	r3, [r0], #4
 8007804:	4285      	cmp	r5, r0
 8007806:	d8f6      	bhi.n	80077f6 <ai_dict_decompress_f32+0x16>
 8007808:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800780c:	9b07      	ldr	r3, [sp, #28]
 800780e:	085e      	lsrs	r6, r3, #1
 8007810:	f003 0701 	and.w	r7, r3, #1
 8007814:	ea4f 09c6 	mov.w	r9, r6, lsl #3
 8007818:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 800781c:	42a8      	cmp	r0, r5
 800781e:	d2f3      	bcs.n	8007808 <ai_dict_decompress_f32+0x28>
 8007820:	b33e      	cbz	r6, 8007872 <ai_dict_decompress_f32+0x92>
 8007822:	f100 0e08 	add.w	lr, r0, #8
 8007826:	f101 3cff 	add.w	ip, r1, #4294967295	; 0xffffffff
 800782a:	eb01 0408 	add.w	r4, r1, r8
 800782e:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8007832:	f10e 0e08 	add.w	lr, lr, #8
 8007836:	091b      	lsrs	r3, r3, #4
 8007838:	4564      	cmp	r4, ip
 800783a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	f84e 3c10 	str.w	r3, [lr, #-16]
 8007844:	f89c 3000 	ldrb.w	r3, [ip]
 8007848:	f003 030f 	and.w	r3, r3, #15
 800784c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8007856:	d1ea      	bne.n	800782e <ai_dict_decompress_f32+0x4e>
 8007858:	4431      	add	r1, r6
 800785a:	4448      	add	r0, r9
 800785c:	2f00      	cmp	r7, #0
 800785e:	d0dd      	beq.n	800781c <ai_dict_decompress_f32+0x3c>
 8007860:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007864:	091b      	lsrs	r3, r3, #4
 8007866:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f840 3b04 	str.w	r3, [r0], #4
 8007870:	e7d4      	b.n	800781c <ai_dict_decompress_f32+0x3c>
 8007872:	2f00      	cmp	r7, #0
 8007874:	d1f4      	bne.n	8007860 <ai_dict_decompress_f32+0x80>
 8007876:	42a8      	cmp	r0, r5
 8007878:	d3fd      	bcc.n	8007876 <ai_dict_decompress_f32+0x96>
 800787a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800787e:	bf00      	nop

08007880 <forward_conv2d_if32of32wf32>:
 8007880:	6982      	ldr	r2, [r0, #24]
 8007882:	8813      	ldrh	r3, [r2, #0]
 8007884:	2b00      	cmp	r3, #0
 8007886:	f000 8092 	beq.w	80079ae <forward_conv2d_if32of32wf32+0x12e>
 800788a:	f8d2 c004 	ldr.w	ip, [r2, #4]
 800788e:	f8dc 2004 	ldr.w	r2, [ip, #4]
 8007892:	b102      	cbz	r2, 8007896 <forward_conv2d_if32of32wf32+0x16>
 8007894:	6812      	ldr	r2, [r2, #0]
 8007896:	2b01      	cmp	r3, #1
 8007898:	f000 80b3 	beq.w	8007a02 <forward_conv2d_if32of32wf32+0x182>
 800789c:	f8dc 1010 	ldr.w	r1, [ip, #16]
 80078a0:	b101      	cbz	r1, 80078a4 <forward_conv2d_if32of32wf32+0x24>
 80078a2:	6809      	ldr	r1, [r1, #0]
 80078a4:	2b02      	cmp	r3, #2
 80078a6:	f000 8084 	beq.w	80079b2 <forward_conv2d_if32of32wf32+0x132>
 80078aa:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078ae:	f8dc 601c 	ldr.w	r6, [ip, #28]
 80078b2:	b0a1      	sub	sp, #132	; 0x84
 80078b4:	2e00      	cmp	r6, #0
 80078b6:	f000 809d 	beq.w	80079f4 <forward_conv2d_if32of32wf32+0x174>
 80078ba:	f8bc 5018 	ldrh.w	r5, [ip, #24]
 80078be:	6834      	ldr	r4, [r6, #0]
 80078c0:	2d01      	cmp	r5, #1
 80078c2:	f240 8099 	bls.w	80079f8 <forward_conv2d_if32of32wf32+0x178>
 80078c6:	6876      	ldr	r6, [r6, #4]
 80078c8:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80078cc:	f8d1 900c 	ldr.w	r9, [r1, #12]
 80078d0:	f8d8 7004 	ldr.w	r7, [r8, #4]
 80078d4:	6992      	ldr	r2, [r2, #24]
 80078d6:	9713      	str	r7, [sp, #76]	; 0x4c
 80078d8:	f8d9 7004 	ldr.w	r7, [r9, #4]
 80078dc:	f8d0 e03c 	ldr.w	lr, [r0, #60]	; 0x3c
 80078e0:	9714      	str	r7, [sp, #80]	; 0x50
 80078e2:	f8d9 700c 	ldr.w	r7, [r9, #12]
 80078e6:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 80078ea:	9715      	str	r7, [sp, #84]	; 0x54
 80078ec:	f8d9 7008 	ldr.w	r7, [r9, #8]
 80078f0:	f8d2 b008 	ldr.w	fp, [r2, #8]
 80078f4:	9716      	str	r7, [sp, #88]	; 0x58
 80078f6:	f8d8 700c 	ldr.w	r7, [r8, #12]
 80078fa:	69a2      	ldr	r2, [r4, #24]
 80078fc:	9717      	str	r7, [sp, #92]	; 0x5c
 80078fe:	f8d8 7008 	ldr.w	r7, [r8, #8]
 8007902:	9718      	str	r7, [sp, #96]	; 0x60
 8007904:	8d07      	ldrh	r7, [r0, #40]	; 0x28
 8007906:	e9d0 540c 	ldrd	r5, r4, [r0, #48]	; 0x30
 800790a:	9719      	str	r7, [sp, #100]	; 0x64
 800790c:	8d87      	ldrh	r7, [r0, #44]	; 0x2c
 800790e:	69c0      	ldr	r0, [r0, #28]
 8007910:	971a      	str	r7, [sp, #104]	; 0x68
 8007912:	901f      	str	r0, [sp, #124]	; 0x7c
 8007914:	f8be 0000 	ldrh.w	r0, [lr]
 8007918:	901b      	str	r0, [sp, #108]	; 0x6c
 800791a:	f8be 0004 	ldrh.w	r0, [lr, #4]
 800791e:	901c      	str	r0, [sp, #112]	; 0x70
 8007920:	b2a8      	uxth	r0, r5
 8007922:	901d      	str	r0, [sp, #116]	; 0x74
 8007924:	b2a0      	uxth	r0, r4
 8007926:	901e      	str	r0, [sp, #120]	; 0x78
 8007928:	f8d2 9008 	ldr.w	r9, [r2, #8]
 800792c:	e9da 7801 	ldrd	r7, r8, [sl, #4]
 8007930:	b10e      	cbz	r6, 8007936 <forward_conv2d_if32of32wf32+0xb6>
 8007932:	69b0      	ldr	r0, [r6, #24]
 8007934:	6886      	ldr	r6, [r0, #8]
 8007936:	b2a4      	uxth	r4, r4
 8007938:	6989      	ldr	r1, [r1, #24]
 800793a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
 800793e:	b2ad      	uxth	r5, r5
 8007940:	3c01      	subs	r4, #1
 8007942:	f8d1 a008 	ldr.w	sl, [r1, #8]
 8007946:	3d01      	subs	r5, #1
 8007948:	6811      	ldr	r1, [r2, #0]
 800794a:	fb00 8404 	mla	r4, r0, r4, r8
 800794e:	1e78      	subs	r0, r7, #1
 8007950:	fb00 7505 	mla	r5, r0, r5, r7
 8007954:	f3c1 4043 	ubfx	r0, r1, #17, #4
 8007958:	2804      	cmp	r0, #4
 800795a:	d02d      	beq.n	80079b8 <forward_conv2d_if32of32wf32+0x138>
 800795c:	2808      	cmp	r0, #8
 800795e:	d02b      	beq.n	80079b8 <forward_conv2d_if32of32wf32+0x138>
 8007960:	9b1d      	ldr	r3, [sp, #116]	; 0x74
 8007962:	464a      	mov	r2, r9
 8007964:	940c      	str	r4, [sp, #48]	; 0x30
 8007966:	4651      	mov	r1, sl
 8007968:	9c1e      	ldr	r4, [sp, #120]	; 0x78
 800796a:	4658      	mov	r0, fp
 800796c:	9706      	str	r7, [sp, #24]
 800796e:	940f      	str	r4, [sp, #60]	; 0x3c
 8007970:	e9cd 530d 	strd	r5, r3, [sp, #52]	; 0x34
 8007974:	9b1a      	ldr	r3, [sp, #104]	; 0x68
 8007976:	930b      	str	r3, [sp, #44]	; 0x2c
 8007978:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800797a:	930a      	str	r3, [sp, #40]	; 0x28
 800797c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800797e:	9309      	str	r3, [sp, #36]	; 0x24
 8007980:	9b1c      	ldr	r3, [sp, #112]	; 0x70
 8007982:	e9cd 8307 	strd	r8, r3, [sp, #28]
 8007986:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8007988:	9305      	str	r3, [sp, #20]
 800798a:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800798c:	9304      	str	r3, [sp, #16]
 800798e:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8007990:	9303      	str	r3, [sp, #12]
 8007992:	9b18      	ldr	r3, [sp, #96]	; 0x60
 8007994:	9302      	str	r3, [sp, #8]
 8007996:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8007998:	9301      	str	r3, [sp, #4]
 800799a:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800799c:	9300      	str	r3, [sp, #0]
 800799e:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 80079a0:	9310      	str	r3, [sp, #64]	; 0x40
 80079a2:	4633      	mov	r3, r6
 80079a4:	f001 f854 	bl	8008a50 <forward_lite_conv2d_if32of32wf32>
 80079a8:	b021      	add	sp, #132	; 0x84
 80079aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80079ae:	685b      	ldr	r3, [r3, #4]
 80079b0:	deff      	udf	#255	; 0xff
 80079b2:	2300      	movs	r3, #0
 80079b4:	685b      	ldr	r3, [r3, #4]
 80079b6:	deff      	udf	#255	; 0xff
 80079b8:	68d2      	ldr	r2, [r2, #12]
 80079ba:	2a00      	cmp	r2, #0
 80079bc:	d0d0      	beq.n	8007960 <forward_conv2d_if32of32wf32+0xe0>
 80079be:	2b03      	cmp	r3, #3
 80079c0:	d022      	beq.n	8007a08 <forward_conv2d_if32of32wf32+0x188>
 80079c2:	f8dc 3028 	ldr.w	r3, [ip, #40]	; 0x28
 80079c6:	b1cb      	cbz	r3, 80079fc <forward_conv2d_if32of32wf32+0x17c>
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	b1bb      	cbz	r3, 80079fc <forward_conv2d_if32of32wf32+0x17c>
 80079cc:	f8d3 c018 	ldr.w	ip, [r3, #24]
 80079d0:	f3c1 13c6 	ubfx	r3, r1, #7, #7
 80079d4:	f3c1 5141 	ubfx	r1, r1, #21, #2
 80079d8:	410b      	asrs	r3, r1
 80079da:	e9dc 1001 	ldrd	r1, r0, [ip, #4]
 80079de:	b29b      	uxth	r3, r3
 80079e0:	9101      	str	r1, [sp, #4]
 80079e2:	9913      	ldr	r1, [sp, #76]	; 0x4c
 80079e4:	9100      	str	r1, [sp, #0]
 80079e6:	4649      	mov	r1, r9
 80079e8:	2800      	cmp	r0, #0
 80079ea:	bf18      	it	ne
 80079ec:	4681      	movne	r9, r0
 80079ee:	f7ff fef7 	bl	80077e0 <ai_dict_decompress_f32>
 80079f2:	e7b5      	b.n	8007960 <forward_conv2d_if32of32wf32+0xe0>
 80079f4:	4634      	mov	r4, r6
 80079f6:	e767      	b.n	80078c8 <forward_conv2d_if32of32wf32+0x48>
 80079f8:	2600      	movs	r6, #0
 80079fa:	e765      	b.n	80078c8 <forward_conv2d_if32of32wf32+0x48>
 80079fc:	2300      	movs	r3, #0
 80079fe:	699b      	ldr	r3, [r3, #24]
 8007a00:	deff      	udf	#255	; 0xff
 8007a02:	2300      	movs	r3, #0
 8007a04:	685b      	ldr	r3, [r3, #4]
 8007a06:	deff      	udf	#255	; 0xff
 8007a08:	2300      	movs	r3, #0
 8007a0a:	685b      	ldr	r3, [r3, #4]
 8007a0c:	deff      	udf	#255	; 0xff
 8007a0e:	bf00      	nop

08007a10 <forward_dense>:
 8007a10:	6983      	ldr	r3, [r0, #24]
 8007a12:	881a      	ldrh	r2, [r3, #0]
 8007a14:	2a00      	cmp	r2, #0
 8007a16:	f000 80f0 	beq.w	8007bfa <forward_dense+0x1ea>
 8007a1a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a1e:	ed2d 8b02 	vpush	{d8}
 8007a22:	6858      	ldr	r0, [r3, #4]
 8007a24:	b09b      	sub	sp, #108	; 0x6c
 8007a26:	6845      	ldr	r5, [r0, #4]
 8007a28:	b105      	cbz	r5, 8007a2c <forward_dense+0x1c>
 8007a2a:	682d      	ldr	r5, [r5, #0]
 8007a2c:	2a01      	cmp	r2, #1
 8007a2e:	f000 840a 	beq.w	8008246 <forward_dense+0x836>
 8007a32:	6906      	ldr	r6, [r0, #16]
 8007a34:	b106      	cbz	r6, 8007a38 <forward_dense+0x28>
 8007a36:	6836      	ldr	r6, [r6, #0]
 8007a38:	2a02      	cmp	r2, #2
 8007a3a:	f000 80e0 	beq.w	8007bfe <forward_dense+0x1ee>
 8007a3e:	69c3      	ldr	r3, [r0, #28]
 8007a40:	930d      	str	r3, [sp, #52]	; 0x34
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	f000 83f1 	beq.w	800822a <forward_dense+0x81a>
 8007a48:	4619      	mov	r1, r3
 8007a4a:	8b03      	ldrh	r3, [r0, #24]
 8007a4c:	6809      	ldr	r1, [r1, #0]
 8007a4e:	2b01      	cmp	r3, #1
 8007a50:	910f      	str	r1, [sp, #60]	; 0x3c
 8007a52:	f240 83ec 	bls.w	800822e <forward_dense+0x81e>
 8007a56:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007a58:	685b      	ldr	r3, [r3, #4]
 8007a5a:	930d      	str	r3, [sp, #52]	; 0x34
 8007a5c:	460b      	mov	r3, r1
 8007a5e:	f8d3 8018 	ldr.w	r8, [r3, #24]
 8007a62:	2a03      	cmp	r2, #3
 8007a64:	68eb      	ldr	r3, [r5, #12]
 8007a66:	68f7      	ldr	r7, [r6, #12]
 8007a68:	685b      	ldr	r3, [r3, #4]
 8007a6a:	687c      	ldr	r4, [r7, #4]
 8007a6c:	9317      	str	r3, [sp, #92]	; 0x5c
 8007a6e:	f8d8 3000 	ldr.w	r3, [r8]
 8007a72:	4621      	mov	r1, r4
 8007a74:	9419      	str	r4, [sp, #100]	; 0x64
 8007a76:	f3c3 1ec6 	ubfx	lr, r3, #7, #7
 8007a7a:	f3c3 5c41 	ubfx	ip, r3, #21, #2
 8007a7e:	e9d7 4702 	ldrd	r4, r7, [r7, #8]
 8007a82:	fb01 f404 	mul.w	r4, r1, r4
 8007a86:	fa4e f10c 	asr.w	r1, lr, ip
 8007a8a:	9116      	str	r1, [sp, #88]	; 0x58
 8007a8c:	f000 83d8 	beq.w	8008240 <forward_dense+0x830>
 8007a90:	6a82      	ldr	r2, [r0, #40]	; 0x28
 8007a92:	f3c3 4343 	ubfx	r3, r3, #17, #4
 8007a96:	2a00      	cmp	r2, #0
 8007a98:	f000 83c2 	beq.w	8008220 <forward_dense+0x810>
 8007a9c:	6812      	ldr	r2, [r2, #0]
 8007a9e:	2a00      	cmp	r2, #0
 8007aa0:	f000 83be 	beq.w	8008220 <forward_dense+0x810>
 8007aa4:	2b04      	cmp	r3, #4
 8007aa6:	f8d2 9018 	ldr.w	r9, [r2, #24]
 8007aaa:	f000 83a8 	beq.w	80081fe <forward_dense+0x7ee>
 8007aae:	2b08      	cmp	r3, #8
 8007ab0:	f000 83a5 	beq.w	80081fe <forward_dense+0x7ee>
 8007ab4:	f04f 0a00 	mov.w	sl, #0
 8007ab8:	69ab      	ldr	r3, [r5, #24]
 8007aba:	fb07 f404 	mul.w	r4, r7, r4
 8007abe:	69b2      	ldr	r2, [r6, #24]
 8007ac0:	f8d3 9008 	ldr.w	r9, [r3, #8]
 8007ac4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007ac6:	6892      	ldr	r2, [r2, #8]
 8007ac8:	695b      	ldr	r3, [r3, #20]
 8007aca:	eb02 0184 	add.w	r1, r2, r4, lsl #2
 8007ace:	9206      	str	r2, [sp, #24]
 8007ad0:	685b      	ldr	r3, [r3, #4]
 8007ad2:	428a      	cmp	r2, r1
 8007ad4:	9110      	str	r1, [sp, #64]	; 0x40
 8007ad6:	9304      	str	r3, [sp, #16]
 8007ad8:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8007ada:	ea4f 0083 	mov.w	r0, r3, lsl #2
 8007ade:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8007ae2:	900e      	str	r0, [sp, #56]	; 0x38
 8007ae4:	9303      	str	r3, [sp, #12]
 8007ae6:	f080 8380 	bcs.w	80081ea <forward_dense+0x7da>
 8007aea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8007aec:	4654      	mov	r4, sl
 8007aee:	4bb9      	ldr	r3, [pc, #740]	; (8007dd4 <forward_dense+0x3c4>)
 8007af0:	46ca      	mov	sl, r9
 8007af2:	08d0      	lsrs	r0, r2, #3
 8007af4:	ed9f 8ab8 	vldr	s16, [pc, #736]	; 8007dd8 <forward_dense+0x3c8>
 8007af8:	4413      	add	r3, r2
 8007afa:	9009      	str	r0, [sp, #36]	; 0x24
 8007afc:	0099      	lsls	r1, r3, #2
 8007afe:	f022 0301 	bic.w	r3, r2, #1
 8007b02:	f002 0201 	and.w	r2, r2, #1
 8007b06:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8007b0a:	9118      	str	r1, [sp, #96]	; 0x60
 8007b0c:	920a      	str	r2, [sp, #40]	; 0x28
 8007b0e:	eb09 1240 	add.w	r2, r9, r0, lsl #5
 8007b12:	9305      	str	r3, [sp, #20]
 8007b14:	f101 0320 	add.w	r3, r1, #32
 8007b18:	9207      	str	r2, [sp, #28]
 8007b1a:	9311      	str	r3, [sp, #68]	; 0x44
 8007b1c:	444b      	add	r3, r9
 8007b1e:	469b      	mov	fp, r3
 8007b20:	930b      	str	r3, [sp, #44]	; 0x2c
 8007b22:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8007b24:	699b      	ldr	r3, [r3, #24]
 8007b26:	689a      	ldr	r2, [r3, #8]
 8007b28:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007b2a:	b10b      	cbz	r3, 8007b30 <forward_dense+0x120>
 8007b2c:	699b      	ldr	r3, [r3, #24]
 8007b2e:	689b      	ldr	r3, [r3, #8]
 8007b30:	2c00      	cmp	r4, #0
 8007b32:	f000 834b 	beq.w	80081cc <forward_dense+0x7bc>
 8007b36:	9916      	ldr	r1, [sp, #88]	; 0x58
 8007b38:	2904      	cmp	r1, #4
 8007b3a:	f000 826a 	beq.w	8008012 <forward_dense+0x602>
 8007b3e:	9903      	ldr	r1, [sp, #12]
 8007b40:	9806      	ldr	r0, [sp, #24]
 8007b42:	4281      	cmp	r1, r0
 8007b44:	f240 8356 	bls.w	80081f4 <forward_dense+0x7e4>
 8007b48:	4686      	mov	lr, r0
 8007b4a:	9818      	ldr	r0, [sp, #96]	; 0x60
 8007b4c:	eb00 090a 	add.w	r9, r0, sl
 8007b50:	0941      	lsrs	r1, r0, #5
 8007b52:	f10a 0004 	add.w	r0, sl, #4
 8007b56:	f8cd 9020 	str.w	r9, [sp, #32]
 8007b5a:	9012      	str	r0, [sp, #72]	; 0x48
 8007b5c:	1c48      	adds	r0, r1, #1
 8007b5e:	00c9      	lsls	r1, r1, #3
 8007b60:	3110      	adds	r1, #16
 8007b62:	9115      	str	r1, [sp, #84]	; 0x54
 8007b64:	00c1      	lsls	r1, r0, #3
 8007b66:	9113      	str	r1, [sp, #76]	; 0x4c
 8007b68:	eb0a 1140 	add.w	r1, sl, r0, lsl #5
 8007b6c:	9114      	str	r1, [sp, #80]	; 0x50
 8007b6e:	f1a9 0104 	sub.w	r1, r9, #4
 8007b72:	f8dd 905c 	ldr.w	r9, [sp, #92]	; 0x5c
 8007b76:	910c      	str	r1, [sp, #48]	; 0x30
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	f000 8128 	beq.w	8007dce <forward_dense+0x3be>
 8007b7e:	ecb3 5a01 	vldmia	r3!, {s10}
 8007b82:	f1b9 0f07 	cmp.w	r9, #7
 8007b86:	d83d      	bhi.n	8007c04 <forward_dense+0x1f4>
 8007b88:	45da      	cmp	sl, fp
 8007b8a:	d211      	bcs.n	8007bb0 <forward_dense+0x1a0>
 8007b8c:	eddf 7a92 	vldr	s15, [pc, #584]	; 8007dd8 <forward_dense+0x3c8>
 8007b90:	4650      	mov	r0, sl
 8007b92:	4615      	mov	r5, r2
 8007b94:	f815 1b01 	ldrb.w	r1, [r5], #1
 8007b98:	ecb0 7a01 	vldmia	r0!, {s14}
 8007b9c:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007ba0:	4558      	cmp	r0, fp
 8007ba2:	edd1 6a00 	vldr	s13, [r1]
 8007ba6:	eee6 7a87 	vfma.f32	s15, s13, s14
 8007baa:	d3f3      	bcc.n	8007b94 <forward_dense+0x184>
 8007bac:	ee35 5a27 	vadd.f32	s10, s10, s15
 8007bb0:	9904      	ldr	r1, [sp, #16]
 8007bb2:	ecae 5a01 	vstmia	lr!, {s10}
 8007bb6:	440a      	add	r2, r1
 8007bb8:	9903      	ldr	r1, [sp, #12]
 8007bba:	458e      	cmp	lr, r1
 8007bbc:	d3dc      	bcc.n	8007b78 <forward_dense+0x168>
 8007bbe:	9a06      	ldr	r2, [sp, #24]
 8007bc0:	1a8b      	subs	r3, r1, r2
 8007bc2:	3b01      	subs	r3, #1
 8007bc4:	f023 0303 	bic.w	r3, r3, #3
 8007bc8:	3304      	adds	r3, #4
 8007bca:	18d3      	adds	r3, r2, r3
 8007bcc:	4619      	mov	r1, r3
 8007bce:	9306      	str	r3, [sp, #24]
 8007bd0:	9b03      	ldr	r3, [sp, #12]
 8007bd2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007bd4:	9810      	ldr	r0, [sp, #64]	; 0x40
 8007bd6:	4413      	add	r3, r2
 8007bd8:	9a07      	ldr	r2, [sp, #28]
 8007bda:	4281      	cmp	r1, r0
 8007bdc:	9303      	str	r3, [sp, #12]
 8007bde:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8007be0:	441a      	add	r2, r3
 8007be2:	449b      	add	fp, r3
 8007be4:	9207      	str	r2, [sp, #28]
 8007be6:	9a05      	ldr	r2, [sp, #20]
 8007be8:	441a      	add	r2, r3
 8007bea:	9205      	str	r2, [sp, #20]
 8007bec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007bee:	4692      	mov	sl, r2
 8007bf0:	f080 82fb 	bcs.w	80081ea <forward_dense+0x7da>
 8007bf4:	441a      	add	r2, r3
 8007bf6:	920b      	str	r2, [sp, #44]	; 0x2c
 8007bf8:	e793      	b.n	8007b22 <forward_dense+0x112>
 8007bfa:	6853      	ldr	r3, [r2, #4]
 8007bfc:	deff      	udf	#255	; 0xff
 8007bfe:	2300      	movs	r3, #0
 8007c00:	685b      	ldr	r3, [r3, #4]
 8007c02:	deff      	udf	#255	; 0xff
 8007c04:	f002 0103 	and.w	r1, r2, #3
 8007c08:	2902      	cmp	r1, #2
 8007c0a:	f000 81e6 	beq.w	8007fda <forward_dense+0x5ca>
 8007c0e:	2903      	cmp	r1, #3
 8007c10:	f000 80e4 	beq.w	8007ddc <forward_dense+0x3cc>
 8007c14:	2901      	cmp	r1, #1
 8007c16:	f000 81ef 	beq.w	8007ff8 <forward_dense+0x5e8>
 8007c1a:	9908      	ldr	r1, [sp, #32]
 8007c1c:	ed9f 7a6e 	vldr	s14, [pc, #440]	; 8007dd8 <forward_dense+0x3c8>
 8007c20:	458a      	cmp	sl, r1
 8007c22:	f200 82e9 	bhi.w	80081f8 <forward_dense+0x7e8>
 8007c26:	9d15      	ldr	r5, [sp, #84]	; 0x54
 8007c28:	f102 0108 	add.w	r1, r2, #8
 8007c2c:	f10a 0020 	add.w	r0, sl, #32
 8007c30:	18ae      	adds	r6, r5, r2
 8007c32:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007c36:	3108      	adds	r1, #8
 8007c38:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8007c3c:	3020      	adds	r0, #32
 8007c3e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007c42:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8007c46:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8007c4a:	edd5 7a00 	vldr	s15, [r5]
 8007c4e:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8007c52:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007c56:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8007c5a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007c5e:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8007c62:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8007c66:	edd5 2a00 	vldr	s5, [r5]
 8007c6a:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8007c6e:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007c72:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8007c76:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007c7a:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8007c7e:	ed95 3a00 	vldr	s6, [r5]
 8007c82:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8007c86:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007c8a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007c8e:	edd5 3a00 	vldr	s7, [r5]
 8007c92:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007c96:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007c9a:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007c9e:	ed95 4a00 	vldr	s8, [r5]
 8007ca2:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8007ca6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007caa:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007cae:	edd5 4a00 	vldr	s9, [r5]
 8007cb2:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8007cb6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007cba:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8007cbe:	edd5 5a00 	vldr	s11, [r5]
 8007cc2:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8007cc6:	428e      	cmp	r6, r1
 8007cc8:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ccc:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007cd0:	ed95 6a00 	vldr	s12, [r5]
 8007cd4:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007cd8:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007cdc:	d1a9      	bne.n	8007c32 <forward_dense+0x222>
 8007cde:	9913      	ldr	r1, [sp, #76]	; 0x4c
 8007ce0:	1850      	adds	r0, r2, r1
 8007ce2:	9914      	ldr	r1, [sp, #80]	; 0x50
 8007ce4:	4559      	cmp	r1, fp
 8007ce6:	d26f      	bcs.n	8007dc8 <forward_dense+0x3b8>
 8007ce8:	7805      	ldrb	r5, [r0, #0]
 8007cea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007cee:	edd5 7a00 	vldr	s15, [r5]
 8007cf2:	460d      	mov	r5, r1
 8007cf4:	ecf5 6a01 	vldmia	r5!, {s13}
 8007cf8:	45ab      	cmp	fp, r5
 8007cfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007cfe:	d963      	bls.n	8007dc8 <forward_dense+0x3b8>
 8007d00:	7845      	ldrb	r5, [r0, #1]
 8007d02:	edd1 6a01 	vldr	s13, [r1, #4]
 8007d06:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007d0a:	edd5 7a00 	vldr	s15, [r5]
 8007d0e:	f101 0508 	add.w	r5, r1, #8
 8007d12:	45ab      	cmp	fp, r5
 8007d14:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d18:	d956      	bls.n	8007dc8 <forward_dense+0x3b8>
 8007d1a:	7885      	ldrb	r5, [r0, #2]
 8007d1c:	edd1 6a02 	vldr	s13, [r1, #8]
 8007d20:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007d24:	edd5 7a00 	vldr	s15, [r5]
 8007d28:	f101 050c 	add.w	r5, r1, #12
 8007d2c:	45ab      	cmp	fp, r5
 8007d2e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d32:	d949      	bls.n	8007dc8 <forward_dense+0x3b8>
 8007d34:	78c5      	ldrb	r5, [r0, #3]
 8007d36:	edd1 6a03 	vldr	s13, [r1, #12]
 8007d3a:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007d3e:	edd5 7a00 	vldr	s15, [r5]
 8007d42:	f101 0510 	add.w	r5, r1, #16
 8007d46:	45ab      	cmp	fp, r5
 8007d48:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d4c:	d93c      	bls.n	8007dc8 <forward_dense+0x3b8>
 8007d4e:	7905      	ldrb	r5, [r0, #4]
 8007d50:	edd1 6a04 	vldr	s13, [r1, #16]
 8007d54:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007d58:	edd5 7a00 	vldr	s15, [r5]
 8007d5c:	f101 0514 	add.w	r5, r1, #20
 8007d60:	45ab      	cmp	fp, r5
 8007d62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d66:	d92f      	bls.n	8007dc8 <forward_dense+0x3b8>
 8007d68:	7945      	ldrb	r5, [r0, #5]
 8007d6a:	edd1 6a05 	vldr	s13, [r1, #20]
 8007d6e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007d72:	edd5 7a00 	vldr	s15, [r5]
 8007d76:	f101 0518 	add.w	r5, r1, #24
 8007d7a:	45ab      	cmp	fp, r5
 8007d7c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d80:	d922      	bls.n	8007dc8 <forward_dense+0x3b8>
 8007d82:	7985      	ldrb	r5, [r0, #6]
 8007d84:	edd1 6a06 	vldr	s13, [r1, #24]
 8007d88:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007d8c:	edd5 7a00 	vldr	s15, [r5]
 8007d90:	f101 051c 	add.w	r5, r1, #28
 8007d94:	45ab      	cmp	fp, r5
 8007d96:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007d9a:	d915      	bls.n	8007dc8 <forward_dense+0x3b8>
 8007d9c:	79c5      	ldrb	r5, [r0, #7]
 8007d9e:	edd1 6a07 	vldr	s13, [r1, #28]
 8007da2:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007da6:	edd5 7a00 	vldr	s15, [r5]
 8007daa:	f101 0520 	add.w	r5, r1, #32
 8007dae:	45ab      	cmp	fp, r5
 8007db0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007db4:	d908      	bls.n	8007dc8 <forward_dense+0x3b8>
 8007db6:	edd1 7a08 	vldr	s15, [r1, #32]
 8007dba:	7a01      	ldrb	r1, [r0, #8]
 8007dbc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007dc0:	edd1 6a00 	vldr	s13, [r1]
 8007dc4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007dc8:	ee35 5a07 	vadd.f32	s10, s10, s14
 8007dcc:	e6f0      	b.n	8007bb0 <forward_dense+0x1a0>
 8007dce:	ed9f 5a02 	vldr	s10, [pc, #8]	; 8007dd8 <forward_dense+0x3c8>
 8007dd2:	e6d6      	b.n	8007b82 <forward_dense+0x172>
 8007dd4:	3ffffff8 	.word	0x3ffffff8
 8007dd8:	00000000 	.word	0x00000000
 8007ddc:	eeb0 7a48 	vmov.f32	s14, s16
 8007de0:	4650      	mov	r0, sl
 8007de2:	4611      	mov	r1, r2
 8007de4:	468c      	mov	ip, r1
 8007de6:	4606      	mov	r6, r0
 8007de8:	f81c 5b01 	ldrb.w	r5, [ip], #1
 8007dec:	ecf6 7a01 	vldmia	r6!, {s15}
 8007df0:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007df4:	edd5 6a00 	vldr	s13, [r5]
 8007df8:	9d08      	ldr	r5, [sp, #32]
 8007dfa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007dfe:	42ae      	cmp	r6, r5
 8007e00:	d866      	bhi.n	8007ed0 <forward_dense+0x4c0>
 8007e02:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007e04:	f101 0711 	add.w	r7, r1, #17
 8007e08:	3109      	adds	r1, #9
 8007e0a:	eba5 0800 	sub.w	r8, r5, r0
 8007e0e:	3024      	adds	r0, #36	; 0x24
 8007e10:	ea4f 1858 	mov.w	r8, r8, lsr #5
 8007e14:	eb07 07c8 	add.w	r7, r7, r8, lsl #3
 8007e18:	f811 5c07 	ldrb.w	r5, [r1, #-7]
 8007e1c:	3108      	adds	r1, #8
 8007e1e:	ed50 2a07 	vldr	s5, [r0, #-28]	; 0xffffffe4
 8007e22:	3020      	adds	r0, #32
 8007e24:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e28:	ed10 3a10 	vldr	s6, [r0, #-64]	; 0xffffffc0
 8007e2c:	ed50 3a0e 	vldr	s7, [r0, #-56]	; 0xffffffc8
 8007e30:	edd5 7a00 	vldr	s15, [r5]
 8007e34:	f811 5c10 	ldrb.w	r5, [r1, #-16]
 8007e38:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8007e3c:	ed10 4a0d 	vldr	s8, [r0, #-52]	; 0xffffffcc
 8007e40:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e44:	ed50 4a0c 	vldr	s9, [r0, #-48]	; 0xffffffd0
 8007e48:	ed50 5a0b 	vldr	s11, [r0, #-44]	; 0xffffffd4
 8007e4c:	edd5 2a00 	vldr	s5, [r5]
 8007e50:	f811 5c0e 	ldrb.w	r5, [r1, #-14]
 8007e54:	eee2 7a83 	vfma.f32	s15, s5, s6
 8007e58:	ed10 6a0a 	vldr	s12, [r0, #-40]	; 0xffffffd8
 8007e5c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e60:	ed50 6a09 	vldr	s13, [r0, #-36]	; 0xffffffdc
 8007e64:	ed95 3a00 	vldr	s6, [r5]
 8007e68:	f811 5c0d 	ldrb.w	r5, [r1, #-13]
 8007e6c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007e70:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e74:	edd5 3a00 	vldr	s7, [r5]
 8007e78:	f811 5c0c 	ldrb.w	r5, [r1, #-12]
 8007e7c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e80:	eee3 7a84 	vfma.f32	s15, s7, s8
 8007e84:	ed95 4a00 	vldr	s8, [r5]
 8007e88:	f811 5c0b 	ldrb.w	r5, [r1, #-11]
 8007e8c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007e90:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007e94:	edd5 4a00 	vldr	s9, [r5]
 8007e98:	f811 5c0a 	ldrb.w	r5, [r1, #-10]
 8007e9c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007ea0:	eee4 7aa5 	vfma.f32	s15, s9, s11
 8007ea4:	edd5 5a00 	vldr	s11, [r5]
 8007ea8:	f811 5c09 	ldrb.w	r5, [r1, #-9]
 8007eac:	428f      	cmp	r7, r1
 8007eae:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007eb2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007eb6:	ed95 6a00 	vldr	s12, [r5]
 8007eba:	eee6 7a26 	vfma.f32	s15, s12, s13
 8007ebe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007ec2:	d1a9      	bne.n	8007e18 <forward_dense+0x408>
 8007ec4:	f108 0801 	add.w	r8, r8, #1
 8007ec8:	eb0c 0cc8 	add.w	ip, ip, r8, lsl #3
 8007ecc:	eb06 1648 	add.w	r6, r6, r8, lsl #5
 8007ed0:	455e      	cmp	r6, fp
 8007ed2:	f4bf af79 	bcs.w	8007dc8 <forward_dense+0x3b8>
 8007ed6:	f89c 1000 	ldrb.w	r1, [ip]
 8007eda:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007ede:	edd1 7a00 	vldr	s15, [r1]
 8007ee2:	4631      	mov	r1, r6
 8007ee4:	ecf1 6a01 	vldmia	r1!, {s13}
 8007ee8:	458b      	cmp	fp, r1
 8007eea:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007eee:	f67f af6b 	bls.w	8007dc8 <forward_dense+0x3b8>
 8007ef2:	f89c 1001 	ldrb.w	r1, [ip, #1]
 8007ef6:	edd6 6a01 	vldr	s13, [r6, #4]
 8007efa:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007efe:	edd1 7a00 	vldr	s15, [r1]
 8007f02:	f106 0108 	add.w	r1, r6, #8
 8007f06:	458b      	cmp	fp, r1
 8007f08:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f0c:	f67f af5c 	bls.w	8007dc8 <forward_dense+0x3b8>
 8007f10:	f89c 1002 	ldrb.w	r1, [ip, #2]
 8007f14:	edd6 6a02 	vldr	s13, [r6, #8]
 8007f18:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007f1c:	edd1 7a00 	vldr	s15, [r1]
 8007f20:	f106 010c 	add.w	r1, r6, #12
 8007f24:	458b      	cmp	fp, r1
 8007f26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f2a:	f67f af4d 	bls.w	8007dc8 <forward_dense+0x3b8>
 8007f2e:	f89c 1003 	ldrb.w	r1, [ip, #3]
 8007f32:	edd6 6a03 	vldr	s13, [r6, #12]
 8007f36:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007f3a:	edd1 7a00 	vldr	s15, [r1]
 8007f3e:	f106 0110 	add.w	r1, r6, #16
 8007f42:	458b      	cmp	fp, r1
 8007f44:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f48:	f67f af3e 	bls.w	8007dc8 <forward_dense+0x3b8>
 8007f4c:	f89c 1004 	ldrb.w	r1, [ip, #4]
 8007f50:	edd6 6a04 	vldr	s13, [r6, #16]
 8007f54:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007f58:	edd1 7a00 	vldr	s15, [r1]
 8007f5c:	f106 0114 	add.w	r1, r6, #20
 8007f60:	458b      	cmp	fp, r1
 8007f62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f66:	f67f af2f 	bls.w	8007dc8 <forward_dense+0x3b8>
 8007f6a:	f89c 1005 	ldrb.w	r1, [ip, #5]
 8007f6e:	edd6 6a05 	vldr	s13, [r6, #20]
 8007f72:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007f76:	edd1 7a00 	vldr	s15, [r1]
 8007f7a:	f106 0118 	add.w	r1, r6, #24
 8007f7e:	458b      	cmp	fp, r1
 8007f80:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007f84:	f67f af20 	bls.w	8007dc8 <forward_dense+0x3b8>
 8007f88:	f89c 1006 	ldrb.w	r1, [ip, #6]
 8007f8c:	edd6 6a06 	vldr	s13, [r6, #24]
 8007f90:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007f94:	edd1 7a00 	vldr	s15, [r1]
 8007f98:	f106 011c 	add.w	r1, r6, #28
 8007f9c:	458b      	cmp	fp, r1
 8007f9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fa2:	f67f af11 	bls.w	8007dc8 <forward_dense+0x3b8>
 8007fa6:	f89c 1007 	ldrb.w	r1, [ip, #7]
 8007faa:	edd6 6a07 	vldr	s13, [r6, #28]
 8007fae:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007fb2:	edd1 7a00 	vldr	s15, [r1]
 8007fb6:	f106 0120 	add.w	r1, r6, #32
 8007fba:	458b      	cmp	fp, r1
 8007fbc:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fc0:	f67f af02 	bls.w	8007dc8 <forward_dense+0x3b8>
 8007fc4:	f89c 1008 	ldrb.w	r1, [ip, #8]
 8007fc8:	edd6 7a08 	vldr	s15, [r6, #32]
 8007fcc:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8007fd0:	edd1 6a00 	vldr	s13, [r1]
 8007fd4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007fd8:	e6f6      	b.n	8007dc8 <forward_dense+0x3b8>
 8007fda:	eeb0 7a48 	vmov.f32	s14, s16
 8007fde:	4650      	mov	r0, sl
 8007fe0:	4611      	mov	r1, r2
 8007fe2:	f811 5b01 	ldrb.w	r5, [r1], #1
 8007fe6:	ecf0 7a01 	vldmia	r0!, {s15}
 8007fea:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8007fee:	edd5 6a00 	vldr	s13, [r5]
 8007ff2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8007ff6:	e6f5      	b.n	8007de4 <forward_dense+0x3d4>
 8007ff8:	4611      	mov	r1, r2
 8007ffa:	edda 7a00 	vldr	s15, [sl]
 8007ffe:	9812      	ldr	r0, [sp, #72]	; 0x48
 8008000:	f811 5b01 	ldrb.w	r5, [r1], #1
 8008004:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008008:	ed95 7a00 	vldr	s14, [r5]
 800800c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8008010:	e7e7      	b.n	8007fe2 <forward_dense+0x5d2>
 8008012:	9803      	ldr	r0, [sp, #12]
 8008014:	9906      	ldr	r1, [sp, #24]
 8008016:	4288      	cmp	r0, r1
 8008018:	f67f adda 	bls.w	8007bd0 <forward_dense+0x1c0>
 800801c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800801e:	f8cd b030 	str.w	fp, [sp, #48]	; 0x30
 8008022:	468b      	mov	fp, r1
 8008024:	f100 0c01 	add.w	ip, r0, #1
 8008028:	9805      	ldr	r0, [sp, #20]
 800802a:	eb02 0c8c 	add.w	ip, r2, ip, lsl #2
 800802e:	3801      	subs	r0, #1
 8008030:	9008      	str	r0, [sp, #32]
 8008032:	2b00      	cmp	r3, #0
 8008034:	f000 80bf 	beq.w	80081b6 <forward_dense+0x7a6>
 8008038:	9909      	ldr	r1, [sp, #36]	; 0x24
 800803a:	ecf3 2a01 	vldmia	r3!, {s5}
 800803e:	ed1f 7a9a 	vldr	s14, [pc, #-616]	; 8007dd8 <forward_dense+0x3c8>
 8008042:	2900      	cmp	r1, #0
 8008044:	f000 80bf 	beq.w	80081c6 <forward_dense+0x7b6>
 8008048:	1d10      	adds	r0, r2, #4
 800804a:	f10a 0120 	add.w	r1, sl, #32
 800804e:	f810 7c04 	ldrb.w	r7, [r0, #-4]
 8008052:	3004      	adds	r0, #4
 8008054:	ed11 2a07 	vldr	s4, [r1, #-28]	; 0xffffffe4
 8008058:	3120      	adds	r1, #32
 800805a:	f007 0e0f 	and.w	lr, r7, #15
 800805e:	093f      	lsrs	r7, r7, #4
 8008060:	f810 6c07 	ldrb.w	r6, [r0, #-7]
 8008064:	eb04 0e8e 	add.w	lr, r4, lr, lsl #2
 8008068:	ed11 4a10 	vldr	s8, [r1, #-64]	; 0xffffffc0
 800806c:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 8008070:	ed51 3a0e 	vldr	s7, [r1, #-56]	; 0xffffffc8
 8008074:	edde 7a00 	vldr	s15, [lr]
 8008078:	ed97 3a00 	vldr	s6, [r7]
 800807c:	0937      	lsrs	r7, r6, #4
 800807e:	ee67 7a82 	vmul.f32	s15, s15, s4
 8008082:	f006 060f 	and.w	r6, r6, #15
 8008086:	eb04 0787 	add.w	r7, r4, r7, lsl #2
 800808a:	f810 5c06 	ldrb.w	r5, [r0, #-6]
 800808e:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 8008092:	ed11 5a0d 	vldr	s10, [r1, #-52]	; 0xffffffcc
 8008096:	eee3 7a04 	vfma.f32	s15, s6, s8
 800809a:	ed97 3a00 	vldr	s6, [r7]
 800809e:	ed96 4a00 	vldr	s8, [r6]
 80080a2:	092e      	lsrs	r6, r5, #4
 80080a4:	ed51 4a0c 	vldr	s9, [r1, #-48]	; 0xffffffd0
 80080a8:	f005 050f 	and.w	r5, r5, #15
 80080ac:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80080b0:	ed11 6a0b 	vldr	s12, [r1, #-44]	; 0xffffffd4
 80080b4:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80080b8:	ed51 5a0a 	vldr	s11, [r1, #-40]	; 0xffffffd8
 80080bc:	ed51 6a09 	vldr	s13, [r1, #-36]	; 0xffffffdc
 80080c0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80080c4:	eee4 7a05 	vfma.f32	s15, s8, s10
 80080c8:	ed96 4a00 	vldr	s8, [r6]
 80080cc:	ed95 5a00 	vldr	s10, [r5]
 80080d0:	f810 5c05 	ldrb.w	r5, [r0, #-5]
 80080d4:	4560      	cmp	r0, ip
 80080d6:	ea4f 1615 	mov.w	r6, r5, lsr #4
 80080da:	f005 050f 	and.w	r5, r5, #15
 80080de:	eee4 7a24 	vfma.f32	s15, s8, s9
 80080e2:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 80080e6:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 80080ea:	eee5 7a06 	vfma.f32	s15, s10, s12
 80080ee:	ed96 5a00 	vldr	s10, [r6]
 80080f2:	ed95 6a00 	vldr	s12, [r5]
 80080f6:	eee5 7a25 	vfma.f32	s15, s10, s11
 80080fa:	eee6 7a26 	vfma.f32	s15, s12, s13
 80080fe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008102:	d1a4      	bne.n	800804e <forward_dense+0x63e>
 8008104:	f1ac 0804 	sub.w	r8, ip, #4
 8008108:	f8dd e01c 	ldr.w	lr, [sp, #28]
 800810c:	9905      	ldr	r1, [sp, #20]
 800810e:	458e      	cmp	lr, r1
 8008110:	d229      	bcs.n	8008166 <forward_dense+0x756>
 8008112:	9908      	ldr	r1, [sp, #32]
 8008114:	f10e 0008 	add.w	r0, lr, #8
 8008118:	f108 36ff 	add.w	r6, r8, #4294967295	; 0xffffffff
 800811c:	eba1 070e 	sub.w	r7, r1, lr
 8008120:	ea4f 09d7 	mov.w	r9, r7, lsr #3
 8008124:	eb08 07d7 	add.w	r7, r8, r7, lsr #3
 8008128:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800812c:	3008      	adds	r0, #8
 800812e:	ed50 5a03 	vldr	s11, [r0, #-12]
 8008132:	f001 050f 	and.w	r5, r1, #15
 8008136:	0909      	lsrs	r1, r1, #4
 8008138:	ed50 6a04 	vldr	s13, [r0, #-16]
 800813c:	42b7      	cmp	r7, r6
 800813e:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008142:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 8008146:	edd5 7a00 	vldr	s15, [r5]
 800814a:	ed91 6a00 	vldr	s12, [r1]
 800814e:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008152:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008156:	ee37 7a27 	vadd.f32	s14, s14, s15
 800815a:	d1e5      	bne.n	8008128 <forward_dense+0x718>
 800815c:	f109 0901 	add.w	r9, r9, #1
 8008160:	44c8      	add	r8, r9
 8008162:	eb0e 0ec9 	add.w	lr, lr, r9, lsl #3
 8008166:	990a      	ldr	r1, [sp, #40]	; 0x28
 8008168:	b1c1      	cbz	r1, 800819c <forward_dense+0x78c>
 800816a:	f898 1000 	ldrb.w	r1, [r8]
 800816e:	edde 7a00 	vldr	s15, [lr]
 8008172:	0909      	lsrs	r1, r1, #4
 8008174:	9804      	ldr	r0, [sp, #16]
 8008176:	eb04 0181 	add.w	r1, r4, r1, lsl #2
 800817a:	4402      	add	r2, r0
 800817c:	4484      	add	ip, r0
 800817e:	edd1 6a00 	vldr	s13, [r1]
 8008182:	9903      	ldr	r1, [sp, #12]
 8008184:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008188:	ee72 2a87 	vadd.f32	s5, s5, s14
 800818c:	eceb 2a01 	vstmia	fp!, {s5}
 8008190:	4559      	cmp	r1, fp
 8008192:	f63f af4e 	bhi.w	8008032 <forward_dense+0x622>
 8008196:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
 800819a:	e510      	b.n	8007bbe <forward_dense+0x1ae>
 800819c:	9904      	ldr	r1, [sp, #16]
 800819e:	ee32 7a87 	vadd.f32	s14, s5, s14
 80081a2:	440a      	add	r2, r1
 80081a4:	448c      	add	ip, r1
 80081a6:	9903      	ldr	r1, [sp, #12]
 80081a8:	ecab 7a01 	vstmia	fp!, {s14}
 80081ac:	458b      	cmp	fp, r1
 80081ae:	d2f2      	bcs.n	8008196 <forward_dense+0x786>
 80081b0:	2b00      	cmp	r3, #0
 80081b2:	f47f af41 	bne.w	8008038 <forward_dense+0x628>
 80081b6:	9909      	ldr	r1, [sp, #36]	; 0x24
 80081b8:	eef0 2a48 	vmov.f32	s5, s16
 80081bc:	ed9f 7a23 	vldr	s14, [pc, #140]	; 800824c <forward_dense+0x83c>
 80081c0:	2900      	cmp	r1, #0
 80081c2:	f47f af41 	bne.w	8008048 <forward_dense+0x638>
 80081c6:	46d6      	mov	lr, sl
 80081c8:	4690      	mov	r8, r2
 80081ca:	e79f      	b.n	800810c <forward_dense+0x6fc>
 80081cc:	9819      	ldr	r0, [sp, #100]	; 0x64
 80081ce:	4651      	mov	r1, sl
 80081d0:	9d06      	ldr	r5, [sp, #24]
 80081d2:	9001      	str	r0, [sp, #4]
 80081d4:	9817      	ldr	r0, [sp, #92]	; 0x5c
 80081d6:	9000      	str	r0, [sp, #0]
 80081d8:	4628      	mov	r0, r5
 80081da:	f000 fd99 	bl	8008d10 <forward_lite_dense_if32of32wf32>
 80081de:	462b      	mov	r3, r5
 80081e0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80081e2:	4413      	add	r3, r2
 80081e4:	4619      	mov	r1, r3
 80081e6:	9306      	str	r3, [sp, #24]
 80081e8:	e4f2      	b.n	8007bd0 <forward_dense+0x1c0>
 80081ea:	b01b      	add	sp, #108	; 0x6c
 80081ec:	ecbd 8b02 	vpop	{d8}
 80081f0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80081f4:	4601      	mov	r1, r0
 80081f6:	e4eb      	b.n	8007bd0 <forward_dense+0x1c0>
 80081f8:	4651      	mov	r1, sl
 80081fa:	4610      	mov	r0, r2
 80081fc:	e572      	b.n	8007ce4 <forward_dense+0x2d4>
 80081fe:	f8d8 800c 	ldr.w	r8, [r8, #12]
 8008202:	f1b9 0f00 	cmp.w	r9, #0
 8008206:	d016      	beq.n	8008236 <forward_dense+0x826>
 8008208:	e9d9 0100 	ldrd	r0, r1, [r9]
 800820c:	f7fd fa90 	bl	8005730 <ai_array_get_byte_size>
 8008210:	f8d9 a00c 	ldr.w	sl, [r9, #12]
 8008214:	4602      	mov	r2, r0
 8008216:	4640      	mov	r0, r8
 8008218:	4651      	mov	r1, sl
 800821a:	f000 fea1 	bl	8008f60 <st_int8_copy>
 800821e:	e44b      	b.n	8007ab8 <forward_dense+0xa8>
 8008220:	2b04      	cmp	r3, #4
 8008222:	d00a      	beq.n	800823a <forward_dense+0x82a>
 8008224:	f04f 0900 	mov.w	r9, #0
 8008228:	e441      	b.n	8007aae <forward_dense+0x9e>
 800822a:	930f      	str	r3, [sp, #60]	; 0x3c
 800822c:	e417      	b.n	8007a5e <forward_dense+0x4e>
 800822e:	2300      	movs	r3, #0
 8008230:	930d      	str	r3, [sp, #52]	; 0x34
 8008232:	460b      	mov	r3, r1
 8008234:	e413      	b.n	8007a5e <forward_dense+0x4e>
 8008236:	46c2      	mov	sl, r8
 8008238:	e43e      	b.n	8007ab8 <forward_dense+0xa8>
 800823a:	f8d8 a00c 	ldr.w	sl, [r8, #12]
 800823e:	e43b      	b.n	8007ab8 <forward_dense+0xa8>
 8008240:	2300      	movs	r3, #0
 8008242:	685b      	ldr	r3, [r3, #4]
 8008244:	deff      	udf	#255	; 0xff
 8008246:	2300      	movs	r3, #0
 8008248:	685b      	ldr	r3, [r3, #4]
 800824a:	deff      	udf	#255	; 0xff
 800824c:	00000000 	.word	0x00000000

08008250 <forward_eltwise>:
 8008250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008254:	6982      	ldr	r2, [r0, #24]
 8008256:	b09d      	sub	sp, #116	; 0x74
 8008258:	8811      	ldrh	r1, [r2, #0]
 800825a:	9003      	str	r0, [sp, #12]
 800825c:	2900      	cmp	r1, #0
 800825e:	f000 80c7 	beq.w	80083f0 <forward_eltwise+0x1a0>
 8008262:	6853      	ldr	r3, [r2, #4]
 8008264:	2b00      	cmp	r3, #0
 8008266:	f000 8116 	beq.w	8008496 <forward_eltwise+0x246>
 800826a:	8818      	ldrh	r0, [r3, #0]
 800826c:	f8d3 8004 	ldr.w	r8, [r3, #4]
 8008270:	f1b8 0f00 	cmp.w	r8, #0
 8008274:	d001      	beq.n	800827a <forward_eltwise+0x2a>
 8008276:	f8d8 8000 	ldr.w	r8, [r8]
 800827a:	2901      	cmp	r1, #1
 800827c:	f000 810f 	beq.w	800849e <forward_eltwise+0x24e>
 8008280:	691b      	ldr	r3, [r3, #16]
 8008282:	9300      	str	r3, [sp, #0]
 8008284:	b10b      	cbz	r3, 800828a <forward_eltwise+0x3a>
 8008286:	681b      	ldr	r3, [r3, #0]
 8008288:	9300      	str	r3, [sp, #0]
 800828a:	2300      	movs	r3, #0
 800828c:	2801      	cmp	r0, #1
 800828e:	930d      	str	r3, [sp, #52]	; 0x34
 8008290:	9312      	str	r3, [sp, #72]	; 0x48
 8008292:	9317      	str	r3, [sp, #92]	; 0x5c
 8008294:	e9cd 330e 	strd	r3, r3, [sp, #56]	; 0x38
 8008298:	e9cd 3310 	strd	r3, r3, [sp, #64]	; 0x40
 800829c:	e9cd 3313 	strd	r3, r3, [sp, #76]	; 0x4c
 80082a0:	e9cd 3315 	strd	r3, r3, [sp, #84]	; 0x54
 80082a4:	e9cd 3318 	strd	r3, r3, [sp, #96]	; 0x60
 80082a8:	e9cd 331a 	strd	r3, r3, [sp, #104]	; 0x68
 80082ac:	ab0d      	add	r3, sp, #52	; 0x34
 80082ae:	9308      	str	r3, [sp, #32]
 80082b0:	ab12      	add	r3, sp, #72	; 0x48
 80082b2:	930a      	str	r3, [sp, #40]	; 0x28
 80082b4:	ab17      	add	r3, sp, #92	; 0x5c
 80082b6:	930c      	str	r3, [sp, #48]	; 0x30
 80082b8:	f240 5302 	movw	r3, #1282	; 0x502
 80082bc:	9307      	str	r3, [sp, #28]
 80082be:	9309      	str	r3, [sp, #36]	; 0x24
 80082c0:	f240 5301 	movw	r3, #1281	; 0x501
 80082c4:	930b      	str	r3, [sp, #44]	; 0x2c
 80082c6:	9b03      	ldr	r3, [sp, #12]
 80082c8:	e9d3 7307 	ldrd	r7, r3, [r3, #28]
 80082cc:	9304      	str	r3, [sp, #16]
 80082ce:	f240 80d8 	bls.w	8008482 <forward_eltwise+0x232>
 80082d2:	0083      	lsls	r3, r0, #2
 80082d4:	9305      	str	r3, [sp, #20]
 80082d6:	2304      	movs	r3, #4
 80082d8:	9301      	str	r3, [sp, #4]
 80082da:	8813      	ldrh	r3, [r2, #0]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	f000 80e1 	beq.w	80084a4 <forward_eltwise+0x254>
 80082e2:	6853      	ldr	r3, [r2, #4]
 80082e4:	685b      	ldr	r3, [r3, #4]
 80082e6:	2b00      	cmp	r3, #0
 80082e8:	f000 80d7 	beq.w	800849a <forward_eltwise+0x24a>
 80082ec:	9a01      	ldr	r2, [sp, #4]
 80082ee:	f108 0108 	add.w	r1, r8, #8
 80082f2:	f8d8 0008 	ldr.w	r0, [r8, #8]
 80082f6:	f853 a002 	ldr.w	sl, [r3, r2]
 80082fa:	f8da 3008 	ldr.w	r3, [sl, #8]
 80082fe:	f10a 0908 	add.w	r9, sl, #8
 8008302:	4043      	eors	r3, r0
 8008304:	f033 03ff 	bics.w	r3, r3, #255	; 0xff
 8008308:	d10f      	bne.n	800832a <forward_eltwise+0xda>
 800830a:	f3c0 2017 	ubfx	r0, r0, #8, #24
 800830e:	2800      	cmp	r0, #0
 8008310:	f000 8097 	beq.w	8008442 <forward_eltwise+0x1f2>
 8008314:	3801      	subs	r0, #1
 8008316:	f8d8 200c 	ldr.w	r2, [r8, #12]
 800831a:	f8da 300c 	ldr.w	r3, [sl, #12]
 800831e:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
 8008322:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 8008326:	429a      	cmp	r2, r3
 8008328:	d0f1      	beq.n	800830e <forward_eltwise+0xbe>
 800832a:	f8d8 3018 	ldr.w	r3, [r8, #24]
 800832e:	464a      	mov	r2, r9
 8008330:	a80b      	add	r0, sp, #44	; 0x2c
 8008332:	9102      	str	r1, [sp, #8]
 8008334:	689d      	ldr	r5, [r3, #8]
 8008336:	f8da 3018 	ldr.w	r3, [sl, #24]
 800833a:	689c      	ldr	r4, [r3, #8]
 800833c:	9b00      	ldr	r3, [sp, #0]
 800833e:	699b      	ldr	r3, [r3, #24]
 8008340:	689e      	ldr	r6, [r3, #8]
 8008342:	f000 fecb 	bl	80090dc <core_get_broadcasted_shape>
 8008346:	f8da 2014 	ldr.w	r2, [sl, #20]
 800834a:	a807      	add	r0, sp, #28
 800834c:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8008350:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8008354:	9a00      	ldr	r2, [sp, #0]
 8008356:	9902      	ldr	r1, [sp, #8]
 8008358:	6952      	ldr	r2, [r2, #20]
 800835a:	685b      	ldr	r3, [r3, #4]
 800835c:	f8d2 8004 	ldr.w	r8, [r2, #4]
 8008360:	aa0b      	add	r2, sp, #44	; 0x2c
 8008362:	f000 fee3 	bl	800912c <core_compute_offsets>
 8008366:	4653      	mov	r3, sl
 8008368:	aa0b      	add	r2, sp, #44	; 0x2c
 800836a:	4649      	mov	r1, r9
 800836c:	a809      	add	r0, sp, #36	; 0x24
 800836e:	f000 fedd 	bl	800912c <core_compute_offsets>
 8008372:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8008374:	68d3      	ldr	r3, [r2, #12]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d058      	beq.n	800842c <forward_eltwise+0x1dc>
 800837a:	2300      	movs	r3, #0
 800837c:	6891      	ldr	r1, [r2, #8]
 800837e:	9302      	str	r3, [sp, #8]
 8008380:	2900      	cmp	r1, #0
 8008382:	d053      	beq.n	800842c <forward_eltwise+0x1dc>
 8008384:	980b      	ldr	r0, [sp, #44]	; 0x2c
 8008386:	f04f 0b00 	mov.w	fp, #0
 800838a:	f3c0 2017 	ubfx	r0, r0, #8, #24
 800838e:	f04f 0a00 	mov.w	sl, #0
 8008392:	2804      	cmp	r0, #4
 8008394:	bf8c      	ite	hi
 8008396:	6913      	ldrhi	r3, [r2, #16]
 8008398:	2301      	movls	r3, #1
 800839a:	459a      	cmp	sl, r3
 800839c:	d22a      	bcs.n	80083f4 <forward_eltwise+0x1a4>
 800839e:	6851      	ldr	r1, [r2, #4]
 80083a0:	b1a9      	cbz	r1, 80083ce <forward_eltwise+0x17e>
 80083a2:	f04f 0900 	mov.w	r9, #0
 80083a6:	4622      	mov	r2, r4
 80083a8:	4629      	mov	r1, r5
 80083aa:	4630      	mov	r0, r6
 80083ac:	f109 0901 	add.w	r9, r9, #1
 80083b0:	47b8      	blx	r7
 80083b2:	9b08      	ldr	r3, [sp, #32]
 80083b4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80083b6:	4446      	add	r6, r8
 80083b8:	685b      	ldr	r3, [r3, #4]
 80083ba:	441d      	add	r5, r3
 80083bc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	441c      	add	r4, r3
 80083c2:	6853      	ldr	r3, [r2, #4]
 80083c4:	454b      	cmp	r3, r9
 80083c6:	d8ee      	bhi.n	80083a6 <forward_eltwise+0x156>
 80083c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80083ca:	f3c3 2017 	ubfx	r0, r3, #8, #24
 80083ce:	9907      	ldr	r1, [sp, #28]
 80083d0:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 80083d4:	d302      	bcc.n	80083dc <forward_eltwise+0x18c>
 80083d6:	9908      	ldr	r1, [sp, #32]
 80083d8:	690b      	ldr	r3, [r1, #16]
 80083da:	441d      	add	r5, r3
 80083dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80083de:	f5b1 6fa0 	cmp.w	r1, #1280	; 0x500
 80083e2:	d302      	bcc.n	80083ea <forward_eltwise+0x19a>
 80083e4:	990a      	ldr	r1, [sp, #40]	; 0x28
 80083e6:	690b      	ldr	r3, [r1, #16]
 80083e8:	441c      	add	r4, r3
 80083ea:	f10a 0a01 	add.w	sl, sl, #1
 80083ee:	e7d0      	b.n	8008392 <forward_eltwise+0x142>
 80083f0:	684b      	ldr	r3, [r1, #4]
 80083f2:	deff      	udf	#255	; 0xff
 80083f4:	9b08      	ldr	r3, [sp, #32]
 80083f6:	f10b 0b01 	add.w	fp, fp, #1
 80083fa:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
 80083fe:	6899      	ldr	r1, [r3, #8]
 8008400:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8008404:	440d      	add	r5, r1
 8008406:	f8d9 1008 	ldr.w	r1, [r9, #8]
 800840a:	45dc      	cmp	ip, fp
 800840c:	440c      	add	r4, r1
 800840e:	d8be      	bhi.n	800838e <forward_eltwise+0x13e>
 8008410:	68d8      	ldr	r0, [r3, #12]
 8008412:	469e      	mov	lr, r3
 8008414:	f8d9 300c 	ldr.w	r3, [r9, #12]
 8008418:	4661      	mov	r1, ip
 800841a:	4405      	add	r5, r0
 800841c:	441c      	add	r4, r3
 800841e:	9b02      	ldr	r3, [sp, #8]
 8008420:	3301      	adds	r3, #1
 8008422:	4618      	mov	r0, r3
 8008424:	9302      	str	r3, [sp, #8]
 8008426:	68d3      	ldr	r3, [r2, #12]
 8008428:	4283      	cmp	r3, r0
 800842a:	d8a9      	bhi.n	8008380 <forward_eltwise+0x130>
 800842c:	9b01      	ldr	r3, [sp, #4]
 800842e:	9a05      	ldr	r2, [sp, #20]
 8008430:	3304      	adds	r3, #4
 8008432:	4293      	cmp	r3, r2
 8008434:	9301      	str	r3, [sp, #4]
 8008436:	d024      	beq.n	8008482 <forward_eltwise+0x232>
 8008438:	9b03      	ldr	r3, [sp, #12]
 800843a:	f8dd 8000 	ldr.w	r8, [sp]
 800843e:	699a      	ldr	r2, [r3, #24]
 8008440:	e74b      	b.n	80082da <forward_eltwise+0x8a>
 8008442:	9b00      	ldr	r3, [sp, #0]
 8008444:	464a      	mov	r2, r9
 8008446:	f8da 0018 	ldr.w	r0, [sl, #24]
 800844a:	699b      	ldr	r3, [r3, #24]
 800844c:	f8d8 4018 	ldr.w	r4, [r8, #24]
 8008450:	6885      	ldr	r5, [r0, #8]
 8008452:	a80b      	add	r0, sp, #44	; 0x2c
 8008454:	689e      	ldr	r6, [r3, #8]
 8008456:	68a4      	ldr	r4, [r4, #8]
 8008458:	f000 fe40 	bl	80090dc <core_get_broadcasted_shape>
 800845c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800845e:	0a1b      	lsrs	r3, r3, #8
 8008460:	d012      	beq.n	8008488 <forward_eltwise+0x238>
 8008462:	980c      	ldr	r0, [sp, #48]	; 0x30
 8008464:	eb00 0283 	add.w	r2, r0, r3, lsl #2
 8008468:	2301      	movs	r3, #1
 800846a:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 800846e:	4290      	cmp	r0, r2
 8008470:	fb01 f303 	mul.w	r3, r1, r3
 8008474:	d1f9      	bne.n	800846a <forward_eltwise+0x21a>
 8008476:	4621      	mov	r1, r4
 8008478:	462a      	mov	r2, r5
 800847a:	4630      	mov	r0, r6
 800847c:	9c04      	ldr	r4, [sp, #16]
 800847e:	47a0      	blx	r4
 8008480:	e7d4      	b.n	800842c <forward_eltwise+0x1dc>
 8008482:	b01d      	add	sp, #116	; 0x74
 8008484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008488:	4621      	mov	r1, r4
 800848a:	2301      	movs	r3, #1
 800848c:	462a      	mov	r2, r5
 800848e:	4630      	mov	r0, r6
 8008490:	9c04      	ldr	r4, [sp, #16]
 8008492:	47a0      	blx	r4
 8008494:	e7ca      	b.n	800842c <forward_eltwise+0x1dc>
 8008496:	4618      	mov	r0, r3
 8008498:	e6e8      	b.n	800826c <forward_eltwise+0x1c>
 800849a:	689b      	ldr	r3, [r3, #8]
 800849c:	deff      	udf	#255	; 0xff
 800849e:	2300      	movs	r3, #0
 80084a0:	685b      	ldr	r3, [r3, #4]
 80084a2:	deff      	udf	#255	; 0xff
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	deff      	udf	#255	; 0xff

080084a8 <forward_relu>:
 80084a8:	6982      	ldr	r2, [r0, #24]
 80084aa:	8813      	ldrh	r3, [r2, #0]
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d05b      	beq.n	8008568 <forward_relu+0xc0>
 80084b0:	6851      	ldr	r1, [r2, #4]
 80084b2:	684a      	ldr	r2, [r1, #4]
 80084b4:	b102      	cbz	r2, 80084b8 <forward_relu+0x10>
 80084b6:	6812      	ldr	r2, [r2, #0]
 80084b8:	2b01      	cmp	r3, #1
 80084ba:	f000 8123 	beq.w	8008704 <forward_relu+0x25c>
 80084be:	b470      	push	{r4, r5, r6}
 80084c0:	690b      	ldr	r3, [r1, #16]
 80084c2:	b103      	cbz	r3, 80084c6 <forward_relu+0x1e>
 80084c4:	681b      	ldr	r3, [r3, #0]
 80084c6:	69c6      	ldr	r6, [r0, #28]
 80084c8:	2e00      	cmp	r6, #0
 80084ca:	f000 809e 	beq.w	800860a <forward_relu+0x162>
 80084ce:	6871      	ldr	r1, [r6, #4]
 80084d0:	6998      	ldr	r0, [r3, #24]
 80084d2:	2901      	cmp	r1, #1
 80084d4:	f000 80c3 	beq.w	800865e <forward_relu+0x1b6>
 80084d8:	6893      	ldr	r3, [r2, #8]
 80084da:	6991      	ldr	r1, [r2, #24]
 80084dc:	0a1b      	lsrs	r3, r3, #8
 80084de:	6880      	ldr	r0, [r0, #8]
 80084e0:	688d      	ldr	r5, [r1, #8]
 80084e2:	f000 80f2 	beq.w	80086ca <forward_relu+0x222>
 80084e6:	68d4      	ldr	r4, [r2, #12]
 80084e8:	2201      	movs	r2, #1
 80084ea:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80084ee:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80084f2:	42a3      	cmp	r3, r4
 80084f4:	fb01 f202 	mul.w	r2, r1, r2
 80084f8:	d1f9      	bne.n	80084ee <forward_relu+0x46>
 80084fa:	68b3      	ldr	r3, [r6, #8]
 80084fc:	ed93 7a02 	vldr	s14, [r3, #8]
 8008500:	edd3 6a00 	vldr	s13, [r3]
 8008504:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 8008508:	ed93 6a01 	vldr	s12, [r3, #4]
 800850c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008510:	d42c      	bmi.n	800856c <forward_relu+0xc4>
 8008512:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008516:	4413      	add	r3, r2
 8008518:	eb05 0283 	add.w	r2, r5, r3, lsl #2
 800851c:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 8008520:	4295      	cmp	r5, r2
 8008522:	d81f      	bhi.n	8008564 <forward_relu+0xbc>
 8008524:	3204      	adds	r2, #4
 8008526:	1d01      	adds	r1, r0, #4
 8008528:	e00d      	b.n	8008546 <forward_relu+0x9e>
 800852a:	eef4 6ae7 	vcmpe.f32	s13, s15
 800852e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008532:	db03      	blt.n	800853c <forward_relu+0x94>
 8008534:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8008538:	ee67 7a86 	vmul.f32	s15, s15, s12
 800853c:	3b08      	subs	r3, #8
 800853e:	ed61 7a01 	vstmdb	r1!, {s15}
 8008542:	429d      	cmp	r5, r3
 8008544:	d80e      	bhi.n	8008564 <forward_relu+0xbc>
 8008546:	4613      	mov	r3, r2
 8008548:	ed72 7a01 	vldmdb	r2!, {s15}
 800854c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008550:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008554:	d9e9      	bls.n	800852a <forward_relu+0x82>
 8008556:	3b08      	subs	r3, #8
 8008558:	eef0 7a47 	vmov.f32	s15, s14
 800855c:	429d      	cmp	r5, r3
 800855e:	ed61 7a01 	vstmdb	r1!, {s15}
 8008562:	d9f0      	bls.n	8008546 <forward_relu+0x9e>
 8008564:	bc70      	pop	{r4, r5, r6}
 8008566:	4770      	bx	lr
 8008568:	685b      	ldr	r3, [r3, #4]
 800856a:	deff      	udf	#255	; 0xff
 800856c:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8008570:	f06f 4140 	mvn.w	r1, #3221225472	; 0xc0000000
 8008574:	4411      	add	r1, r2
 8008576:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800857a:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 800857e:	eb00 0081 	add.w	r0, r0, r1, lsl #2
 8008582:	d11f      	bne.n	80085c4 <forward_relu+0x11c>
 8008584:	429d      	cmp	r5, r3
 8008586:	d8ed      	bhi.n	8008564 <forward_relu+0xbc>
 8008588:	1b5d      	subs	r5, r3, r5
 800858a:	1d1a      	adds	r2, r3, #4
 800858c:	1d01      	adds	r1, r0, #4
 800858e:	2000      	movs	r0, #0
 8008590:	f025 0503 	bic.w	r5, r5, #3
 8008594:	1b5b      	subs	r3, r3, r5
 8008596:	ed72 7a01 	vldmdb	r2!, {s15}
 800859a:	eef4 7ae6 	vcmpe.f32	s15, s13
 800859e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085a2:	dc0a      	bgt.n	80085ba <forward_relu+0x112>
 80085a4:	429a      	cmp	r2, r3
 80085a6:	f841 0d04 	str.w	r0, [r1, #-4]!
 80085aa:	d0db      	beq.n	8008564 <forward_relu+0xbc>
 80085ac:	ed72 7a01 	vldmdb	r2!, {s15}
 80085b0:	eef4 7ae6 	vcmpe.f32	s15, s13
 80085b4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085b8:	ddf4      	ble.n	80085a4 <forward_relu+0xfc>
 80085ba:	429a      	cmp	r2, r3
 80085bc:	ed61 7a01 	vstmdb	r1!, {s15}
 80085c0:	d1e9      	bne.n	8008596 <forward_relu+0xee>
 80085c2:	e7cf      	b.n	8008564 <forward_relu+0xbc>
 80085c4:	429d      	cmp	r5, r3
 80085c6:	d8cd      	bhi.n	8008564 <forward_relu+0xbc>
 80085c8:	1b5d      	subs	r5, r3, r5
 80085ca:	1d1a      	adds	r2, r3, #4
 80085cc:	1d01      	adds	r1, r0, #4
 80085ce:	f025 0503 	bic.w	r5, r5, #3
 80085d2:	1b5b      	subs	r3, r3, r5
 80085d4:	ed72 7a01 	vldmdb	r2!, {s15}
 80085d8:	eef4 6ae7 	vcmpe.f32	s13, s15
 80085dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085e0:	db0e      	blt.n	8008600 <forward_relu+0x158>
 80085e2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80085e6:	4293      	cmp	r3, r2
 80085e8:	ee67 7a86 	vmul.f32	s15, s15, s12
 80085ec:	ed61 7a01 	vstmdb	r1!, {s15}
 80085f0:	d0b8      	beq.n	8008564 <forward_relu+0xbc>
 80085f2:	ed72 7a01 	vldmdb	r2!, {s15}
 80085f6:	eef4 6ae7 	vcmpe.f32	s13, s15
 80085fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80085fe:	daf0      	bge.n	80085e2 <forward_relu+0x13a>
 8008600:	4293      	cmp	r3, r2
 8008602:	ed61 7a01 	vstmdb	r1!, {s15}
 8008606:	d1e5      	bne.n	80085d4 <forward_relu+0x12c>
 8008608:	e7ac      	b.n	8008564 <forward_relu+0xbc>
 800860a:	6999      	ldr	r1, [r3, #24]
 800860c:	6893      	ldr	r3, [r2, #8]
 800860e:	6990      	ldr	r0, [r2, #24]
 8008610:	0a1b      	lsrs	r3, r3, #8
 8008612:	6889      	ldr	r1, [r1, #8]
 8008614:	6884      	ldr	r4, [r0, #8]
 8008616:	d06e      	beq.n	80086f6 <forward_relu+0x24e>
 8008618:	68d5      	ldr	r5, [r2, #12]
 800861a:	2201      	movs	r2, #1
 800861c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008620:	f853 0d04 	ldr.w	r0, [r3, #-4]!
 8008624:	429d      	cmp	r5, r3
 8008626:	fb00 f202 	mul.w	r2, r0, r2
 800862a:	d1f9      	bne.n	8008620 <forward_relu+0x178>
 800862c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 8008630:	4413      	add	r3, r2
 8008632:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8008636:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800863a:	4294      	cmp	r4, r2
 800863c:	d892      	bhi.n	8008564 <forward_relu+0xbc>
 800863e:	3204      	adds	r2, #4
 8008640:	3104      	adds	r1, #4
 8008642:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800870c <forward_relu+0x264>
 8008646:	4613      	mov	r3, r2
 8008648:	ed72 7a01 	vldmdb	r2!, {s15}
 800864c:	3b08      	subs	r3, #8
 800864e:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008652:	ed61 7a01 	vstmdb	r1!, {s15}
 8008656:	429c      	cmp	r4, r3
 8008658:	d9f5      	bls.n	8008646 <forward_relu+0x19e>
 800865a:	bc70      	pop	{r4, r5, r6}
 800865c:	4770      	bx	lr
 800865e:	6993      	ldr	r3, [r2, #24]
 8008660:	6880      	ldr	r0, [r0, #8]
 8008662:	689c      	ldr	r4, [r3, #8]
 8008664:	6893      	ldr	r3, [r2, #8]
 8008666:	0a1b      	lsrs	r3, r3, #8
 8008668:	d047      	beq.n	80086fa <forward_relu+0x252>
 800866a:	68d5      	ldr	r5, [r2, #12]
 800866c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8008670:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8008674:	42ab      	cmp	r3, r5
 8008676:	fb02 f101 	mul.w	r1, r2, r1
 800867a:	d1f9      	bne.n	8008670 <forward_relu+0x1c8>
 800867c:	f06f 4240 	mvn.w	r2, #3221225472	; 0xc0000000
 8008680:	68b3      	ldr	r3, [r6, #8]
 8008682:	440a      	add	r2, r1
 8008684:	ed93 7a00 	vldr	s14, [r3]
 8008688:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800868c:	eb00 0082 	add.w	r0, r0, r2, lsl #2
 8008690:	429c      	cmp	r4, r3
 8008692:	f63f af67 	bhi.w	8008564 <forward_relu+0xbc>
 8008696:	1d02      	adds	r2, r0, #4
 8008698:	3304      	adds	r3, #4
 800869a:	2000      	movs	r0, #0
 800869c:	ed53 7a01 	vldr	s15, [r3, #-4]
 80086a0:	1f19      	subs	r1, r3, #4
 80086a2:	3b08      	subs	r3, #8
 80086a4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80086a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086ac:	d406      	bmi.n	80086bc <forward_relu+0x214>
 80086ae:	429c      	cmp	r4, r3
 80086b0:	f842 0d04 	str.w	r0, [r2, #-4]!
 80086b4:	f63f af56 	bhi.w	8008564 <forward_relu+0xbc>
 80086b8:	460b      	mov	r3, r1
 80086ba:	e7ef      	b.n	800869c <forward_relu+0x1f4>
 80086bc:	429c      	cmp	r4, r3
 80086be:	ed62 7a01 	vstmdb	r2!, {s15}
 80086c2:	f63f af4f 	bhi.w	8008564 <forward_relu+0xbc>
 80086c6:	460b      	mov	r3, r1
 80086c8:	e7e8      	b.n	800869c <forward_relu+0x1f4>
 80086ca:	68b3      	ldr	r3, [r6, #8]
 80086cc:	ed93 7a02 	vldr	s14, [r3, #8]
 80086d0:	edd3 6a00 	vldr	s13, [r3]
 80086d4:	eeb5 7ac0 	vcmpe.f32	s14, #0.0
 80086d8:	ed93 6a01 	vldr	s12, [r3, #4]
 80086dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086e0:	d401      	bmi.n	80086e6 <forward_relu+0x23e>
 80086e2:	462a      	mov	r2, r5
 80086e4:	e71e      	b.n	8008524 <forward_relu+0x7c>
 80086e6:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80086ea:	462b      	mov	r3, r5
 80086ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80086f0:	f47f af6a 	bne.w	80085c8 <forward_relu+0x120>
 80086f4:	e748      	b.n	8008588 <forward_relu+0xe0>
 80086f6:	4622      	mov	r2, r4
 80086f8:	e7a1      	b.n	800863e <forward_relu+0x196>
 80086fa:	68b2      	ldr	r2, [r6, #8]
 80086fc:	4623      	mov	r3, r4
 80086fe:	ed92 7a00 	vldr	s14, [r2]
 8008702:	e7c8      	b.n	8008696 <forward_relu+0x1ee>
 8008704:	2300      	movs	r3, #0
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	deff      	udf	#255	; 0xff
 800870a:	bf00      	nop
 800870c:	00000000 	.word	0x00000000

08008710 <forward_sm>:
 8008710:	6982      	ldr	r2, [r0, #24]
 8008712:	8813      	ldrh	r3, [r2, #0]
 8008714:	2b00      	cmp	r3, #0
 8008716:	d078      	beq.n	800880a <forward_sm+0xfa>
 8008718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800871c:	ed2d 8b04 	vpush	{d8-d9}
 8008720:	6852      	ldr	r2, [r2, #4]
 8008722:	b085      	sub	sp, #20
 8008724:	6854      	ldr	r4, [r2, #4]
 8008726:	b104      	cbz	r4, 800872a <forward_sm+0x1a>
 8008728:	6824      	ldr	r4, [r4, #0]
 800872a:	2b01      	cmp	r3, #1
 800872c:	d072      	beq.n	8008814 <forward_sm+0x104>
 800872e:	6913      	ldr	r3, [r2, #16]
 8008730:	2b00      	cmp	r3, #0
 8008732:	d072      	beq.n	800881a <forward_sm+0x10a>
 8008734:	681e      	ldr	r6, [r3, #0]
 8008736:	68a3      	ldr	r3, [r4, #8]
 8008738:	68e0      	ldr	r0, [r4, #12]
 800873a:	68f2      	ldr	r2, [r6, #12]
 800873c:	0a1b      	lsrs	r3, r3, #8
 800873e:	6845      	ldr	r5, [r0, #4]
 8008740:	6857      	ldr	r7, [r2, #4]
 8008742:	d064      	beq.n	800880e <forward_sm+0xfe>
 8008744:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008748:	2201      	movs	r2, #1
 800874a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800874e:	4298      	cmp	r0, r3
 8008750:	fb01 f202 	mul.w	r2, r1, r2
 8008754:	d1f9      	bne.n	800874a <forward_sm+0x3a>
 8008756:	ea4f 0982 	mov.w	r9, r2, lsl #2
 800875a:	69a2      	ldr	r2, [r4, #24]
 800875c:	69b3      	ldr	r3, [r6, #24]
 800875e:	6892      	ldr	r2, [r2, #8]
 8008760:	f8d3 8008 	ldr.w	r8, [r3, #8]
 8008764:	eb02 0309 	add.w	r3, r2, r9
 8008768:	429a      	cmp	r2, r3
 800876a:	9301      	str	r3, [sp, #4]
 800876c:	d248      	bcs.n	8008800 <forward_sm+0xf0>
 800876e:	00bb      	lsls	r3, r7, #2
 8008770:	2d01      	cmp	r5, #1
 8008772:	eb02 0785 	add.w	r7, r2, r5, lsl #2
 8008776:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 800877a:	9303      	str	r3, [sp, #12]
 800877c:	ea4f 0385 	mov.w	r3, r5, lsl #2
 8008780:	463e      	mov	r6, r7
 8008782:	ed92 8a00 	vldr	s16, [r2]
 8008786:	9302      	str	r3, [sp, #8]
 8008788:	d937      	bls.n	80087fa <forward_sm+0xea>
 800878a:	1d13      	adds	r3, r2, #4
 800878c:	ecf3 7a01 	vldmia	r3!, {s15}
 8008790:	429e      	cmp	r6, r3
 8008792:	fe88 8a27 	vmaxnm.f32	s16, s16, s15
 8008796:	d1f9      	bne.n	800878c <forward_sm+0x7c>
 8008798:	4692      	mov	sl, r2
 800879a:	46c3      	mov	fp, r8
 800879c:	46c1      	mov	r9, r8
 800879e:	eddf 8a20 	vldr	s17, [pc, #128]	; 8008820 <forward_sm+0x110>
 80087a2:	2400      	movs	r4, #0
 80087a4:	ecba 0a01 	vldmia	sl!, {s0}
 80087a8:	3401      	adds	r4, #1
 80087aa:	ee30 0a48 	vsub.f32	s0, s0, s16
 80087ae:	f001 f9f7 	bl	8009ba0 <expf>
 80087b2:	42a5      	cmp	r5, r4
 80087b4:	ee78 8a80 	vadd.f32	s17, s17, s0
 80087b8:	eca9 0a01 	vstmia	r9!, {s0}
 80087bc:	d8f2      	bhi.n	80087a4 <forward_sm+0x94>
 80087be:	eef5 8a40 	vcmp.f32	s17, #0.0
 80087c2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80087c6:	d00b      	beq.n	80087e0 <forward_sm+0xd0>
 80087c8:	ee89 7a28 	vdiv.f32	s14, s18, s17
 80087cc:	2300      	movs	r3, #0
 80087ce:	eddb 7a00 	vldr	s15, [fp]
 80087d2:	3301      	adds	r3, #1
 80087d4:	429d      	cmp	r5, r3
 80087d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80087da:	eceb 7a01 	vstmia	fp!, {s15}
 80087de:	d8f6      	bhi.n	80087ce <forward_sm+0xbe>
 80087e0:	9b03      	ldr	r3, [sp, #12]
 80087e2:	463a      	mov	r2, r7
 80087e4:	9901      	ldr	r1, [sp, #4]
 80087e6:	4498      	add	r8, r3
 80087e8:	9b02      	ldr	r3, [sp, #8]
 80087ea:	42b9      	cmp	r1, r7
 80087ec:	441e      	add	r6, r3
 80087ee:	d907      	bls.n	8008800 <forward_sm+0xf0>
 80087f0:	2d01      	cmp	r5, #1
 80087f2:	441f      	add	r7, r3
 80087f4:	ed92 8a00 	vldr	s16, [r2]
 80087f8:	d8c7      	bhi.n	800878a <forward_sm+0x7a>
 80087fa:	2d00      	cmp	r5, #0
 80087fc:	d0f0      	beq.n	80087e0 <forward_sm+0xd0>
 80087fe:	e7cb      	b.n	8008798 <forward_sm+0x88>
 8008800:	b005      	add	sp, #20
 8008802:	ecbd 8b04 	vpop	{d8-d9}
 8008806:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800880a:	685b      	ldr	r3, [r3, #4]
 800880c:	deff      	udf	#255	; 0xff
 800880e:	f04f 0904 	mov.w	r9, #4
 8008812:	e7a2      	b.n	800875a <forward_sm+0x4a>
 8008814:	2300      	movs	r3, #0
 8008816:	685b      	ldr	r3, [r3, #4]
 8008818:	deff      	udf	#255	; 0xff
 800881a:	68db      	ldr	r3, [r3, #12]
 800881c:	deff      	udf	#255	; 0xff
 800881e:	bf00      	nop
 8008820:	00000000 	.word	0x00000000

08008824 <ai_conv2d_kernel_simple_opt_f32.constprop.0>:
 8008824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008828:	ed2d 8b0c 	vpush	{d8-d13}
 800882c:	b08d      	sub	sp, #52	; 0x34
 800882e:	461d      	mov	r5, r3
 8008830:	9003      	str	r0, [sp, #12]
 8008832:	9207      	str	r2, [sp, #28]
 8008834:	9c24      	ldr	r4, [sp, #144]	; 0x90
 8008836:	9308      	str	r3, [sp, #32]
 8008838:	f8dd b09c 	ldr.w	fp, [sp, #156]	; 0x9c
 800883c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800883e:	910b      	str	r1, [sp, #44]	; 0x2c
 8008840:	e9dd 0225 	ldrd	r0, r2, [sp, #148]	; 0x94
 8008844:	fb00 f002 	mul.w	r0, r0, r2
 8008848:	9004      	str	r0, [sp, #16]
 800884a:	f8bd 00a4 	ldrh.w	r0, [sp, #164]	; 0xa4
 800884e:	9009      	str	r0, [sp, #36]	; 0x24
 8008850:	2c00      	cmp	r4, #0
 8008852:	f000 80ed 	beq.w	8008a30 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x20c>
 8008856:	009c      	lsls	r4, r3, #2
 8008858:	fb00 f305 	mul.w	r3, r0, r5
 800885c:	009b      	lsls	r3, r3, #2
 800885e:	9405      	str	r4, [sp, #20]
 8008860:	9306      	str	r3, [sp, #24]
 8008862:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008864:	fb03 f305 	mul.w	r3, r3, r5
 8008868:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 800886c:	9301      	str	r3, [sp, #4]
 800886e:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 8008870:	425b      	negs	r3, r3
 8008872:	9300      	str	r3, [sp, #0]
 8008874:	2300      	movs	r3, #0
 8008876:	9302      	str	r3, [sp, #8]
 8008878:	00ab      	lsls	r3, r5, #2
 800887a:	930a      	str	r3, [sp, #40]	; 0x28
 800887c:	9b28      	ldr	r3, [sp, #160]	; 0xa0
 800887e:	2b00      	cmp	r3, #0
 8008880:	f2c0 80dd 	blt.w	8008a3e <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x21a>
 8008884:	9e01      	ldr	r6, [sp, #4]
 8008886:	2000      	movs	r0, #0
 8008888:	9d04      	ldr	r5, [sp, #16]
 800888a:	9b07      	ldr	r3, [sp, #28]
 800888c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800888e:	9900      	ldr	r1, [sp, #0]
 8008890:	fb05 3502 	mla	r5, r5, r2, r3
 8008894:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8008896:	440b      	add	r3, r1
 8008898:	9925      	ldr	r1, [sp, #148]	; 0x94
 800889a:	428b      	cmp	r3, r1
 800889c:	bf94      	ite	ls
 800889e:	ebc0 0003 	rsbls	r0, r0, r3
 80088a2:	ebc0 0001 	rsbhi	r0, r0, r1
 80088a6:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80088a8:	f1bb 0f00 	cmp.w	fp, #0
 80088ac:	eba3 0a00 	sub.w	sl, r3, r0
 80088b0:	9b08      	ldr	r3, [sp, #32]
 80088b2:	eba1 0900 	sub.w	r9, r1, r0
 80088b6:	fb03 f000 	mul.w	r0, r3, r0
 80088ba:	f340 80c6 	ble.w	8008a4a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x226>
 80088be:	f020 040f 	bic.w	r4, r0, #15
 80088c2:	eeb0 7a40 	vmov.f32	s14, s0
 80088c6:	fb02 fa0a 	mul.w	sl, r2, sl
 80088ca:	f04f 0c00 	mov.w	ip, #0
 80088ce:	f104 38ff 	add.w	r8, r4, #4294967295	; 0xffffffff
 80088d2:	fb02 f909 	mul.w	r9, r2, r9
 80088d6:	ea4f 1818 	mov.w	r8, r8, lsr #4
 80088da:	f108 0801 	add.w	r8, r8, #1
 80088de:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 80088e2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 80088e6:	2c00      	cmp	r4, #0
 80088e8:	f340 80a7 	ble.w	8008a3a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x216>
 80088ec:	f106 0240 	add.w	r2, r6, #64	; 0x40
 80088f0:	f105 0340 	add.w	r3, r5, #64	; 0x40
 80088f4:	2100      	movs	r1, #0
 80088f6:	ed53 6a0f 	vldr	s13, [r3, #-60]	; 0xffffffc4
 80088fa:	3110      	adds	r1, #16
 80088fc:	ed52 7a0f 	vldr	s15, [r2, #-60]	; 0xffffffc4
 8008900:	3340      	adds	r3, #64	; 0x40
 8008902:	ed52 4a10 	vldr	s9, [r2, #-64]	; 0xffffffc0
 8008906:	42a1      	cmp	r1, r4
 8008908:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800890c:	ed13 5a20 	vldr	s10, [r3, #-128]	; 0xffffff80
 8008910:	ed52 5a0e 	vldr	s11, [r2, #-56]	; 0xffffffc8
 8008914:	f102 0240 	add.w	r2, r2, #64	; 0x40
 8008918:	ed13 6a1e 	vldr	s12, [r3, #-120]	; 0xffffff88
 800891c:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008920:	ed53 6a1d 	vldr	s13, [r3, #-116]	; 0xffffff8c
 8008924:	ed52 da1d 	vldr	s27, [r2, #-116]	; 0xffffff8c
 8008928:	ed12 da1c 	vldr	s26, [r2, #-112]	; 0xffffff90
 800892c:	ed53 ca1c 	vldr	s25, [r3, #-112]	; 0xffffff90
 8008930:	ed12 ca1b 	vldr	s24, [r2, #-108]	; 0xffffff94
 8008934:	ed53 ba1b 	vldr	s23, [r3, #-108]	; 0xffffff94
 8008938:	eee5 7a86 	vfma.f32	s15, s11, s12
 800893c:	ed12 ba1a 	vldr	s22, [r2, #-104]	; 0xffffff98
 8008940:	ed53 aa1a 	vldr	s21, [r3, #-104]	; 0xffffff98
 8008944:	ed12 aa19 	vldr	s20, [r2, #-100]	; 0xffffff9c
 8008948:	ed53 9a19 	vldr	s19, [r3, #-100]	; 0xffffff9c
 800894c:	ed12 9a18 	vldr	s18, [r2, #-96]	; 0xffffffa0
 8008950:	ed53 8a18 	vldr	s17, [r3, #-96]	; 0xffffffa0
 8008954:	eeed 7aa6 	vfma.f32	s15, s27, s13
 8008958:	ed12 8a17 	vldr	s16, [r2, #-92]	; 0xffffffa4
 800895c:	ed53 0a17 	vldr	s1, [r3, #-92]	; 0xffffffa4
 8008960:	ed12 1a16 	vldr	s2, [r2, #-88]	; 0xffffffa8
 8008964:	ed53 1a16 	vldr	s3, [r3, #-88]	; 0xffffffa8
 8008968:	ed12 2a15 	vldr	s4, [r2, #-84]	; 0xffffffac
 800896c:	ed53 2a15 	vldr	s5, [r3, #-84]	; 0xffffffac
 8008970:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8008974:	ed12 3a14 	vldr	s6, [r2, #-80]	; 0xffffffb0
 8008978:	ed53 3a14 	vldr	s7, [r3, #-80]	; 0xffffffb0
 800897c:	ed12 4a13 	vldr	s8, [r2, #-76]	; 0xffffffb4
 8008980:	ed53 4a13 	vldr	s9, [r3, #-76]	; 0xffffffb4
 8008984:	ed12 5a12 	vldr	s10, [r2, #-72]	; 0xffffffb8
 8008988:	ed53 5a12 	vldr	s11, [r3, #-72]	; 0xffffffb8
 800898c:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8008990:	ed12 6a11 	vldr	s12, [r2, #-68]	; 0xffffffbc
 8008994:	ed53 6a11 	vldr	s13, [r3, #-68]	; 0xffffffbc
 8008998:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 800899c:	eeea 7a29 	vfma.f32	s15, s20, s19
 80089a0:	eee9 7a28 	vfma.f32	s15, s18, s17
 80089a4:	eee8 7a20 	vfma.f32	s15, s16, s1
 80089a8:	eee1 7a21 	vfma.f32	s15, s2, s3
 80089ac:	eee2 7a22 	vfma.f32	s15, s4, s5
 80089b0:	eee3 7a23 	vfma.f32	s15, s6, s7
 80089b4:	eee4 7a24 	vfma.f32	s15, s8, s9
 80089b8:	eee5 7a25 	vfma.f32	s15, s10, s11
 80089bc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80089c0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80089c4:	db97      	blt.n	80088f6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xd2>
 80089c6:	4476      	add	r6, lr
 80089c8:	4475      	add	r5, lr
 80089ca:	4647      	mov	r7, r8
 80089cc:	42b8      	cmp	r0, r7
 80089ce:	dd10      	ble.n	80089f2 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1ce>
 80089d0:	463b      	mov	r3, r7
 80089d2:	4631      	mov	r1, r6
 80089d4:	462a      	mov	r2, r5
 80089d6:	3301      	adds	r3, #1
 80089d8:	ecf2 6a01 	vldmia	r2!, {s13}
 80089dc:	ecf1 7a01 	vldmia	r1!, {s15}
 80089e0:	4298      	cmp	r0, r3
 80089e2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 80089e6:	d1f6      	bne.n	80089d6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1b2>
 80089e8:	1bc7      	subs	r7, r0, r7
 80089ea:	eb05 0587 	add.w	r5, r5, r7, lsl #2
 80089ee:	eb06 0687 	add.w	r6, r6, r7, lsl #2
 80089f2:	f10c 0c01 	add.w	ip, ip, #1
 80089f6:	4456      	add	r6, sl
 80089f8:	444d      	add	r5, r9
 80089fa:	45dc      	cmp	ip, fp
 80089fc:	f47f af73 	bne.w	80088e6 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0xc2>
 8008a00:	9928      	ldr	r1, [sp, #160]	; 0xa0
 8008a02:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008a04:	9a03      	ldr	r2, [sp, #12]
 8008a06:	4401      	add	r1, r0
 8008a08:	9b02      	ldr	r3, [sp, #8]
 8008a0a:	ed82 7a00 	vstr	s14, [r2]
 8008a0e:	9128      	str	r1, [sp, #160]	; 0xa0
 8008a10:	3301      	adds	r3, #1
 8008a12:	9905      	ldr	r1, [sp, #20]
 8008a14:	9302      	str	r3, [sp, #8]
 8008a16:	440a      	add	r2, r1
 8008a18:	9906      	ldr	r1, [sp, #24]
 8008a1a:	9203      	str	r2, [sp, #12]
 8008a1c:	9a00      	ldr	r2, [sp, #0]
 8008a1e:	1a12      	subs	r2, r2, r0
 8008a20:	9200      	str	r2, [sp, #0]
 8008a22:	9a01      	ldr	r2, [sp, #4]
 8008a24:	440a      	add	r2, r1
 8008a26:	9201      	str	r2, [sp, #4]
 8008a28:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8008a2a:	4293      	cmp	r3, r2
 8008a2c:	f47f af26 	bne.w	800887c <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x58>
 8008a30:	b00d      	add	sp, #52	; 0x34
 8008a32:	ecbd 8b0c 	vpop	{d8-d13}
 8008a36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a3a:	2700      	movs	r7, #0
 8008a3c:	e7c6      	b.n	80089cc <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1a8>
 8008a3e:	9a00      	ldr	r2, [sp, #0]
 8008a40:	9b04      	ldr	r3, [sp, #16]
 8008a42:	4610      	mov	r0, r2
 8008a44:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8008a46:	189d      	adds	r5, r3, r2
 8008a48:	e71f      	b.n	800888a <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x66>
 8008a4a:	eeb0 7a40 	vmov.f32	s14, s0
 8008a4e:	e7d7      	b.n	8008a00 <ai_conv2d_kernel_simple_opt_f32.constprop.0+0x1dc>

08008a50 <forward_lite_conv2d_if32of32wf32>:
 8008a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a54:	ed2d 8b02 	vpush	{d8}
 8008a58:	b09f      	sub	sp, #124	; 0x7c
 8008a5a:	4686      	mov	lr, r0
 8008a5c:	4694      	mov	ip, r2
 8008a5e:	af08      	add	r7, sp, #32
 8008a60:	f8b7 40b0 	ldrh.w	r4, [r7, #176]	; 0xb0
 8008a64:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008a66:	f8b7 10ac 	ldrh.w	r1, [r7, #172]	; 0xac
 8008a6a:	f8b7 50b4 	ldrh.w	r5, [r7, #180]	; 0xb4
 8008a6e:	424e      	negs	r6, r1
 8008a70:	64fc      	str	r4, [r7, #76]	; 0x4c
 8008a72:	f8d7 409c 	ldr.w	r4, [r7, #156]	; 0x9c
 8008a76:	6078      	str	r0, [r7, #4]
 8008a78:	613a      	str	r2, [r7, #16]
 8008a7a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008a7c:	f8d7 20a4 	ldr.w	r2, [r7, #164]	; 0xa4
 8008a80:	f8b7 00a8 	ldrh.w	r0, [r7, #168]	; 0xa8
 8008a84:	617d      	str	r5, [r7, #20]
 8008a86:	633e      	str	r6, [r7, #48]	; 0x30
 8008a88:	e9d7 3a22 	ldrd	r3, sl, [r7, #136]	; 0x88
 8008a8c:	2c00      	cmp	r4, #0
 8008a8e:	f000 8092 	beq.w	8008bb6 <forward_lite_conv2d_if32of32wf32+0x166>
 8008a92:	f8d7 40a0 	ldr.w	r4, [r7, #160]	; 0xa0
 8008a96:	6379      	str	r1, [r7, #52]	; 0x34
 8008a98:	fb04 f202 	mul.w	r2, r4, r2
 8008a9c:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008aa0:	4244      	negs	r4, r0
 8008aa2:	ed9f 8a9a 	vldr	s16, [pc, #616]	; 8008d0c <forward_lite_conv2d_if32of32wf32+0x2bc>
 8008aa6:	653c      	str	r4, [r7, #80]	; 0x50
 8008aa8:	fb03 f402 	mul.w	r4, r3, r2
 8008aac:	fb03 f201 	mul.w	r2, r3, r1
 8008ab0:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8008ab4:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8008ab8:	63bc      	str	r4, [r7, #56]	; 0x38
 8008aba:	fb01 f10a 	mul.w	r1, r1, sl
 8008abe:	0089      	lsls	r1, r1, #2
 8008ac0:	61b9      	str	r1, [r7, #24]
 8008ac2:	fb05 f102 	mul.w	r1, r5, r2
 8008ac6:	4655      	mov	r5, sl
 8008ac8:	fb06 f202 	mul.w	r2, r6, r2
 8008acc:	46da      	mov	sl, fp
 8008ace:	0089      	lsls	r1, r1, #2
 8008ad0:	61f9      	str	r1, [r7, #28]
 8008ad2:	eb0e 0182 	add.w	r1, lr, r2, lsl #2
 8008ad6:	f10b 0207 	add.w	r2, fp, #7
 8008ada:	62b9      	str	r1, [r7, #40]	; 0x28
 8008adc:	f022 0107 	bic.w	r1, r2, #7
 8008ae0:	eb0c 0284 	add.w	r2, ip, r4, lsl #2
 8008ae4:	60f9      	str	r1, [r7, #12]
 8008ae6:	f10c 4178 	add.w	r1, ip, #4160749568	; 0xf8000000
 8008aea:	60ba      	str	r2, [r7, #8]
 8008aec:	2200      	movs	r2, #0
 8008aee:	6239      	str	r1, [r7, #32]
 8008af0:	627a      	str	r2, [r7, #36]	; 0x24
 8008af2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008af4:	2a00      	cmp	r2, #0
 8008af6:	f2c0 80d5 	blt.w	8008ca4 <forward_lite_conv2d_if32of32wf32+0x254>
 8008afa:	2200      	movs	r2, #0
 8008afc:	f8d7 b028 	ldr.w	fp, [r7, #40]	; 0x28
 8008b00:	657a      	str	r2, [r7, #84]	; 0x54
 8008b02:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008b04:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b08:	f8d7 00b8 	ldr.w	r0, [r7, #184]	; 0xb8
 8008b0c:	440a      	add	r2, r1
 8008b0e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008b10:	4282      	cmp	r2, r0
 8008b12:	bf94      	ite	ls
 8008b14:	ebc1 0102 	rsbls	r1, r1, r2
 8008b18:	ebc1 0100 	rsbhi	r1, r1, r0
 8008b1c:	6a3a      	ldr	r2, [r7, #32]
 8008b1e:	f1b2 7f80 	cmp.w	r2, #16777216	; 0x1000000
 8008b22:	6439      	str	r1, [r7, #64]	; 0x40
 8008b24:	d24d      	bcs.n	8008bc2 <forward_lite_conv2d_if32of32wf32+0x172>
 8008b26:	b385      	cbz	r5, 8008b8a <forward_lite_conv2d_if32of32wf32+0x13a>
 8008b28:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008b2a:	2a00      	cmp	r2, #0
 8008b2c:	f000 80bf 	beq.w	8008cae <forward_lite_conv2d_if32of32wf32+0x25e>
 8008b30:	4659      	mov	r1, fp
 8008b32:	4691      	mov	r9, r2
 8008b34:	46d3      	mov	fp, sl
 8008b36:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 8008b3a:	693e      	ldr	r6, [r7, #16]
 8008b3c:	2400      	movs	r4, #0
 8008b3e:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 8008b42:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008b44:	3401      	adds	r4, #1
 8008b46:	ecb9 0a01 	vldmia	r9!, {s0}
 8008b4a:	4640      	mov	r0, r8
 8008b4c:	9207      	str	r2, [sp, #28]
 8008b4e:	f108 0804 	add.w	r8, r8, #4
 8008b52:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008b54:	e9cd a205 	strd	sl, r2, [sp, #20]
 8008b58:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8008b5a:	9204      	str	r2, [sp, #16]
 8008b5c:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008b60:	9203      	str	r2, [sp, #12]
 8008b62:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008b66:	9202      	str	r2, [sp, #8]
 8008b68:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008b6c:	e9cd 5200 	strd	r5, r2, [sp]
 8008b70:	4632      	mov	r2, r6
 8008b72:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008b76:	64b9      	str	r1, [r7, #72]	; 0x48
 8008b78:	445e      	add	r6, fp
 8008b7a:	f7ff fe53 	bl	8008824 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8008b7e:	42a5      	cmp	r5, r4
 8008b80:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8008b82:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b86:	d1dc      	bne.n	8008b42 <forward_lite_conv2d_if32of32wf32+0xf2>
 8008b88:	46da      	mov	sl, fp
 8008b8a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008b8c:	69b8      	ldr	r0, [r7, #24]
 8008b8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b90:	4401      	add	r1, r0
 8008b92:	6978      	ldr	r0, [r7, #20]
 8008b94:	3201      	adds	r2, #1
 8008b96:	62f9      	str	r1, [r7, #44]	; 0x2c
 8008b98:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b9a:	627a      	str	r2, [r7, #36]	; 0x24
 8008b9c:	4401      	add	r1, r0
 8008b9e:	6339      	str	r1, [r7, #48]	; 0x30
 8008ba0:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8008ba2:	1a09      	subs	r1, r1, r0
 8008ba4:	69f8      	ldr	r0, [r7, #28]
 8008ba6:	6379      	str	r1, [r7, #52]	; 0x34
 8008ba8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008baa:	4401      	add	r1, r0
 8008bac:	62b9      	str	r1, [r7, #40]	; 0x28
 8008bae:	f8d7 109c 	ldr.w	r1, [r7, #156]	; 0x9c
 8008bb2:	4291      	cmp	r1, r2
 8008bb4:	d19d      	bne.n	8008af2 <forward_lite_conv2d_if32of32wf32+0xa2>
 8008bb6:	375c      	adds	r7, #92	; 0x5c
 8008bb8:	46bd      	mov	sp, r7
 8008bba:	ecbd 8b02 	vpop	{d8}
 8008bbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008bc2:	466a      	mov	r2, sp
 8008bc4:	ee08 2a90 	vmov	s17, r2
 8008bc8:	68fa      	ldr	r2, [r7, #12]
 8008bca:	ebad 0d02 	sub.w	sp, sp, r2
 8008bce:	aa08      	add	r2, sp, #32
 8008bd0:	2d00      	cmp	r5, #0
 8008bd2:	d03d      	beq.n	8008c50 <forward_lite_conv2d_if32of32wf32+0x200>
 8008bd4:	6938      	ldr	r0, [r7, #16]
 8008bd6:	4659      	mov	r1, fp
 8008bd8:	68bc      	ldr	r4, [r7, #8]
 8008bda:	46ab      	mov	fp, r5
 8008bdc:	f8d7 902c 	ldr.w	r9, [r7, #44]	; 0x2c
 8008be0:	f04f 0800 	mov.w	r8, #0
 8008be4:	6bfe      	ldr	r6, [r7, #60]	; 0x3c
 8008be6:	4605      	mov	r5, r0
 8008be8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8008bea:	b138      	cbz	r0, 8008bfc <forward_lite_conv2d_if32of32wf32+0x1ac>
 8008bec:	4628      	mov	r0, r5
 8008bee:	4694      	mov	ip, r2
 8008bf0:	f850 eb04 	ldr.w	lr, [r0], #4
 8008bf4:	42a0      	cmp	r0, r4
 8008bf6:	f84c eb04 	str.w	lr, [ip], #4
 8008bfa:	d1f9      	bne.n	8008bf0 <forward_lite_conv2d_if32of32wf32+0x1a0>
 8008bfc:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8008bfe:	f108 0801 	add.w	r8, r8, #1
 8008c02:	b348      	cbz	r0, 8008c58 <forward_lite_conv2d_if32of32wf32+0x208>
 8008c04:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008c06:	4455      	add	r5, sl
 8008c08:	ecb6 0a01 	vldmia	r6!, {s0}
 8008c0c:	4454      	add	r4, sl
 8008c0e:	9007      	str	r0, [sp, #28]
 8008c10:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008c12:	9006      	str	r0, [sp, #24]
 8008c14:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008c16:	9005      	str	r0, [sp, #20]
 8008c18:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008c1a:	9004      	str	r0, [sp, #16]
 8008c1c:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008c20:	9003      	str	r0, [sp, #12]
 8008c22:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8008c26:	9002      	str	r0, [sp, #8]
 8008c28:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008c2c:	e9cd b000 	strd	fp, r0, [sp]
 8008c30:	4648      	mov	r0, r9
 8008c32:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c36:	f109 0904 	add.w	r9, r9, #4
 8008c3a:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 8008c3e:	f7ff fdf1 	bl	8008824 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8008c42:	45d8      	cmp	r8, fp
 8008c44:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c48:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 8008c4c:	d1cc      	bne.n	8008be8 <forward_lite_conv2d_if32of32wf32+0x198>
 8008c4e:	465d      	mov	r5, fp
 8008c50:	ee18 2a90 	vmov	r2, s17
 8008c54:	4695      	mov	sp, r2
 8008c56:	e798      	b.n	8008b8a <forward_lite_conv2d_if32of32wf32+0x13a>
 8008c58:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8008c5a:	eeb0 0a48 	vmov.f32	s0, s16
 8008c5e:	4455      	add	r5, sl
 8008c60:	4454      	add	r4, sl
 8008c62:	9007      	str	r0, [sp, #28]
 8008c64:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8008c66:	9006      	str	r0, [sp, #24]
 8008c68:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8008c6a:	9005      	str	r0, [sp, #20]
 8008c6c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8008c6e:	9004      	str	r0, [sp, #16]
 8008c70:	f8d7 00a0 	ldr.w	r0, [r7, #160]	; 0xa0
 8008c74:	9003      	str	r0, [sp, #12]
 8008c76:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8008c7a:	9002      	str	r0, [sp, #8]
 8008c7c:	f8d7 0090 	ldr.w	r0, [r7, #144]	; 0x90
 8008c80:	e9cd b000 	strd	fp, r0, [sp]
 8008c84:	4648      	mov	r0, r9
 8008c86:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008c8a:	f109 0904 	add.w	r9, r9, #4
 8008c8e:	e9c7 2111 	strd	r2, r1, [r7, #68]	; 0x44
 8008c92:	f7ff fdc7 	bl	8008824 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8008c96:	45c3      	cmp	fp, r8
 8008c98:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008c9c:	e9d7 2111 	ldrd	r2, r1, [r7, #68]	; 0x44
 8008ca0:	d1a2      	bne.n	8008be8 <forward_lite_conv2d_if32of32wf32+0x198>
 8008ca2:	e7d4      	b.n	8008c4e <forward_lite_conv2d_if32of32wf32+0x1fe>
 8008ca4:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ca6:	f8d7 b004 	ldr.w	fp, [r7, #4]
 8008caa:	657a      	str	r2, [r7, #84]	; 0x54
 8008cac:	e729      	b.n	8008b02 <forward_lite_conv2d_if32of32wf32+0xb2>
 8008cae:	4659      	mov	r1, fp
 8008cb0:	f8d7 802c 	ldr.w	r8, [r7, #44]	; 0x2c
 8008cb4:	46d3      	mov	fp, sl
 8008cb6:	693e      	ldr	r6, [r7, #16]
 8008cb8:	4614      	mov	r4, r2
 8008cba:	f8d7 9054 	ldr.w	r9, [r7, #84]	; 0x54
 8008cbe:	f8d7 a040 	ldr.w	sl, [r7, #64]	; 0x40
 8008cc2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008cc4:	3401      	adds	r4, #1
 8008cc6:	4640      	mov	r0, r8
 8008cc8:	eeb0 0a48 	vmov.f32	s0, s16
 8008ccc:	9207      	str	r2, [sp, #28]
 8008cce:	f108 0804 	add.w	r8, r8, #4
 8008cd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8008cd4:	f8cd 9010 	str.w	r9, [sp, #16]
 8008cd8:	e9cd a205 	strd	sl, r2, [sp, #20]
 8008cdc:	f8d7 20a0 	ldr.w	r2, [r7, #160]	; 0xa0
 8008ce0:	9203      	str	r2, [sp, #12]
 8008ce2:	f8d7 2098 	ldr.w	r2, [r7, #152]	; 0x98
 8008ce6:	9202      	str	r2, [sp, #8]
 8008ce8:	f8d7 2090 	ldr.w	r2, [r7, #144]	; 0x90
 8008cec:	e9cd 5200 	strd	r5, r2, [sp]
 8008cf0:	4632      	mov	r2, r6
 8008cf2:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008cf6:	6579      	str	r1, [r7, #84]	; 0x54
 8008cf8:	445e      	add	r6, fp
 8008cfa:	f7ff fd93 	bl	8008824 <ai_conv2d_kernel_simple_opt_f32.constprop.0>
 8008cfe:	42a5      	cmp	r5, r4
 8008d00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008d02:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008d06:	d1dc      	bne.n	8008cc2 <forward_lite_conv2d_if32of32wf32+0x272>
 8008d08:	e73e      	b.n	8008b88 <forward_lite_conv2d_if32of32wf32+0x138>
 8008d0a:	bf00      	nop
 8008d0c:	00000000 	.word	0x00000000

08008d10 <forward_lite_dense_if32of32wf32>:
 8008d10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d14:	ed2d 8b0c 	vpush	{d8-d13}
 8008d18:	e9dd 6415 	ldrd	r6, r4, [sp, #84]	; 0x54
 8008d1c:	eb00 0784 	add.w	r7, r0, r4, lsl #2
 8008d20:	4287      	cmp	r7, r0
 8008d22:	f240 8105 	bls.w	8008f30 <forward_lite_dense_if32of32wf32+0x220>
 8008d26:	f1a6 0810 	sub.w	r8, r6, #16
 8008d2a:	ea4f 0986 	mov.w	r9, r6, lsl #2
 8008d2e:	4605      	mov	r5, r0
 8008d30:	f006 0b0f 	and.w	fp, r6, #15
 8008d34:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8008d38:	f108 0801 	add.w	r8, r8, #1
 8008d3c:	ea4f 1a88 	mov.w	sl, r8, lsl #6
 8008d40:	eb01 1888 	add.w	r8, r1, r8, lsl #6
 8008d44:	2e0f      	cmp	r6, #15
 8008d46:	ed9f 7a85 	vldr	s14, [pc, #532]	; 8008f5c <forward_lite_dense_if32of32wf32+0x24c>
 8008d4a:	f240 8102 	bls.w	8008f52 <forward_lite_dense_if32of32wf32+0x242>
 8008d4e:	f101 0c40 	add.w	ip, r1, #64	; 0x40
 8008d52:	f102 0440 	add.w	r4, r2, #64	; 0x40
 8008d56:	46b6      	mov	lr, r6
 8008d58:	ed54 6a0f 	vldr	s13, [r4, #-60]	; 0xffffffc4
 8008d5c:	f1ae 0e10 	sub.w	lr, lr, #16
 8008d60:	ed5c 7a0f 	vldr	s15, [ip, #-60]	; 0xffffffc4
 8008d64:	3440      	adds	r4, #64	; 0x40
 8008d66:	ed5c 4a10 	vldr	s9, [ip, #-64]	; 0xffffffc0
 8008d6a:	f1be 0f0f 	cmp.w	lr, #15
 8008d6e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008d72:	ed14 5a20 	vldr	s10, [r4, #-128]	; 0xffffff80
 8008d76:	ed5c 5a0e 	vldr	s11, [ip, #-56]	; 0xffffffc8
 8008d7a:	f10c 0c40 	add.w	ip, ip, #64	; 0x40
 8008d7e:	ed14 6a1e 	vldr	s12, [r4, #-120]	; 0xffffff88
 8008d82:	eee4 7a85 	vfma.f32	s15, s9, s10
 8008d86:	ed54 6a1d 	vldr	s13, [r4, #-116]	; 0xffffff8c
 8008d8a:	ed1c da1d 	vldr	s26, [ip, #-116]	; 0xffffff8c
 8008d8e:	ed5c ca1c 	vldr	s25, [ip, #-112]	; 0xffffff90
 8008d92:	ed14 ca1c 	vldr	s24, [r4, #-112]	; 0xffffff90
 8008d96:	ed5c ba1b 	vldr	s23, [ip, #-108]	; 0xffffff94
 8008d9a:	ed14 ba1b 	vldr	s22, [r4, #-108]	; 0xffffff94
 8008d9e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008da2:	ed5c aa1a 	vldr	s21, [ip, #-104]	; 0xffffff98
 8008da6:	ed14 aa1a 	vldr	s20, [r4, #-104]	; 0xffffff98
 8008daa:	ed5c 9a19 	vldr	s19, [ip, #-100]	; 0xffffff9c
 8008dae:	ed14 9a19 	vldr	s18, [r4, #-100]	; 0xffffff9c
 8008db2:	ed5c 8a18 	vldr	s17, [ip, #-96]	; 0xffffffa0
 8008db6:	ed14 8a18 	vldr	s16, [r4, #-96]	; 0xffffffa0
 8008dba:	eeed 7a26 	vfma.f32	s15, s26, s13
 8008dbe:	ed1c 0a17 	vldr	s0, [ip, #-92]	; 0xffffffa4
 8008dc2:	ed54 0a17 	vldr	s1, [r4, #-92]	; 0xffffffa4
 8008dc6:	ed1c 1a16 	vldr	s2, [ip, #-88]	; 0xffffffa8
 8008dca:	ed54 1a16 	vldr	s3, [r4, #-88]	; 0xffffffa8
 8008dce:	ed1c 2a15 	vldr	s4, [ip, #-84]	; 0xffffffac
 8008dd2:	ed54 2a15 	vldr	s5, [r4, #-84]	; 0xffffffac
 8008dd6:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8008dda:	ed1c 3a14 	vldr	s6, [ip, #-80]	; 0xffffffb0
 8008dde:	ed54 3a14 	vldr	s7, [r4, #-80]	; 0xffffffb0
 8008de2:	ed1c 4a13 	vldr	s8, [ip, #-76]	; 0xffffffb4
 8008de6:	ed54 4a13 	vldr	s9, [r4, #-76]	; 0xffffffb4
 8008dea:	ed1c 5a12 	vldr	s10, [ip, #-72]	; 0xffffffb8
 8008dee:	ed54 5a12 	vldr	s11, [r4, #-72]	; 0xffffffb8
 8008df2:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8008df6:	ed1c 6a11 	vldr	s12, [ip, #-68]	; 0xffffffbc
 8008dfa:	ed54 6a11 	vldr	s13, [r4, #-68]	; 0xffffffbc
 8008dfe:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008e02:	eee9 7a89 	vfma.f32	s15, s19, s18
 8008e06:	eee8 7a88 	vfma.f32	s15, s17, s16
 8008e0a:	eee0 7a20 	vfma.f32	s15, s0, s1
 8008e0e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008e12:	eee2 7a22 	vfma.f32	s15, s4, s5
 8008e16:	eee3 7a23 	vfma.f32	s15, s6, s7
 8008e1a:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008e1e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008e22:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008e26:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008e2a:	d895      	bhi.n	8008d58 <forward_lite_dense_if32of32wf32+0x48>
 8008e2c:	eb02 0e0a 	add.w	lr, r2, sl
 8008e30:	465c      	mov	r4, fp
 8008e32:	46c4      	mov	ip, r8
 8008e34:	2c00      	cmp	r4, #0
 8008e36:	d075      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008e38:	eddc 6a00 	vldr	s13, [ip]
 8008e3c:	2c01      	cmp	r4, #1
 8008e3e:	edde 7a00 	vldr	s15, [lr]
 8008e42:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e46:	d06d      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008e48:	eddc 6a01 	vldr	s13, [ip, #4]
 8008e4c:	2c02      	cmp	r4, #2
 8008e4e:	edde 7a01 	vldr	s15, [lr, #4]
 8008e52:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e56:	d065      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008e58:	eddc 6a02 	vldr	s13, [ip, #8]
 8008e5c:	2c03      	cmp	r4, #3
 8008e5e:	edde 7a02 	vldr	s15, [lr, #8]
 8008e62:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e66:	d05d      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008e68:	eddc 6a03 	vldr	s13, [ip, #12]
 8008e6c:	2c04      	cmp	r4, #4
 8008e6e:	edde 7a03 	vldr	s15, [lr, #12]
 8008e72:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e76:	d055      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008e78:	eddc 6a04 	vldr	s13, [ip, #16]
 8008e7c:	2c05      	cmp	r4, #5
 8008e7e:	edde 7a04 	vldr	s15, [lr, #16]
 8008e82:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e86:	d04d      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008e88:	eddc 6a05 	vldr	s13, [ip, #20]
 8008e8c:	2c06      	cmp	r4, #6
 8008e8e:	edde 7a05 	vldr	s15, [lr, #20]
 8008e92:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e96:	d045      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008e98:	eddc 6a06 	vldr	s13, [ip, #24]
 8008e9c:	2c07      	cmp	r4, #7
 8008e9e:	edde 7a06 	vldr	s15, [lr, #24]
 8008ea2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ea6:	d03d      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008ea8:	eddc 6a07 	vldr	s13, [ip, #28]
 8008eac:	2c08      	cmp	r4, #8
 8008eae:	edde 7a07 	vldr	s15, [lr, #28]
 8008eb2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008eb6:	d035      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008eb8:	eddc 6a08 	vldr	s13, [ip, #32]
 8008ebc:	2c09      	cmp	r4, #9
 8008ebe:	edde 7a08 	vldr	s15, [lr, #32]
 8008ec2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ec6:	d02d      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008ec8:	eddc 6a09 	vldr	s13, [ip, #36]	; 0x24
 8008ecc:	2c0a      	cmp	r4, #10
 8008ece:	edde 7a09 	vldr	s15, [lr, #36]	; 0x24
 8008ed2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ed6:	d025      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008ed8:	eddc 6a0a 	vldr	s13, [ip, #40]	; 0x28
 8008edc:	2c0b      	cmp	r4, #11
 8008ede:	edde 7a0a 	vldr	s15, [lr, #40]	; 0x28
 8008ee2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ee6:	d01d      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008ee8:	eddc 6a0b 	vldr	s13, [ip, #44]	; 0x2c
 8008eec:	2c0c      	cmp	r4, #12
 8008eee:	edde 7a0b 	vldr	s15, [lr, #44]	; 0x2c
 8008ef2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ef6:	d015      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008ef8:	eddc 6a0c 	vldr	s13, [ip, #48]	; 0x30
 8008efc:	3c0d      	subs	r4, #13
 8008efe:	edde 7a0c 	vldr	s15, [lr, #48]	; 0x30
 8008f02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008f06:	d00d      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008f08:	eddc 6a0d 	vldr	s13, [ip, #52]	; 0x34
 8008f0c:	2c01      	cmp	r4, #1
 8008f0e:	edde 7a0d 	vldr	s15, [lr, #52]	; 0x34
 8008f12:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008f16:	d005      	beq.n	8008f24 <forward_lite_dense_if32of32wf32+0x214>
 8008f18:	edde 6a0e 	vldr	s13, [lr, #56]	; 0x38
 8008f1c:	eddc 7a0e 	vldr	s15, [ip, #56]	; 0x38
 8008f20:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008f24:	eca5 7a01 	vstmia	r5!, {s14}
 8008f28:	42af      	cmp	r7, r5
 8008f2a:	444a      	add	r2, r9
 8008f2c:	f63f af0a 	bhi.w	8008d44 <forward_lite_dense_if32of32wf32+0x34>
 8008f30:	b15b      	cbz	r3, 8008f4a <forward_lite_dense_if32of32wf32+0x23a>
 8008f32:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8008f34:	b14a      	cbz	r2, 8008f4a <forward_lite_dense_if32of32wf32+0x23a>
 8008f36:	edd0 7a00 	vldr	s15, [r0]
 8008f3a:	ecb3 7a01 	vldmia	r3!, {s14}
 8008f3e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008f42:	ece0 7a01 	vstmia	r0!, {s15}
 8008f46:	4287      	cmp	r7, r0
 8008f48:	d1f5      	bne.n	8008f36 <forward_lite_dense_if32of32wf32+0x226>
 8008f4a:	ecbd 8b0c 	vpop	{d8-d13}
 8008f4e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008f52:	4634      	mov	r4, r6
 8008f54:	4696      	mov	lr, r2
 8008f56:	468c      	mov	ip, r1
 8008f58:	e76c      	b.n	8008e34 <forward_lite_dense_if32of32wf32+0x124>
 8008f5a:	bf00      	nop
 8008f5c:	00000000 	.word	0x00000000

08008f60 <st_int8_copy>:
 8008f60:	4288      	cmp	r0, r1
 8008f62:	d010      	beq.n	8008f86 <st_int8_copy+0x26>
 8008f64:	b17a      	cbz	r2, 8008f86 <st_int8_copy+0x26>
 8008f66:	4288      	cmp	r0, r1
 8008f68:	eb00 0302 	add.w	r3, r0, r2
 8008f6c:	d20c      	bcs.n	8008f88 <st_int8_copy+0x28>
 8008f6e:	428b      	cmp	r3, r1
 8008f70:	d90a      	bls.n	8008f88 <st_int8_copy+0x28>
 8008f72:	4283      	cmp	r3, r0
 8008f74:	440a      	add	r2, r1
 8008f76:	d906      	bls.n	8008f86 <st_int8_copy+0x26>
 8008f78:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8008f7c:	4283      	cmp	r3, r0
 8008f7e:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8008f82:	d1f9      	bne.n	8008f78 <st_int8_copy+0x18>
 8008f84:	4770      	bx	lr
 8008f86:	4770      	bx	lr
 8008f88:	078b      	lsls	r3, r1, #30
 8008f8a:	d102      	bne.n	8008f92 <st_int8_copy+0x32>
 8008f8c:	e008      	b.n	8008fa0 <st_int8_copy+0x40>
 8008f8e:	2a00      	cmp	r2, #0
 8008f90:	d04d      	beq.n	800902e <st_int8_copy+0xce>
 8008f92:	f910 3b01 	ldrsb.w	r3, [r0], #1
 8008f96:	3a01      	subs	r2, #1
 8008f98:	f801 3b01 	strb.w	r3, [r1], #1
 8008f9c:	078b      	lsls	r3, r1, #30
 8008f9e:	d1f6      	bne.n	8008f8e <st_int8_copy+0x2e>
 8008fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008fa4:	ea5f 1e12 	movs.w	lr, r2, lsr #4
 8008fa8:	d05e      	beq.n	8009068 <st_int8_copy+0x108>
 8008faa:	ea40 0301 	orr.w	r3, r0, r1
 8008fae:	075b      	lsls	r3, r3, #29
 8008fb0:	d13e      	bne.n	8009030 <st_int8_copy+0xd0>
 8008fb2:	f10e 33ff 	add.w	r3, lr, #4294967295	; 0xffffffff
 8008fb6:	2b01      	cmp	r3, #1
 8008fb8:	d93a      	bls.n	8009030 <st_int8_copy+0xd0>
 8008fba:	f100 0310 	add.w	r3, r0, #16
 8008fbe:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8008fc2:	f101 0c10 	add.w	ip, r1, #16
 8008fc6:	eb03 1e0e 	add.w	lr, r3, lr, lsl #4
 8008fca:	3310      	adds	r3, #16
 8008fcc:	f10c 0c10 	add.w	ip, ip, #16
 8008fd0:	ed13 6b08 	vldr	d6, [r3, #-32]	; 0xffffffe0
 8008fd4:	ed13 7b06 	vldr	d7, [r3, #-24]	; 0xffffffe8
 8008fd8:	4573      	cmp	r3, lr
 8008fda:	ed0c 6b08 	vstr	d6, [ip, #-32]	; 0xffffffe0
 8008fde:	ed0c 7b06 	vstr	d7, [ip, #-24]	; 0xffffffe8
 8008fe2:	d1f2      	bne.n	8008fca <st_int8_copy+0x6a>
 8008fe4:	f3c2 0381 	ubfx	r3, r2, #2, #2
 8008fe8:	4421      	add	r1, r4
 8008fea:	4420      	add	r0, r4
 8008fec:	f002 0203 	and.w	r2, r2, #3
 8008ff0:	b16b      	cbz	r3, 800900e <st_int8_copy+0xae>
 8008ff2:	6804      	ldr	r4, [r0, #0]
 8008ff4:	600c      	str	r4, [r1, #0]
 8008ff6:	1e5c      	subs	r4, r3, #1
 8008ff8:	d005      	beq.n	8009006 <st_int8_copy+0xa6>
 8008ffa:	6845      	ldr	r5, [r0, #4]
 8008ffc:	2c01      	cmp	r4, #1
 8008ffe:	604d      	str	r5, [r1, #4]
 8009000:	d001      	beq.n	8009006 <st_int8_copy+0xa6>
 8009002:	6884      	ldr	r4, [r0, #8]
 8009004:	608c      	str	r4, [r1, #8]
 8009006:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800900a:	eb01 0183 	add.w	r1, r1, r3, lsl #2
 800900e:	b162      	cbz	r2, 800902a <st_int8_copy+0xca>
 8009010:	f990 3000 	ldrsb.w	r3, [r0]
 8009014:	3a01      	subs	r2, #1
 8009016:	700b      	strb	r3, [r1, #0]
 8009018:	d007      	beq.n	800902a <st_int8_copy+0xca>
 800901a:	f990 3001 	ldrsb.w	r3, [r0, #1]
 800901e:	2a01      	cmp	r2, #1
 8009020:	704b      	strb	r3, [r1, #1]
 8009022:	d002      	beq.n	800902a <st_int8_copy+0xca>
 8009024:	f990 3002 	ldrsb.w	r3, [r0, #2]
 8009028:	708b      	strb	r3, [r1, #2]
 800902a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800902e:	4770      	bx	lr
 8009030:	ea4f 140e 	mov.w	r4, lr, lsl #4
 8009034:	460b      	mov	r3, r1
 8009036:	eb01 1e0e 	add.w	lr, r1, lr, lsl #4
 800903a:	4684      	mov	ip, r0
 800903c:	f8dc 8000 	ldr.w	r8, [ip]
 8009040:	3310      	adds	r3, #16
 8009042:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8009046:	f10c 0c10 	add.w	ip, ip, #16
 800904a:	f85c 6c08 	ldr.w	r6, [ip, #-8]
 800904e:	f85c 5c04 	ldr.w	r5, [ip, #-4]
 8009052:	f843 8c10 	str.w	r8, [r3, #-16]
 8009056:	f843 7c0c 	str.w	r7, [r3, #-12]
 800905a:	f843 6c08 	str.w	r6, [r3, #-8]
 800905e:	f843 5c04 	str.w	r5, [r3, #-4]
 8009062:	459e      	cmp	lr, r3
 8009064:	d1ea      	bne.n	800903c <st_int8_copy+0xdc>
 8009066:	e7bd      	b.n	8008fe4 <st_int8_copy+0x84>
 8009068:	0893      	lsrs	r3, r2, #2
 800906a:	f002 0203 	and.w	r2, r2, #3
 800906e:	e7bf      	b.n	8008ff0 <st_int8_copy+0x90>

08009070 <ai_sum_f32>:
 8009070:	edd1 7a00 	vldr	s15, [r1]
 8009074:	ed92 7a00 	vldr	s14, [r2]
 8009078:	ee77 7a87 	vadd.f32	s15, s15, s14
 800907c:	edc0 7a00 	vstr	s15, [r0]
 8009080:	4770      	bx	lr
 8009082:	bf00      	nop

08009084 <ai_sum_buffer_f32>:
 8009084:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8009088:	4298      	cmp	r0, r3
 800908a:	d209      	bcs.n	80090a0 <ai_sum_buffer_f32+0x1c>
 800908c:	ecf1 7a01 	vldmia	r1!, {s15}
 8009090:	ecb2 7a01 	vldmia	r2!, {s14}
 8009094:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009098:	ece0 7a01 	vstmia	r0!, {s15}
 800909c:	4283      	cmp	r3, r0
 800909e:	d8f5      	bhi.n	800908c <ai_sum_buffer_f32+0x8>
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop

080090a4 <ai_version_get>:
 80090a4:	0212      	lsls	r2, r2, #8
 80090a6:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80090aa:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80090ae:	4770      	bx	lr

080090b0 <get_tensor_byte_size>:
 80090b0:	b430      	push	{r4, r5}
 80090b2:	6985      	ldr	r5, [r0, #24]
 80090b4:	68c4      	ldr	r4, [r0, #12]
 80090b6:	6941      	ldr	r1, [r0, #20]
 80090b8:	4b06      	ldr	r3, [pc, #24]	; (80090d4 <get_tensor_byte_size+0x24>)
 80090ba:	6828      	ldr	r0, [r5, #0]
 80090bc:	4a06      	ldr	r2, [pc, #24]	; (80090d8 <get_tensor_byte_size+0x28>)
 80090be:	4003      	ands	r3, r0
 80090c0:	68c9      	ldr	r1, [r1, #12]
 80090c2:	68e0      	ldr	r0, [r4, #12]
 80090c4:	4293      	cmp	r3, r2
 80090c6:	fb01 f000 	mul.w	r0, r1, r0
 80090ca:	d101      	bne.n	80090d0 <get_tensor_byte_size+0x20>
 80090cc:	3007      	adds	r0, #7
 80090ce:	08c0      	lsrs	r0, r0, #3
 80090d0:	bc30      	pop	{r4, r5}
 80090d2:	4770      	bx	lr
 80090d4:	017fffff 	.word	0x017fffff
 80090d8:	000400c0 	.word	0x000400c0

080090dc <core_get_broadcasted_shape>:
 80090dc:	b470      	push	{r4, r5, r6}
 80090de:	6804      	ldr	r4, [r0, #0]
 80090e0:	f3c4 2417 	ubfx	r4, r4, #8, #24
 80090e4:	b304      	cbz	r4, 8009128 <core_get_broadcasted_shape+0x4c>
 80090e6:	4623      	mov	r3, r4
 80090e8:	3b01      	subs	r3, #1
 80090ea:	429c      	cmp	r4, r3
 80090ec:	d917      	bls.n	800911e <core_get_broadcasted_shape+0x42>
 80090ee:	6815      	ldr	r5, [r2, #0]
 80090f0:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80090f4:	2401      	movs	r4, #1
 80090f6:	ebb3 2f15 	cmp.w	r3, r5, lsr #8
 80090fa:	d202      	bcs.n	8009102 <core_get_broadcasted_shape+0x26>
 80090fc:	6854      	ldr	r4, [r2, #4]
 80090fe:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
 8009102:	680e      	ldr	r6, [r1, #0]
 8009104:	2501      	movs	r5, #1
 8009106:	ebb3 2f16 	cmp.w	r3, r6, lsr #8
 800910a:	d202      	bcs.n	8009112 <core_get_broadcasted_shape+0x36>
 800910c:	684d      	ldr	r5, [r1, #4]
 800910e:	f855 500c 	ldr.w	r5, [r5, ip]
 8009112:	42ac      	cmp	r4, r5
 8009114:	bf38      	it	cc
 8009116:	462c      	movcc	r4, r5
 8009118:	6845      	ldr	r5, [r0, #4]
 800911a:	f845 400c 	str.w	r4, [r5, ip]
 800911e:	b11b      	cbz	r3, 8009128 <core_get_broadcasted_shape+0x4c>
 8009120:	6804      	ldr	r4, [r0, #0]
 8009122:	f3c4 2417 	ubfx	r4, r4, #8, #24
 8009126:	e7df      	b.n	80090e8 <core_get_broadcasted_shape+0xc>
 8009128:	bc70      	pop	{r4, r5, r6}
 800912a:	4770      	bx	lr

0800912c <core_compute_offsets>:
 800912c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009130:	e9d1 5c00 	ldrd	r5, ip, [r1]
 8009134:	6857      	ldr	r7, [r2, #4]
 8009136:	b085      	sub	sp, #20
 8009138:	f8dc 4004 	ldr.w	r4, [ip, #4]
 800913c:	687e      	ldr	r6, [r7, #4]
 800913e:	1ba1      	subs	r1, r4, r6
 8009140:	bf18      	it	ne
 8009142:	2101      	movne	r1, #1
 8009144:	f5b5 6fa0 	cmp.w	r5, #1280	; 0x500
 8009148:	9103      	str	r1, [sp, #12]
 800914a:	d378      	bcc.n	800923e <core_compute_offsets+0x112>
 800914c:	f8dc 9010 	ldr.w	r9, [ip, #16]
 8009150:	fb09 fe04 	mul.w	lr, r9, r4
 8009154:	6812      	ldr	r2, [r2, #0]
 8009156:	f8d0 b000 	ldr.w	fp, [r0]
 800915a:	f5b2 6fa0 	cmp.w	r2, #1280	; 0x500
 800915e:	e9dc 5202 	ldrd	r5, r2, [ip, #8]
 8009162:	bf2c      	ite	cs
 8009164:	f8d7 a010 	ldrcs.w	sl, [r7, #16]
 8009168:	f04f 0a01 	movcc.w	sl, #1
 800916c:	9201      	str	r2, [sp, #4]
 800916e:	ebb9 0c0a 	subs.w	ip, r9, sl
 8009172:	e9d7 8202 	ldrd	r8, r2, [r7, #8]
 8009176:	bf18      	it	ne
 8009178:	f04f 0c01 	movne.w	ip, #1
 800917c:	ebb5 0708 	subs.w	r7, r5, r8
 8009180:	9202      	str	r2, [sp, #8]
 8009182:	f3cb 2217 	ubfx	r2, fp, #8, #24
 8009186:	bf18      	it	ne
 8009188:	2701      	movne	r7, #1
 800918a:	f5bb 7f00 	cmp.w	fp, #512	; 0x200
 800918e:	d321      	bcc.n	80091d4 <core_compute_offsets+0xa8>
 8009190:	42b4      	cmp	r4, r6
 8009192:	bf0c      	ite	eq
 8009194:	461a      	moveq	r2, r3
 8009196:	2200      	movne	r2, #0
 8009198:	6841      	ldr	r1, [r0, #4]
 800919a:	604a      	str	r2, [r1, #4]
 800919c:	f8d0 b000 	ldr.w	fp, [r0]
 80091a0:	f5bb 6fa0 	cmp.w	fp, #1280	; 0x500
 80091a4:	f3cb 2217 	ubfx	r2, fp, #8, #24
 80091a8:	d314      	bcc.n	80091d4 <core_compute_offsets+0xa8>
 80091aa:	9a03      	ldr	r2, [sp, #12]
 80091ac:	45d1      	cmp	r9, sl
 80091ae:	bf14      	ite	ne
 80091b0:	2200      	movne	r2, #0
 80091b2:	f002 0201 	andeq.w	r2, r2, #1
 80091b6:	42b4      	cmp	r4, r6
 80091b8:	bf14      	ite	ne
 80091ba:	f04f 0900 	movne.w	r9, #0
 80091be:	f00c 0901 	andeq.w	r9, ip, #1
 80091c2:	6846      	ldr	r6, [r0, #4]
 80091c4:	fb04 2219 	mls	r2, r4, r9, r2
 80091c8:	fb03 f202 	mul.w	r2, r3, r2
 80091cc:	6132      	str	r2, [r6, #16]
 80091ce:	6802      	ldr	r2, [r0, #0]
 80091d0:	f3c2 2217 	ubfx	r2, r2, #8, #24
 80091d4:	2a02      	cmp	r2, #2
 80091d6:	fb0e f607 	mul.w	r6, lr, r7
 80091da:	d911      	bls.n	8009200 <core_compute_offsets+0xd4>
 80091dc:	9a03      	ldr	r2, [sp, #12]
 80091de:	4545      	cmp	r5, r8
 80091e0:	bf14      	ite	ne
 80091e2:	2200      	movne	r2, #0
 80091e4:	f002 0201 	andeq.w	r2, r2, #1
 80091e8:	ea0c 0202 	and.w	r2, ip, r2
 80091ec:	1b92      	subs	r2, r2, r6
 80091ee:	fb04 240c 	mla	r4, r4, ip, r2
 80091f2:	6842      	ldr	r2, [r0, #4]
 80091f4:	fb03 f404 	mul.w	r4, r3, r4
 80091f8:	6094      	str	r4, [r2, #8]
 80091fa:	6802      	ldr	r2, [r0, #0]
 80091fc:	f3c2 2217 	ubfx	r2, r2, #8, #24
 8009200:	e9dd 4101 	ldrd	r4, r1, [sp, #4]
 8009204:	428c      	cmp	r4, r1
 8009206:	d118      	bne.n	800923a <core_compute_offsets+0x10e>
 8009208:	b1bf      	cbz	r7, 800923a <core_compute_offsets+0x10e>
 800920a:	9903      	ldr	r1, [sp, #12]
 800920c:	ea01 010c 	and.w	r1, r1, ip
 8009210:	2a03      	cmp	r2, #3
 8009212:	d90f      	bls.n	8009234 <core_compute_offsets+0x108>
 8009214:	fb0e f505 	mul.w	r5, lr, r5
 8009218:	e9dd 2401 	ldrd	r2, r4, [sp, #4]
 800921c:	ebb2 0c04 	subs.w	ip, r2, r4
 8009220:	6842      	ldr	r2, [r0, #4]
 8009222:	bf18      	it	ne
 8009224:	f04f 0c01 	movne.w	ip, #1
 8009228:	fb0c 1115 	mls	r1, ip, r5, r1
 800922c:	440e      	add	r6, r1
 800922e:	fb06 f303 	mul.w	r3, r6, r3
 8009232:	60d3      	str	r3, [r2, #12]
 8009234:	b005      	add	sp, #20
 8009236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800923a:	2100      	movs	r1, #0
 800923c:	e7e8      	b.n	8009210 <core_compute_offsets+0xe4>
 800923e:	46a6      	mov	lr, r4
 8009240:	f04f 0901 	mov.w	r9, #1
 8009244:	e786      	b.n	8009154 <core_compute_offsets+0x28>
 8009246:	bf00      	nop

08009248 <malloc>:
 8009248:	4b02      	ldr	r3, [pc, #8]	; (8009254 <malloc+0xc>)
 800924a:	4601      	mov	r1, r0
 800924c:	6818      	ldr	r0, [r3, #0]
 800924e:	f000 b823 	b.w	8009298 <_malloc_r>
 8009252:	bf00      	nop
 8009254:	20001ed8 	.word	0x20001ed8

08009258 <sbrk_aligned>:
 8009258:	b570      	push	{r4, r5, r6, lr}
 800925a:	4e0e      	ldr	r6, [pc, #56]	; (8009294 <sbrk_aligned+0x3c>)
 800925c:	460c      	mov	r4, r1
 800925e:	6831      	ldr	r1, [r6, #0]
 8009260:	4605      	mov	r5, r0
 8009262:	b911      	cbnz	r1, 800926a <sbrk_aligned+0x12>
 8009264:	f000 f916 	bl	8009494 <_sbrk_r>
 8009268:	6030      	str	r0, [r6, #0]
 800926a:	4621      	mov	r1, r4
 800926c:	4628      	mov	r0, r5
 800926e:	f000 f911 	bl	8009494 <_sbrk_r>
 8009272:	1c43      	adds	r3, r0, #1
 8009274:	d00a      	beq.n	800928c <sbrk_aligned+0x34>
 8009276:	1cc4      	adds	r4, r0, #3
 8009278:	f024 0403 	bic.w	r4, r4, #3
 800927c:	42a0      	cmp	r0, r4
 800927e:	d007      	beq.n	8009290 <sbrk_aligned+0x38>
 8009280:	1a21      	subs	r1, r4, r0
 8009282:	4628      	mov	r0, r5
 8009284:	f000 f906 	bl	8009494 <_sbrk_r>
 8009288:	3001      	adds	r0, #1
 800928a:	d101      	bne.n	8009290 <sbrk_aligned+0x38>
 800928c:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
 8009290:	4620      	mov	r0, r4
 8009292:	bd70      	pop	{r4, r5, r6, pc}
 8009294:	200199b4 	.word	0x200199b4

08009298 <_malloc_r>:
 8009298:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800929c:	1ccd      	adds	r5, r1, #3
 800929e:	f025 0503 	bic.w	r5, r5, #3
 80092a2:	3508      	adds	r5, #8
 80092a4:	2d0c      	cmp	r5, #12
 80092a6:	bf38      	it	cc
 80092a8:	250c      	movcc	r5, #12
 80092aa:	2d00      	cmp	r5, #0
 80092ac:	4607      	mov	r7, r0
 80092ae:	db01      	blt.n	80092b4 <_malloc_r+0x1c>
 80092b0:	42a9      	cmp	r1, r5
 80092b2:	d905      	bls.n	80092c0 <_malloc_r+0x28>
 80092b4:	230c      	movs	r3, #12
 80092b6:	603b      	str	r3, [r7, #0]
 80092b8:	2600      	movs	r6, #0
 80092ba:	4630      	mov	r0, r6
 80092bc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092c0:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8009394 <_malloc_r+0xfc>
 80092c4:	f000 f868 	bl	8009398 <__malloc_lock>
 80092c8:	f8d8 3000 	ldr.w	r3, [r8]
 80092cc:	461c      	mov	r4, r3
 80092ce:	bb5c      	cbnz	r4, 8009328 <_malloc_r+0x90>
 80092d0:	4629      	mov	r1, r5
 80092d2:	4638      	mov	r0, r7
 80092d4:	f7ff ffc0 	bl	8009258 <sbrk_aligned>
 80092d8:	1c43      	adds	r3, r0, #1
 80092da:	4604      	mov	r4, r0
 80092dc:	d155      	bne.n	800938a <_malloc_r+0xf2>
 80092de:	f8d8 4000 	ldr.w	r4, [r8]
 80092e2:	4626      	mov	r6, r4
 80092e4:	2e00      	cmp	r6, #0
 80092e6:	d145      	bne.n	8009374 <_malloc_r+0xdc>
 80092e8:	2c00      	cmp	r4, #0
 80092ea:	d048      	beq.n	800937e <_malloc_r+0xe6>
 80092ec:	6823      	ldr	r3, [r4, #0]
 80092ee:	4631      	mov	r1, r6
 80092f0:	4638      	mov	r0, r7
 80092f2:	eb04 0903 	add.w	r9, r4, r3
 80092f6:	f000 f8cd 	bl	8009494 <_sbrk_r>
 80092fa:	4581      	cmp	r9, r0
 80092fc:	d13f      	bne.n	800937e <_malloc_r+0xe6>
 80092fe:	6821      	ldr	r1, [r4, #0]
 8009300:	1a6d      	subs	r5, r5, r1
 8009302:	4629      	mov	r1, r5
 8009304:	4638      	mov	r0, r7
 8009306:	f7ff ffa7 	bl	8009258 <sbrk_aligned>
 800930a:	3001      	adds	r0, #1
 800930c:	d037      	beq.n	800937e <_malloc_r+0xe6>
 800930e:	6823      	ldr	r3, [r4, #0]
 8009310:	442b      	add	r3, r5
 8009312:	6023      	str	r3, [r4, #0]
 8009314:	f8d8 3000 	ldr.w	r3, [r8]
 8009318:	2b00      	cmp	r3, #0
 800931a:	d038      	beq.n	800938e <_malloc_r+0xf6>
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	42a2      	cmp	r2, r4
 8009320:	d12b      	bne.n	800937a <_malloc_r+0xe2>
 8009322:	2200      	movs	r2, #0
 8009324:	605a      	str	r2, [r3, #4]
 8009326:	e00f      	b.n	8009348 <_malloc_r+0xb0>
 8009328:	6822      	ldr	r2, [r4, #0]
 800932a:	1b52      	subs	r2, r2, r5
 800932c:	d41f      	bmi.n	800936e <_malloc_r+0xd6>
 800932e:	2a0b      	cmp	r2, #11
 8009330:	d917      	bls.n	8009362 <_malloc_r+0xca>
 8009332:	1961      	adds	r1, r4, r5
 8009334:	42a3      	cmp	r3, r4
 8009336:	6025      	str	r5, [r4, #0]
 8009338:	bf18      	it	ne
 800933a:	6059      	strne	r1, [r3, #4]
 800933c:	6863      	ldr	r3, [r4, #4]
 800933e:	bf08      	it	eq
 8009340:	f8c8 1000 	streq.w	r1, [r8]
 8009344:	5162      	str	r2, [r4, r5]
 8009346:	604b      	str	r3, [r1, #4]
 8009348:	4638      	mov	r0, r7
 800934a:	f104 060b 	add.w	r6, r4, #11
 800934e:	f000 f829 	bl	80093a4 <__malloc_unlock>
 8009352:	f026 0607 	bic.w	r6, r6, #7
 8009356:	1d23      	adds	r3, r4, #4
 8009358:	1af2      	subs	r2, r6, r3
 800935a:	d0ae      	beq.n	80092ba <_malloc_r+0x22>
 800935c:	1b9b      	subs	r3, r3, r6
 800935e:	50a3      	str	r3, [r4, r2]
 8009360:	e7ab      	b.n	80092ba <_malloc_r+0x22>
 8009362:	42a3      	cmp	r3, r4
 8009364:	6862      	ldr	r2, [r4, #4]
 8009366:	d1dd      	bne.n	8009324 <_malloc_r+0x8c>
 8009368:	f8c8 2000 	str.w	r2, [r8]
 800936c:	e7ec      	b.n	8009348 <_malloc_r+0xb0>
 800936e:	4623      	mov	r3, r4
 8009370:	6864      	ldr	r4, [r4, #4]
 8009372:	e7ac      	b.n	80092ce <_malloc_r+0x36>
 8009374:	4634      	mov	r4, r6
 8009376:	6876      	ldr	r6, [r6, #4]
 8009378:	e7b4      	b.n	80092e4 <_malloc_r+0x4c>
 800937a:	4613      	mov	r3, r2
 800937c:	e7cc      	b.n	8009318 <_malloc_r+0x80>
 800937e:	230c      	movs	r3, #12
 8009380:	603b      	str	r3, [r7, #0]
 8009382:	4638      	mov	r0, r7
 8009384:	f000 f80e 	bl	80093a4 <__malloc_unlock>
 8009388:	e797      	b.n	80092ba <_malloc_r+0x22>
 800938a:	6025      	str	r5, [r4, #0]
 800938c:	e7dc      	b.n	8009348 <_malloc_r+0xb0>
 800938e:	605b      	str	r3, [r3, #4]
 8009390:	deff      	udf	#255	; 0xff
 8009392:	bf00      	nop
 8009394:	200199b0 	.word	0x200199b0

08009398 <__malloc_lock>:
 8009398:	4801      	ldr	r0, [pc, #4]	; (80093a0 <__malloc_lock+0x8>)
 800939a:	f000 b8b5 	b.w	8009508 <__retarget_lock_acquire_recursive>
 800939e:	bf00      	nop
 80093a0:	20019af0 	.word	0x20019af0

080093a4 <__malloc_unlock>:
 80093a4:	4801      	ldr	r0, [pc, #4]	; (80093ac <__malloc_unlock+0x8>)
 80093a6:	f000 b8b0 	b.w	800950a <__retarget_lock_release_recursive>
 80093aa:	bf00      	nop
 80093ac:	20019af0 	.word	0x20019af0

080093b0 <siprintf>:
 80093b0:	b40e      	push	{r1, r2, r3}
 80093b2:	b500      	push	{lr}
 80093b4:	b09c      	sub	sp, #112	; 0x70
 80093b6:	ab1d      	add	r3, sp, #116	; 0x74
 80093b8:	9002      	str	r0, [sp, #8]
 80093ba:	9006      	str	r0, [sp, #24]
 80093bc:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80093c0:	4809      	ldr	r0, [pc, #36]	; (80093e8 <siprintf+0x38>)
 80093c2:	9107      	str	r1, [sp, #28]
 80093c4:	9104      	str	r1, [sp, #16]
 80093c6:	4909      	ldr	r1, [pc, #36]	; (80093ec <siprintf+0x3c>)
 80093c8:	f853 2b04 	ldr.w	r2, [r3], #4
 80093cc:	9105      	str	r1, [sp, #20]
 80093ce:	6800      	ldr	r0, [r0, #0]
 80093d0:	9301      	str	r3, [sp, #4]
 80093d2:	a902      	add	r1, sp, #8
 80093d4:	f000 f94e 	bl	8009674 <_svfiprintf_r>
 80093d8:	9b02      	ldr	r3, [sp, #8]
 80093da:	2200      	movs	r2, #0
 80093dc:	701a      	strb	r2, [r3, #0]
 80093de:	b01c      	add	sp, #112	; 0x70
 80093e0:	f85d eb04 	ldr.w	lr, [sp], #4
 80093e4:	b003      	add	sp, #12
 80093e6:	4770      	bx	lr
 80093e8:	20001ed8 	.word	0x20001ed8
 80093ec:	ffff0208 	.word	0xffff0208

080093f0 <_realloc_r>:
 80093f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093f4:	4680      	mov	r8, r0
 80093f6:	4614      	mov	r4, r2
 80093f8:	460e      	mov	r6, r1
 80093fa:	b921      	cbnz	r1, 8009406 <_realloc_r+0x16>
 80093fc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009400:	4611      	mov	r1, r2
 8009402:	f7ff bf49 	b.w	8009298 <_malloc_r>
 8009406:	b92a      	cbnz	r2, 8009414 <_realloc_r+0x24>
 8009408:	f000 f88e 	bl	8009528 <_free_r>
 800940c:	4625      	mov	r5, r4
 800940e:	4628      	mov	r0, r5
 8009410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009414:	f000 fbbc 	bl	8009b90 <_malloc_usable_size_r>
 8009418:	4284      	cmp	r4, r0
 800941a:	4607      	mov	r7, r0
 800941c:	d802      	bhi.n	8009424 <_realloc_r+0x34>
 800941e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8009422:	d812      	bhi.n	800944a <_realloc_r+0x5a>
 8009424:	4621      	mov	r1, r4
 8009426:	4640      	mov	r0, r8
 8009428:	f7ff ff36 	bl	8009298 <_malloc_r>
 800942c:	4605      	mov	r5, r0
 800942e:	2800      	cmp	r0, #0
 8009430:	d0ed      	beq.n	800940e <_realloc_r+0x1e>
 8009432:	42bc      	cmp	r4, r7
 8009434:	4622      	mov	r2, r4
 8009436:	4631      	mov	r1, r6
 8009438:	bf28      	it	cs
 800943a:	463a      	movcs	r2, r7
 800943c:	f000 f866 	bl	800950c <memcpy>
 8009440:	4631      	mov	r1, r6
 8009442:	4640      	mov	r0, r8
 8009444:	f000 f870 	bl	8009528 <_free_r>
 8009448:	e7e1      	b.n	800940e <_realloc_r+0x1e>
 800944a:	4635      	mov	r5, r6
 800944c:	e7df      	b.n	800940e <_realloc_r+0x1e>

0800944e <memmove>:
 800944e:	4288      	cmp	r0, r1
 8009450:	b510      	push	{r4, lr}
 8009452:	eb01 0402 	add.w	r4, r1, r2
 8009456:	d902      	bls.n	800945e <memmove+0x10>
 8009458:	4284      	cmp	r4, r0
 800945a:	4623      	mov	r3, r4
 800945c:	d807      	bhi.n	800946e <memmove+0x20>
 800945e:	1e43      	subs	r3, r0, #1
 8009460:	42a1      	cmp	r1, r4
 8009462:	d008      	beq.n	8009476 <memmove+0x28>
 8009464:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009468:	f803 2f01 	strb.w	r2, [r3, #1]!
 800946c:	e7f8      	b.n	8009460 <memmove+0x12>
 800946e:	4402      	add	r2, r0
 8009470:	4601      	mov	r1, r0
 8009472:	428a      	cmp	r2, r1
 8009474:	d100      	bne.n	8009478 <memmove+0x2a>
 8009476:	bd10      	pop	{r4, pc}
 8009478:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800947c:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8009480:	e7f7      	b.n	8009472 <memmove+0x24>

08009482 <memset>:
 8009482:	4402      	add	r2, r0
 8009484:	4603      	mov	r3, r0
 8009486:	4293      	cmp	r3, r2
 8009488:	d100      	bne.n	800948c <memset+0xa>
 800948a:	4770      	bx	lr
 800948c:	f803 1b01 	strb.w	r1, [r3], #1
 8009490:	e7f9      	b.n	8009486 <memset+0x4>
	...

08009494 <_sbrk_r>:
 8009494:	b538      	push	{r3, r4, r5, lr}
 8009496:	4d06      	ldr	r5, [pc, #24]	; (80094b0 <_sbrk_r+0x1c>)
 8009498:	2300      	movs	r3, #0
 800949a:	4604      	mov	r4, r0
 800949c:	4608      	mov	r0, r1
 800949e:	602b      	str	r3, [r5, #0]
 80094a0:	f7f8 f8aa 	bl	80015f8 <_sbrk>
 80094a4:	1c43      	adds	r3, r0, #1
 80094a6:	d102      	bne.n	80094ae <_sbrk_r+0x1a>
 80094a8:	682b      	ldr	r3, [r5, #0]
 80094aa:	b103      	cbz	r3, 80094ae <_sbrk_r+0x1a>
 80094ac:	6023      	str	r3, [r4, #0]
 80094ae:	bd38      	pop	{r3, r4, r5, pc}
 80094b0:	20019af4 	.word	0x20019af4

080094b4 <__errno>:
 80094b4:	4b01      	ldr	r3, [pc, #4]	; (80094bc <__errno+0x8>)
 80094b6:	6818      	ldr	r0, [r3, #0]
 80094b8:	4770      	bx	lr
 80094ba:	bf00      	nop
 80094bc:	20001ed8 	.word	0x20001ed8

080094c0 <__libc_init_array>:
 80094c0:	b570      	push	{r4, r5, r6, lr}
 80094c2:	4d0d      	ldr	r5, [pc, #52]	; (80094f8 <__libc_init_array+0x38>)
 80094c4:	4c0d      	ldr	r4, [pc, #52]	; (80094fc <__libc_init_array+0x3c>)
 80094c6:	1b64      	subs	r4, r4, r5
 80094c8:	10a4      	asrs	r4, r4, #2
 80094ca:	2600      	movs	r6, #0
 80094cc:	42a6      	cmp	r6, r4
 80094ce:	d109      	bne.n	80094e4 <__libc_init_array+0x24>
 80094d0:	4d0b      	ldr	r5, [pc, #44]	; (8009500 <__libc_init_array+0x40>)
 80094d2:	4c0c      	ldr	r4, [pc, #48]	; (8009504 <__libc_init_array+0x44>)
 80094d4:	f000 fc98 	bl	8009e08 <_init>
 80094d8:	1b64      	subs	r4, r4, r5
 80094da:	10a4      	asrs	r4, r4, #2
 80094dc:	2600      	movs	r6, #0
 80094de:	42a6      	cmp	r6, r4
 80094e0:	d105      	bne.n	80094ee <__libc_init_array+0x2e>
 80094e2:	bd70      	pop	{r4, r5, r6, pc}
 80094e4:	f855 3b04 	ldr.w	r3, [r5], #4
 80094e8:	4798      	blx	r3
 80094ea:	3601      	adds	r6, #1
 80094ec:	e7ee      	b.n	80094cc <__libc_init_array+0xc>
 80094ee:	f855 3b04 	ldr.w	r3, [r5], #4
 80094f2:	4798      	blx	r3
 80094f4:	3601      	adds	r6, #1
 80094f6:	e7f2      	b.n	80094de <__libc_init_array+0x1e>
 80094f8:	080889d4 	.word	0x080889d4
 80094fc:	080889d4 	.word	0x080889d4
 8009500:	080889d4 	.word	0x080889d4
 8009504:	080889d8 	.word	0x080889d8

08009508 <__retarget_lock_acquire_recursive>:
 8009508:	4770      	bx	lr

0800950a <__retarget_lock_release_recursive>:
 800950a:	4770      	bx	lr

0800950c <memcpy>:
 800950c:	440a      	add	r2, r1
 800950e:	4291      	cmp	r1, r2
 8009510:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8009514:	d100      	bne.n	8009518 <memcpy+0xc>
 8009516:	4770      	bx	lr
 8009518:	b510      	push	{r4, lr}
 800951a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800951e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009522:	4291      	cmp	r1, r2
 8009524:	d1f9      	bne.n	800951a <memcpy+0xe>
 8009526:	bd10      	pop	{r4, pc}

08009528 <_free_r>:
 8009528:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800952a:	2900      	cmp	r1, #0
 800952c:	d044      	beq.n	80095b8 <_free_r+0x90>
 800952e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009532:	9001      	str	r0, [sp, #4]
 8009534:	2b00      	cmp	r3, #0
 8009536:	f1a1 0404 	sub.w	r4, r1, #4
 800953a:	bfb8      	it	lt
 800953c:	18e4      	addlt	r4, r4, r3
 800953e:	f7ff ff2b 	bl	8009398 <__malloc_lock>
 8009542:	4a1e      	ldr	r2, [pc, #120]	; (80095bc <_free_r+0x94>)
 8009544:	9801      	ldr	r0, [sp, #4]
 8009546:	6813      	ldr	r3, [r2, #0]
 8009548:	b933      	cbnz	r3, 8009558 <_free_r+0x30>
 800954a:	6063      	str	r3, [r4, #4]
 800954c:	6014      	str	r4, [r2, #0]
 800954e:	b003      	add	sp, #12
 8009550:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8009554:	f7ff bf26 	b.w	80093a4 <__malloc_unlock>
 8009558:	42a3      	cmp	r3, r4
 800955a:	d908      	bls.n	800956e <_free_r+0x46>
 800955c:	6825      	ldr	r5, [r4, #0]
 800955e:	1961      	adds	r1, r4, r5
 8009560:	428b      	cmp	r3, r1
 8009562:	bf01      	itttt	eq
 8009564:	6819      	ldreq	r1, [r3, #0]
 8009566:	685b      	ldreq	r3, [r3, #4]
 8009568:	1949      	addeq	r1, r1, r5
 800956a:	6021      	streq	r1, [r4, #0]
 800956c:	e7ed      	b.n	800954a <_free_r+0x22>
 800956e:	461a      	mov	r2, r3
 8009570:	685b      	ldr	r3, [r3, #4]
 8009572:	b10b      	cbz	r3, 8009578 <_free_r+0x50>
 8009574:	42a3      	cmp	r3, r4
 8009576:	d9fa      	bls.n	800956e <_free_r+0x46>
 8009578:	6811      	ldr	r1, [r2, #0]
 800957a:	1855      	adds	r5, r2, r1
 800957c:	42a5      	cmp	r5, r4
 800957e:	d10b      	bne.n	8009598 <_free_r+0x70>
 8009580:	6824      	ldr	r4, [r4, #0]
 8009582:	4421      	add	r1, r4
 8009584:	1854      	adds	r4, r2, r1
 8009586:	42a3      	cmp	r3, r4
 8009588:	6011      	str	r1, [r2, #0]
 800958a:	d1e0      	bne.n	800954e <_free_r+0x26>
 800958c:	681c      	ldr	r4, [r3, #0]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	6053      	str	r3, [r2, #4]
 8009592:	440c      	add	r4, r1
 8009594:	6014      	str	r4, [r2, #0]
 8009596:	e7da      	b.n	800954e <_free_r+0x26>
 8009598:	d902      	bls.n	80095a0 <_free_r+0x78>
 800959a:	230c      	movs	r3, #12
 800959c:	6003      	str	r3, [r0, #0]
 800959e:	e7d6      	b.n	800954e <_free_r+0x26>
 80095a0:	6825      	ldr	r5, [r4, #0]
 80095a2:	1961      	adds	r1, r4, r5
 80095a4:	428b      	cmp	r3, r1
 80095a6:	bf04      	itt	eq
 80095a8:	6819      	ldreq	r1, [r3, #0]
 80095aa:	685b      	ldreq	r3, [r3, #4]
 80095ac:	6063      	str	r3, [r4, #4]
 80095ae:	bf04      	itt	eq
 80095b0:	1949      	addeq	r1, r1, r5
 80095b2:	6021      	streq	r1, [r4, #0]
 80095b4:	6054      	str	r4, [r2, #4]
 80095b6:	e7ca      	b.n	800954e <_free_r+0x26>
 80095b8:	b003      	add	sp, #12
 80095ba:	bd30      	pop	{r4, r5, pc}
 80095bc:	200199b0 	.word	0x200199b0

080095c0 <__ssputs_r>:
 80095c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80095c4:	688e      	ldr	r6, [r1, #8]
 80095c6:	461f      	mov	r7, r3
 80095c8:	42be      	cmp	r6, r7
 80095ca:	680b      	ldr	r3, [r1, #0]
 80095cc:	4682      	mov	sl, r0
 80095ce:	460c      	mov	r4, r1
 80095d0:	4690      	mov	r8, r2
 80095d2:	d82c      	bhi.n	800962e <__ssputs_r+0x6e>
 80095d4:	898a      	ldrh	r2, [r1, #12]
 80095d6:	f412 6f90 	tst.w	r2, #1152	; 0x480
 80095da:	d026      	beq.n	800962a <__ssputs_r+0x6a>
 80095dc:	6965      	ldr	r5, [r4, #20]
 80095de:	6909      	ldr	r1, [r1, #16]
 80095e0:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80095e4:	eba3 0901 	sub.w	r9, r3, r1
 80095e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80095ec:	1c7b      	adds	r3, r7, #1
 80095ee:	444b      	add	r3, r9
 80095f0:	106d      	asrs	r5, r5, #1
 80095f2:	429d      	cmp	r5, r3
 80095f4:	bf38      	it	cc
 80095f6:	461d      	movcc	r5, r3
 80095f8:	0553      	lsls	r3, r2, #21
 80095fa:	d527      	bpl.n	800964c <__ssputs_r+0x8c>
 80095fc:	4629      	mov	r1, r5
 80095fe:	f7ff fe4b 	bl	8009298 <_malloc_r>
 8009602:	4606      	mov	r6, r0
 8009604:	b360      	cbz	r0, 8009660 <__ssputs_r+0xa0>
 8009606:	6921      	ldr	r1, [r4, #16]
 8009608:	464a      	mov	r2, r9
 800960a:	f7ff ff7f 	bl	800950c <memcpy>
 800960e:	89a3      	ldrh	r3, [r4, #12]
 8009610:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8009614:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8009618:	81a3      	strh	r3, [r4, #12]
 800961a:	6126      	str	r6, [r4, #16]
 800961c:	6165      	str	r5, [r4, #20]
 800961e:	444e      	add	r6, r9
 8009620:	eba5 0509 	sub.w	r5, r5, r9
 8009624:	6026      	str	r6, [r4, #0]
 8009626:	60a5      	str	r5, [r4, #8]
 8009628:	463e      	mov	r6, r7
 800962a:	42be      	cmp	r6, r7
 800962c:	d900      	bls.n	8009630 <__ssputs_r+0x70>
 800962e:	463e      	mov	r6, r7
 8009630:	6820      	ldr	r0, [r4, #0]
 8009632:	4632      	mov	r2, r6
 8009634:	4641      	mov	r1, r8
 8009636:	f7ff ff0a 	bl	800944e <memmove>
 800963a:	68a3      	ldr	r3, [r4, #8]
 800963c:	1b9b      	subs	r3, r3, r6
 800963e:	60a3      	str	r3, [r4, #8]
 8009640:	6823      	ldr	r3, [r4, #0]
 8009642:	4433      	add	r3, r6
 8009644:	6023      	str	r3, [r4, #0]
 8009646:	2000      	movs	r0, #0
 8009648:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800964c:	462a      	mov	r2, r5
 800964e:	f7ff fecf 	bl	80093f0 <_realloc_r>
 8009652:	4606      	mov	r6, r0
 8009654:	2800      	cmp	r0, #0
 8009656:	d1e0      	bne.n	800961a <__ssputs_r+0x5a>
 8009658:	6921      	ldr	r1, [r4, #16]
 800965a:	4650      	mov	r0, sl
 800965c:	f7ff ff64 	bl	8009528 <_free_r>
 8009660:	230c      	movs	r3, #12
 8009662:	f8ca 3000 	str.w	r3, [sl]
 8009666:	89a3      	ldrh	r3, [r4, #12]
 8009668:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800966c:	81a3      	strh	r3, [r4, #12]
 800966e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009672:	e7e9      	b.n	8009648 <__ssputs_r+0x88>

08009674 <_svfiprintf_r>:
 8009674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009678:	4698      	mov	r8, r3
 800967a:	898b      	ldrh	r3, [r1, #12]
 800967c:	061b      	lsls	r3, r3, #24
 800967e:	b09d      	sub	sp, #116	; 0x74
 8009680:	4607      	mov	r7, r0
 8009682:	460d      	mov	r5, r1
 8009684:	4614      	mov	r4, r2
 8009686:	d50e      	bpl.n	80096a6 <_svfiprintf_r+0x32>
 8009688:	690b      	ldr	r3, [r1, #16]
 800968a:	b963      	cbnz	r3, 80096a6 <_svfiprintf_r+0x32>
 800968c:	2140      	movs	r1, #64	; 0x40
 800968e:	f7ff fe03 	bl	8009298 <_malloc_r>
 8009692:	6028      	str	r0, [r5, #0]
 8009694:	6128      	str	r0, [r5, #16]
 8009696:	b920      	cbnz	r0, 80096a2 <_svfiprintf_r+0x2e>
 8009698:	230c      	movs	r3, #12
 800969a:	603b      	str	r3, [r7, #0]
 800969c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80096a0:	e0d0      	b.n	8009844 <_svfiprintf_r+0x1d0>
 80096a2:	2340      	movs	r3, #64	; 0x40
 80096a4:	616b      	str	r3, [r5, #20]
 80096a6:	2300      	movs	r3, #0
 80096a8:	9309      	str	r3, [sp, #36]	; 0x24
 80096aa:	2320      	movs	r3, #32
 80096ac:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80096b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80096b4:	2330      	movs	r3, #48	; 0x30
 80096b6:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800985c <_svfiprintf_r+0x1e8>
 80096ba:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80096be:	f04f 0901 	mov.w	r9, #1
 80096c2:	4623      	mov	r3, r4
 80096c4:	469a      	mov	sl, r3
 80096c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80096ca:	b10a      	cbz	r2, 80096d0 <_svfiprintf_r+0x5c>
 80096cc:	2a25      	cmp	r2, #37	; 0x25
 80096ce:	d1f9      	bne.n	80096c4 <_svfiprintf_r+0x50>
 80096d0:	ebba 0b04 	subs.w	fp, sl, r4
 80096d4:	d00b      	beq.n	80096ee <_svfiprintf_r+0x7a>
 80096d6:	465b      	mov	r3, fp
 80096d8:	4622      	mov	r2, r4
 80096da:	4629      	mov	r1, r5
 80096dc:	4638      	mov	r0, r7
 80096de:	f7ff ff6f 	bl	80095c0 <__ssputs_r>
 80096e2:	3001      	adds	r0, #1
 80096e4:	f000 80a9 	beq.w	800983a <_svfiprintf_r+0x1c6>
 80096e8:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80096ea:	445a      	add	r2, fp
 80096ec:	9209      	str	r2, [sp, #36]	; 0x24
 80096ee:	f89a 3000 	ldrb.w	r3, [sl]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	f000 80a1 	beq.w	800983a <_svfiprintf_r+0x1c6>
 80096f8:	2300      	movs	r3, #0
 80096fa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80096fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009702:	f10a 0a01 	add.w	sl, sl, #1
 8009706:	9304      	str	r3, [sp, #16]
 8009708:	9307      	str	r3, [sp, #28]
 800970a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800970e:	931a      	str	r3, [sp, #104]	; 0x68
 8009710:	4654      	mov	r4, sl
 8009712:	2205      	movs	r2, #5
 8009714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009718:	4850      	ldr	r0, [pc, #320]	; (800985c <_svfiprintf_r+0x1e8>)
 800971a:	f7f6 fd79 	bl	8000210 <memchr>
 800971e:	9a04      	ldr	r2, [sp, #16]
 8009720:	b9d8      	cbnz	r0, 800975a <_svfiprintf_r+0xe6>
 8009722:	06d0      	lsls	r0, r2, #27
 8009724:	bf44      	itt	mi
 8009726:	2320      	movmi	r3, #32
 8009728:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800972c:	0711      	lsls	r1, r2, #28
 800972e:	bf44      	itt	mi
 8009730:	232b      	movmi	r3, #43	; 0x2b
 8009732:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8009736:	f89a 3000 	ldrb.w	r3, [sl]
 800973a:	2b2a      	cmp	r3, #42	; 0x2a
 800973c:	d015      	beq.n	800976a <_svfiprintf_r+0xf6>
 800973e:	9a07      	ldr	r2, [sp, #28]
 8009740:	4654      	mov	r4, sl
 8009742:	2000      	movs	r0, #0
 8009744:	f04f 0c0a 	mov.w	ip, #10
 8009748:	4621      	mov	r1, r4
 800974a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800974e:	3b30      	subs	r3, #48	; 0x30
 8009750:	2b09      	cmp	r3, #9
 8009752:	d94d      	bls.n	80097f0 <_svfiprintf_r+0x17c>
 8009754:	b1b0      	cbz	r0, 8009784 <_svfiprintf_r+0x110>
 8009756:	9207      	str	r2, [sp, #28]
 8009758:	e014      	b.n	8009784 <_svfiprintf_r+0x110>
 800975a:	eba0 0308 	sub.w	r3, r0, r8
 800975e:	fa09 f303 	lsl.w	r3, r9, r3
 8009762:	4313      	orrs	r3, r2
 8009764:	9304      	str	r3, [sp, #16]
 8009766:	46a2      	mov	sl, r4
 8009768:	e7d2      	b.n	8009710 <_svfiprintf_r+0x9c>
 800976a:	9b03      	ldr	r3, [sp, #12]
 800976c:	1d19      	adds	r1, r3, #4
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	9103      	str	r1, [sp, #12]
 8009772:	2b00      	cmp	r3, #0
 8009774:	bfbb      	ittet	lt
 8009776:	425b      	neglt	r3, r3
 8009778:	f042 0202 	orrlt.w	r2, r2, #2
 800977c:	9307      	strge	r3, [sp, #28]
 800977e:	9307      	strlt	r3, [sp, #28]
 8009780:	bfb8      	it	lt
 8009782:	9204      	strlt	r2, [sp, #16]
 8009784:	7823      	ldrb	r3, [r4, #0]
 8009786:	2b2e      	cmp	r3, #46	; 0x2e
 8009788:	d10c      	bne.n	80097a4 <_svfiprintf_r+0x130>
 800978a:	7863      	ldrb	r3, [r4, #1]
 800978c:	2b2a      	cmp	r3, #42	; 0x2a
 800978e:	d134      	bne.n	80097fa <_svfiprintf_r+0x186>
 8009790:	9b03      	ldr	r3, [sp, #12]
 8009792:	1d1a      	adds	r2, r3, #4
 8009794:	681b      	ldr	r3, [r3, #0]
 8009796:	9203      	str	r2, [sp, #12]
 8009798:	2b00      	cmp	r3, #0
 800979a:	bfb8      	it	lt
 800979c:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
 80097a0:	3402      	adds	r4, #2
 80097a2:	9305      	str	r3, [sp, #20]
 80097a4:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800986c <_svfiprintf_r+0x1f8>
 80097a8:	7821      	ldrb	r1, [r4, #0]
 80097aa:	2203      	movs	r2, #3
 80097ac:	4650      	mov	r0, sl
 80097ae:	f7f6 fd2f 	bl	8000210 <memchr>
 80097b2:	b138      	cbz	r0, 80097c4 <_svfiprintf_r+0x150>
 80097b4:	9b04      	ldr	r3, [sp, #16]
 80097b6:	eba0 000a 	sub.w	r0, r0, sl
 80097ba:	2240      	movs	r2, #64	; 0x40
 80097bc:	4082      	lsls	r2, r0
 80097be:	4313      	orrs	r3, r2
 80097c0:	3401      	adds	r4, #1
 80097c2:	9304      	str	r3, [sp, #16]
 80097c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80097c8:	4825      	ldr	r0, [pc, #148]	; (8009860 <_svfiprintf_r+0x1ec>)
 80097ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80097ce:	2206      	movs	r2, #6
 80097d0:	f7f6 fd1e 	bl	8000210 <memchr>
 80097d4:	2800      	cmp	r0, #0
 80097d6:	d038      	beq.n	800984a <_svfiprintf_r+0x1d6>
 80097d8:	4b22      	ldr	r3, [pc, #136]	; (8009864 <_svfiprintf_r+0x1f0>)
 80097da:	bb1b      	cbnz	r3, 8009824 <_svfiprintf_r+0x1b0>
 80097dc:	9b03      	ldr	r3, [sp, #12]
 80097de:	3307      	adds	r3, #7
 80097e0:	f023 0307 	bic.w	r3, r3, #7
 80097e4:	3308      	adds	r3, #8
 80097e6:	9303      	str	r3, [sp, #12]
 80097e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097ea:	4433      	add	r3, r6
 80097ec:	9309      	str	r3, [sp, #36]	; 0x24
 80097ee:	e768      	b.n	80096c2 <_svfiprintf_r+0x4e>
 80097f0:	fb0c 3202 	mla	r2, ip, r2, r3
 80097f4:	460c      	mov	r4, r1
 80097f6:	2001      	movs	r0, #1
 80097f8:	e7a6      	b.n	8009748 <_svfiprintf_r+0xd4>
 80097fa:	2300      	movs	r3, #0
 80097fc:	3401      	adds	r4, #1
 80097fe:	9305      	str	r3, [sp, #20]
 8009800:	4619      	mov	r1, r3
 8009802:	f04f 0c0a 	mov.w	ip, #10
 8009806:	4620      	mov	r0, r4
 8009808:	f810 2b01 	ldrb.w	r2, [r0], #1
 800980c:	3a30      	subs	r2, #48	; 0x30
 800980e:	2a09      	cmp	r2, #9
 8009810:	d903      	bls.n	800981a <_svfiprintf_r+0x1a6>
 8009812:	2b00      	cmp	r3, #0
 8009814:	d0c6      	beq.n	80097a4 <_svfiprintf_r+0x130>
 8009816:	9105      	str	r1, [sp, #20]
 8009818:	e7c4      	b.n	80097a4 <_svfiprintf_r+0x130>
 800981a:	fb0c 2101 	mla	r1, ip, r1, r2
 800981e:	4604      	mov	r4, r0
 8009820:	2301      	movs	r3, #1
 8009822:	e7f0      	b.n	8009806 <_svfiprintf_r+0x192>
 8009824:	ab03      	add	r3, sp, #12
 8009826:	9300      	str	r3, [sp, #0]
 8009828:	462a      	mov	r2, r5
 800982a:	4b0f      	ldr	r3, [pc, #60]	; (8009868 <_svfiprintf_r+0x1f4>)
 800982c:	a904      	add	r1, sp, #16
 800982e:	4638      	mov	r0, r7
 8009830:	f3af 8000 	nop.w
 8009834:	1c42      	adds	r2, r0, #1
 8009836:	4606      	mov	r6, r0
 8009838:	d1d6      	bne.n	80097e8 <_svfiprintf_r+0x174>
 800983a:	89ab      	ldrh	r3, [r5, #12]
 800983c:	065b      	lsls	r3, r3, #25
 800983e:	f53f af2d 	bmi.w	800969c <_svfiprintf_r+0x28>
 8009842:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009844:	b01d      	add	sp, #116	; 0x74
 8009846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800984a:	ab03      	add	r3, sp, #12
 800984c:	9300      	str	r3, [sp, #0]
 800984e:	462a      	mov	r2, r5
 8009850:	4b05      	ldr	r3, [pc, #20]	; (8009868 <_svfiprintf_r+0x1f4>)
 8009852:	a904      	add	r1, sp, #16
 8009854:	4638      	mov	r0, r7
 8009856:	f000 f879 	bl	800994c <_printf_i>
 800985a:	e7eb      	b.n	8009834 <_svfiprintf_r+0x1c0>
 800985c:	08088980 	.word	0x08088980
 8009860:	0808898a 	.word	0x0808898a
 8009864:	00000000 	.word	0x00000000
 8009868:	080095c1 	.word	0x080095c1
 800986c:	08088986 	.word	0x08088986

08009870 <_printf_common>:
 8009870:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009874:	4616      	mov	r6, r2
 8009876:	4699      	mov	r9, r3
 8009878:	688a      	ldr	r2, [r1, #8]
 800987a:	690b      	ldr	r3, [r1, #16]
 800987c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009880:	4293      	cmp	r3, r2
 8009882:	bfb8      	it	lt
 8009884:	4613      	movlt	r3, r2
 8009886:	6033      	str	r3, [r6, #0]
 8009888:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800988c:	4607      	mov	r7, r0
 800988e:	460c      	mov	r4, r1
 8009890:	b10a      	cbz	r2, 8009896 <_printf_common+0x26>
 8009892:	3301      	adds	r3, #1
 8009894:	6033      	str	r3, [r6, #0]
 8009896:	6823      	ldr	r3, [r4, #0]
 8009898:	0699      	lsls	r1, r3, #26
 800989a:	bf42      	ittt	mi
 800989c:	6833      	ldrmi	r3, [r6, #0]
 800989e:	3302      	addmi	r3, #2
 80098a0:	6033      	strmi	r3, [r6, #0]
 80098a2:	6825      	ldr	r5, [r4, #0]
 80098a4:	f015 0506 	ands.w	r5, r5, #6
 80098a8:	d106      	bne.n	80098b8 <_printf_common+0x48>
 80098aa:	f104 0a19 	add.w	sl, r4, #25
 80098ae:	68e3      	ldr	r3, [r4, #12]
 80098b0:	6832      	ldr	r2, [r6, #0]
 80098b2:	1a9b      	subs	r3, r3, r2
 80098b4:	42ab      	cmp	r3, r5
 80098b6:	dc26      	bgt.n	8009906 <_printf_common+0x96>
 80098b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80098bc:	1e13      	subs	r3, r2, #0
 80098be:	6822      	ldr	r2, [r4, #0]
 80098c0:	bf18      	it	ne
 80098c2:	2301      	movne	r3, #1
 80098c4:	0692      	lsls	r2, r2, #26
 80098c6:	d42b      	bmi.n	8009920 <_printf_common+0xb0>
 80098c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80098cc:	4649      	mov	r1, r9
 80098ce:	4638      	mov	r0, r7
 80098d0:	47c0      	blx	r8
 80098d2:	3001      	adds	r0, #1
 80098d4:	d01e      	beq.n	8009914 <_printf_common+0xa4>
 80098d6:	6823      	ldr	r3, [r4, #0]
 80098d8:	6922      	ldr	r2, [r4, #16]
 80098da:	f003 0306 	and.w	r3, r3, #6
 80098de:	2b04      	cmp	r3, #4
 80098e0:	bf02      	ittt	eq
 80098e2:	68e5      	ldreq	r5, [r4, #12]
 80098e4:	6833      	ldreq	r3, [r6, #0]
 80098e6:	1aed      	subeq	r5, r5, r3
 80098e8:	68a3      	ldr	r3, [r4, #8]
 80098ea:	bf0c      	ite	eq
 80098ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80098f0:	2500      	movne	r5, #0
 80098f2:	4293      	cmp	r3, r2
 80098f4:	bfc4      	itt	gt
 80098f6:	1a9b      	subgt	r3, r3, r2
 80098f8:	18ed      	addgt	r5, r5, r3
 80098fa:	2600      	movs	r6, #0
 80098fc:	341a      	adds	r4, #26
 80098fe:	42b5      	cmp	r5, r6
 8009900:	d11a      	bne.n	8009938 <_printf_common+0xc8>
 8009902:	2000      	movs	r0, #0
 8009904:	e008      	b.n	8009918 <_printf_common+0xa8>
 8009906:	2301      	movs	r3, #1
 8009908:	4652      	mov	r2, sl
 800990a:	4649      	mov	r1, r9
 800990c:	4638      	mov	r0, r7
 800990e:	47c0      	blx	r8
 8009910:	3001      	adds	r0, #1
 8009912:	d103      	bne.n	800991c <_printf_common+0xac>
 8009914:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009918:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800991c:	3501      	adds	r5, #1
 800991e:	e7c6      	b.n	80098ae <_printf_common+0x3e>
 8009920:	18e1      	adds	r1, r4, r3
 8009922:	1c5a      	adds	r2, r3, #1
 8009924:	2030      	movs	r0, #48	; 0x30
 8009926:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800992a:	4422      	add	r2, r4
 800992c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009930:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009934:	3302      	adds	r3, #2
 8009936:	e7c7      	b.n	80098c8 <_printf_common+0x58>
 8009938:	2301      	movs	r3, #1
 800993a:	4622      	mov	r2, r4
 800993c:	4649      	mov	r1, r9
 800993e:	4638      	mov	r0, r7
 8009940:	47c0      	blx	r8
 8009942:	3001      	adds	r0, #1
 8009944:	d0e6      	beq.n	8009914 <_printf_common+0xa4>
 8009946:	3601      	adds	r6, #1
 8009948:	e7d9      	b.n	80098fe <_printf_common+0x8e>
	...

0800994c <_printf_i>:
 800994c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009950:	7e0f      	ldrb	r7, [r1, #24]
 8009952:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009954:	2f78      	cmp	r7, #120	; 0x78
 8009956:	4691      	mov	r9, r2
 8009958:	4680      	mov	r8, r0
 800995a:	460c      	mov	r4, r1
 800995c:	469a      	mov	sl, r3
 800995e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009962:	d807      	bhi.n	8009974 <_printf_i+0x28>
 8009964:	2f62      	cmp	r7, #98	; 0x62
 8009966:	d80a      	bhi.n	800997e <_printf_i+0x32>
 8009968:	2f00      	cmp	r7, #0
 800996a:	f000 80d4 	beq.w	8009b16 <_printf_i+0x1ca>
 800996e:	2f58      	cmp	r7, #88	; 0x58
 8009970:	f000 80c0 	beq.w	8009af4 <_printf_i+0x1a8>
 8009974:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009978:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800997c:	e03a      	b.n	80099f4 <_printf_i+0xa8>
 800997e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009982:	2b15      	cmp	r3, #21
 8009984:	d8f6      	bhi.n	8009974 <_printf_i+0x28>
 8009986:	a101      	add	r1, pc, #4	; (adr r1, 800998c <_printf_i+0x40>)
 8009988:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800998c:	080099e5 	.word	0x080099e5
 8009990:	080099f9 	.word	0x080099f9
 8009994:	08009975 	.word	0x08009975
 8009998:	08009975 	.word	0x08009975
 800999c:	08009975 	.word	0x08009975
 80099a0:	08009975 	.word	0x08009975
 80099a4:	080099f9 	.word	0x080099f9
 80099a8:	08009975 	.word	0x08009975
 80099ac:	08009975 	.word	0x08009975
 80099b0:	08009975 	.word	0x08009975
 80099b4:	08009975 	.word	0x08009975
 80099b8:	08009afd 	.word	0x08009afd
 80099bc:	08009a25 	.word	0x08009a25
 80099c0:	08009ab7 	.word	0x08009ab7
 80099c4:	08009975 	.word	0x08009975
 80099c8:	08009975 	.word	0x08009975
 80099cc:	08009b1f 	.word	0x08009b1f
 80099d0:	08009975 	.word	0x08009975
 80099d4:	08009a25 	.word	0x08009a25
 80099d8:	08009975 	.word	0x08009975
 80099dc:	08009975 	.word	0x08009975
 80099e0:	08009abf 	.word	0x08009abf
 80099e4:	682b      	ldr	r3, [r5, #0]
 80099e6:	1d1a      	adds	r2, r3, #4
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	602a      	str	r2, [r5, #0]
 80099ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80099f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80099f4:	2301      	movs	r3, #1
 80099f6:	e09f      	b.n	8009b38 <_printf_i+0x1ec>
 80099f8:	6820      	ldr	r0, [r4, #0]
 80099fa:	682b      	ldr	r3, [r5, #0]
 80099fc:	0607      	lsls	r7, r0, #24
 80099fe:	f103 0104 	add.w	r1, r3, #4
 8009a02:	6029      	str	r1, [r5, #0]
 8009a04:	d501      	bpl.n	8009a0a <_printf_i+0xbe>
 8009a06:	681e      	ldr	r6, [r3, #0]
 8009a08:	e003      	b.n	8009a12 <_printf_i+0xc6>
 8009a0a:	0646      	lsls	r6, r0, #25
 8009a0c:	d5fb      	bpl.n	8009a06 <_printf_i+0xba>
 8009a0e:	f9b3 6000 	ldrsh.w	r6, [r3]
 8009a12:	2e00      	cmp	r6, #0
 8009a14:	da03      	bge.n	8009a1e <_printf_i+0xd2>
 8009a16:	232d      	movs	r3, #45	; 0x2d
 8009a18:	4276      	negs	r6, r6
 8009a1a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a1e:	485a      	ldr	r0, [pc, #360]	; (8009b88 <_printf_i+0x23c>)
 8009a20:	230a      	movs	r3, #10
 8009a22:	e012      	b.n	8009a4a <_printf_i+0xfe>
 8009a24:	682b      	ldr	r3, [r5, #0]
 8009a26:	6820      	ldr	r0, [r4, #0]
 8009a28:	1d19      	adds	r1, r3, #4
 8009a2a:	6029      	str	r1, [r5, #0]
 8009a2c:	0605      	lsls	r5, r0, #24
 8009a2e:	d501      	bpl.n	8009a34 <_printf_i+0xe8>
 8009a30:	681e      	ldr	r6, [r3, #0]
 8009a32:	e002      	b.n	8009a3a <_printf_i+0xee>
 8009a34:	0641      	lsls	r1, r0, #25
 8009a36:	d5fb      	bpl.n	8009a30 <_printf_i+0xe4>
 8009a38:	881e      	ldrh	r6, [r3, #0]
 8009a3a:	4853      	ldr	r0, [pc, #332]	; (8009b88 <_printf_i+0x23c>)
 8009a3c:	2f6f      	cmp	r7, #111	; 0x6f
 8009a3e:	bf0c      	ite	eq
 8009a40:	2308      	moveq	r3, #8
 8009a42:	230a      	movne	r3, #10
 8009a44:	2100      	movs	r1, #0
 8009a46:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009a4a:	6865      	ldr	r5, [r4, #4]
 8009a4c:	60a5      	str	r5, [r4, #8]
 8009a4e:	2d00      	cmp	r5, #0
 8009a50:	bfa2      	ittt	ge
 8009a52:	6821      	ldrge	r1, [r4, #0]
 8009a54:	f021 0104 	bicge.w	r1, r1, #4
 8009a58:	6021      	strge	r1, [r4, #0]
 8009a5a:	b90e      	cbnz	r6, 8009a60 <_printf_i+0x114>
 8009a5c:	2d00      	cmp	r5, #0
 8009a5e:	d04b      	beq.n	8009af8 <_printf_i+0x1ac>
 8009a60:	4615      	mov	r5, r2
 8009a62:	fbb6 f1f3 	udiv	r1, r6, r3
 8009a66:	fb03 6711 	mls	r7, r3, r1, r6
 8009a6a:	5dc7      	ldrb	r7, [r0, r7]
 8009a6c:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009a70:	4637      	mov	r7, r6
 8009a72:	42bb      	cmp	r3, r7
 8009a74:	460e      	mov	r6, r1
 8009a76:	d9f4      	bls.n	8009a62 <_printf_i+0x116>
 8009a78:	2b08      	cmp	r3, #8
 8009a7a:	d10b      	bne.n	8009a94 <_printf_i+0x148>
 8009a7c:	6823      	ldr	r3, [r4, #0]
 8009a7e:	07de      	lsls	r6, r3, #31
 8009a80:	d508      	bpl.n	8009a94 <_printf_i+0x148>
 8009a82:	6923      	ldr	r3, [r4, #16]
 8009a84:	6861      	ldr	r1, [r4, #4]
 8009a86:	4299      	cmp	r1, r3
 8009a88:	bfde      	ittt	le
 8009a8a:	2330      	movle	r3, #48	; 0x30
 8009a8c:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009a90:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
 8009a94:	1b52      	subs	r2, r2, r5
 8009a96:	6122      	str	r2, [r4, #16]
 8009a98:	f8cd a000 	str.w	sl, [sp]
 8009a9c:	464b      	mov	r3, r9
 8009a9e:	aa03      	add	r2, sp, #12
 8009aa0:	4621      	mov	r1, r4
 8009aa2:	4640      	mov	r0, r8
 8009aa4:	f7ff fee4 	bl	8009870 <_printf_common>
 8009aa8:	3001      	adds	r0, #1
 8009aaa:	d14a      	bne.n	8009b42 <_printf_i+0x1f6>
 8009aac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8009ab0:	b004      	add	sp, #16
 8009ab2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ab6:	6823      	ldr	r3, [r4, #0]
 8009ab8:	f043 0320 	orr.w	r3, r3, #32
 8009abc:	6023      	str	r3, [r4, #0]
 8009abe:	4833      	ldr	r0, [pc, #204]	; (8009b8c <_printf_i+0x240>)
 8009ac0:	2778      	movs	r7, #120	; 0x78
 8009ac2:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8009ac6:	6823      	ldr	r3, [r4, #0]
 8009ac8:	6829      	ldr	r1, [r5, #0]
 8009aca:	061f      	lsls	r7, r3, #24
 8009acc:	f851 6b04 	ldr.w	r6, [r1], #4
 8009ad0:	d402      	bmi.n	8009ad8 <_printf_i+0x18c>
 8009ad2:	065f      	lsls	r7, r3, #25
 8009ad4:	bf48      	it	mi
 8009ad6:	b2b6      	uxthmi	r6, r6
 8009ad8:	07df      	lsls	r7, r3, #31
 8009ada:	bf48      	it	mi
 8009adc:	f043 0320 	orrmi.w	r3, r3, #32
 8009ae0:	6029      	str	r1, [r5, #0]
 8009ae2:	bf48      	it	mi
 8009ae4:	6023      	strmi	r3, [r4, #0]
 8009ae6:	b91e      	cbnz	r6, 8009af0 <_printf_i+0x1a4>
 8009ae8:	6823      	ldr	r3, [r4, #0]
 8009aea:	f023 0320 	bic.w	r3, r3, #32
 8009aee:	6023      	str	r3, [r4, #0]
 8009af0:	2310      	movs	r3, #16
 8009af2:	e7a7      	b.n	8009a44 <_printf_i+0xf8>
 8009af4:	4824      	ldr	r0, [pc, #144]	; (8009b88 <_printf_i+0x23c>)
 8009af6:	e7e4      	b.n	8009ac2 <_printf_i+0x176>
 8009af8:	4615      	mov	r5, r2
 8009afa:	e7bd      	b.n	8009a78 <_printf_i+0x12c>
 8009afc:	682b      	ldr	r3, [r5, #0]
 8009afe:	6826      	ldr	r6, [r4, #0]
 8009b00:	6961      	ldr	r1, [r4, #20]
 8009b02:	1d18      	adds	r0, r3, #4
 8009b04:	6028      	str	r0, [r5, #0]
 8009b06:	0635      	lsls	r5, r6, #24
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	d501      	bpl.n	8009b10 <_printf_i+0x1c4>
 8009b0c:	6019      	str	r1, [r3, #0]
 8009b0e:	e002      	b.n	8009b16 <_printf_i+0x1ca>
 8009b10:	0670      	lsls	r0, r6, #25
 8009b12:	d5fb      	bpl.n	8009b0c <_printf_i+0x1c0>
 8009b14:	8019      	strh	r1, [r3, #0]
 8009b16:	2300      	movs	r3, #0
 8009b18:	6123      	str	r3, [r4, #16]
 8009b1a:	4615      	mov	r5, r2
 8009b1c:	e7bc      	b.n	8009a98 <_printf_i+0x14c>
 8009b1e:	682b      	ldr	r3, [r5, #0]
 8009b20:	1d1a      	adds	r2, r3, #4
 8009b22:	602a      	str	r2, [r5, #0]
 8009b24:	681d      	ldr	r5, [r3, #0]
 8009b26:	6862      	ldr	r2, [r4, #4]
 8009b28:	2100      	movs	r1, #0
 8009b2a:	4628      	mov	r0, r5
 8009b2c:	f7f6 fb70 	bl	8000210 <memchr>
 8009b30:	b108      	cbz	r0, 8009b36 <_printf_i+0x1ea>
 8009b32:	1b40      	subs	r0, r0, r5
 8009b34:	6060      	str	r0, [r4, #4]
 8009b36:	6863      	ldr	r3, [r4, #4]
 8009b38:	6123      	str	r3, [r4, #16]
 8009b3a:	2300      	movs	r3, #0
 8009b3c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b40:	e7aa      	b.n	8009a98 <_printf_i+0x14c>
 8009b42:	6923      	ldr	r3, [r4, #16]
 8009b44:	462a      	mov	r2, r5
 8009b46:	4649      	mov	r1, r9
 8009b48:	4640      	mov	r0, r8
 8009b4a:	47d0      	blx	sl
 8009b4c:	3001      	adds	r0, #1
 8009b4e:	d0ad      	beq.n	8009aac <_printf_i+0x160>
 8009b50:	6823      	ldr	r3, [r4, #0]
 8009b52:	079b      	lsls	r3, r3, #30
 8009b54:	d413      	bmi.n	8009b7e <_printf_i+0x232>
 8009b56:	68e0      	ldr	r0, [r4, #12]
 8009b58:	9b03      	ldr	r3, [sp, #12]
 8009b5a:	4298      	cmp	r0, r3
 8009b5c:	bfb8      	it	lt
 8009b5e:	4618      	movlt	r0, r3
 8009b60:	e7a6      	b.n	8009ab0 <_printf_i+0x164>
 8009b62:	2301      	movs	r3, #1
 8009b64:	4632      	mov	r2, r6
 8009b66:	4649      	mov	r1, r9
 8009b68:	4640      	mov	r0, r8
 8009b6a:	47d0      	blx	sl
 8009b6c:	3001      	adds	r0, #1
 8009b6e:	d09d      	beq.n	8009aac <_printf_i+0x160>
 8009b70:	3501      	adds	r5, #1
 8009b72:	68e3      	ldr	r3, [r4, #12]
 8009b74:	9903      	ldr	r1, [sp, #12]
 8009b76:	1a5b      	subs	r3, r3, r1
 8009b78:	42ab      	cmp	r3, r5
 8009b7a:	dcf2      	bgt.n	8009b62 <_printf_i+0x216>
 8009b7c:	e7eb      	b.n	8009b56 <_printf_i+0x20a>
 8009b7e:	2500      	movs	r5, #0
 8009b80:	f104 0619 	add.w	r6, r4, #25
 8009b84:	e7f5      	b.n	8009b72 <_printf_i+0x226>
 8009b86:	bf00      	nop
 8009b88:	08088991 	.word	0x08088991
 8009b8c:	080889a2 	.word	0x080889a2

08009b90 <_malloc_usable_size_r>:
 8009b90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b94:	1f18      	subs	r0, r3, #4
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	bfbc      	itt	lt
 8009b9a:	580b      	ldrlt	r3, [r1, r0]
 8009b9c:	18c0      	addlt	r0, r0, r3
 8009b9e:	4770      	bx	lr

08009ba0 <expf>:
 8009ba0:	b508      	push	{r3, lr}
 8009ba2:	ed2d 8b02 	vpush	{d8}
 8009ba6:	eef0 8a40 	vmov.f32	s17, s0
 8009baa:	f000 f83d 	bl	8009c28 <__ieee754_expf>
 8009bae:	eeb0 8a40 	vmov.f32	s16, s0
 8009bb2:	eeb0 0a68 	vmov.f32	s0, s17
 8009bb6:	f000 f829 	bl	8009c0c <finitef>
 8009bba:	b160      	cbz	r0, 8009bd6 <expf+0x36>
 8009bbc:	eddf 7a0f 	vldr	s15, [pc, #60]	; 8009bfc <expf+0x5c>
 8009bc0:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009bc4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bc8:	dd0a      	ble.n	8009be0 <expf+0x40>
 8009bca:	f7ff fc73 	bl	80094b4 <__errno>
 8009bce:	ed9f 8a0c 	vldr	s16, [pc, #48]	; 8009c00 <expf+0x60>
 8009bd2:	2322      	movs	r3, #34	; 0x22
 8009bd4:	6003      	str	r3, [r0, #0]
 8009bd6:	eeb0 0a48 	vmov.f32	s0, s16
 8009bda:	ecbd 8b02 	vpop	{d8}
 8009bde:	bd08      	pop	{r3, pc}
 8009be0:	eddf 7a08 	vldr	s15, [pc, #32]	; 8009c04 <expf+0x64>
 8009be4:	eef4 8ae7 	vcmpe.f32	s17, s15
 8009be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009bec:	d5f3      	bpl.n	8009bd6 <expf+0x36>
 8009bee:	f7ff fc61 	bl	80094b4 <__errno>
 8009bf2:	2322      	movs	r3, #34	; 0x22
 8009bf4:	ed9f 8a04 	vldr	s16, [pc, #16]	; 8009c08 <expf+0x68>
 8009bf8:	6003      	str	r3, [r0, #0]
 8009bfa:	e7ec      	b.n	8009bd6 <expf+0x36>
 8009bfc:	42b17217 	.word	0x42b17217
 8009c00:	7f800000 	.word	0x7f800000
 8009c04:	c2cff1b5 	.word	0xc2cff1b5
 8009c08:	00000000 	.word	0x00000000

08009c0c <finitef>:
 8009c0c:	b082      	sub	sp, #8
 8009c0e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009c12:	9801      	ldr	r0, [sp, #4]
 8009c14:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8009c18:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8009c1c:	bfac      	ite	ge
 8009c1e:	2000      	movge	r0, #0
 8009c20:	2001      	movlt	r0, #1
 8009c22:	b002      	add	sp, #8
 8009c24:	4770      	bx	lr
	...

08009c28 <__ieee754_expf>:
 8009c28:	ee10 2a10 	vmov	r2, s0
 8009c2c:	f022 4300 	bic.w	r3, r2, #2147483648	; 0x80000000
 8009c30:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8009c34:	d902      	bls.n	8009c3c <__ieee754_expf+0x14>
 8009c36:	ee30 0a00 	vadd.f32	s0, s0, s0
 8009c3a:	4770      	bx	lr
 8009c3c:	ea4f 71d2 	mov.w	r1, r2, lsr #31
 8009c40:	d106      	bne.n	8009c50 <__ieee754_expf+0x28>
 8009c42:	eddf 7a4e 	vldr	s15, [pc, #312]	; 8009d7c <__ieee754_expf+0x154>
 8009c46:	2900      	cmp	r1, #0
 8009c48:	bf18      	it	ne
 8009c4a:	eeb0 0a67 	vmovne.f32	s0, s15
 8009c4e:	4770      	bx	lr
 8009c50:	484b      	ldr	r0, [pc, #300]	; (8009d80 <__ieee754_expf+0x158>)
 8009c52:	4282      	cmp	r2, r0
 8009c54:	dd02      	ble.n	8009c5c <__ieee754_expf+0x34>
 8009c56:	2000      	movs	r0, #0
 8009c58:	f000 b8d0 	b.w	8009dfc <__math_oflowf>
 8009c5c:	2a00      	cmp	r2, #0
 8009c5e:	da05      	bge.n	8009c6c <__ieee754_expf+0x44>
 8009c60:	4a48      	ldr	r2, [pc, #288]	; (8009d84 <__ieee754_expf+0x15c>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d902      	bls.n	8009c6c <__ieee754_expf+0x44>
 8009c66:	2000      	movs	r0, #0
 8009c68:	f000 b8c2 	b.w	8009df0 <__math_uflowf>
 8009c6c:	4a46      	ldr	r2, [pc, #280]	; (8009d88 <__ieee754_expf+0x160>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8009c74:	d952      	bls.n	8009d1c <__ieee754_expf+0xf4>
 8009c76:	4a45      	ldr	r2, [pc, #276]	; (8009d8c <__ieee754_expf+0x164>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	ea4f 0281 	mov.w	r2, r1, lsl #2
 8009c7e:	d834      	bhi.n	8009cea <__ieee754_expf+0xc2>
 8009c80:	4b43      	ldr	r3, [pc, #268]	; (8009d90 <__ieee754_expf+0x168>)
 8009c82:	4413      	add	r3, r2
 8009c84:	ed93 7a00 	vldr	s14, [r3]
 8009c88:	4b42      	ldr	r3, [pc, #264]	; (8009d94 <__ieee754_expf+0x16c>)
 8009c8a:	4413      	add	r3, r2
 8009c8c:	ee30 7a47 	vsub.f32	s14, s0, s14
 8009c90:	f1c1 0201 	rsb	r2, r1, #1
 8009c94:	edd3 7a00 	vldr	s15, [r3]
 8009c98:	1a52      	subs	r2, r2, r1
 8009c9a:	ee37 0a67 	vsub.f32	s0, s14, s15
 8009c9e:	ee20 6a00 	vmul.f32	s12, s0, s0
 8009ca2:	ed9f 5a3d 	vldr	s10, [pc, #244]	; 8009d98 <__ieee754_expf+0x170>
 8009ca6:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8009d9c <__ieee754_expf+0x174>
 8009caa:	eee6 6a05 	vfma.f32	s13, s12, s10
 8009cae:	ed9f 5a3c 	vldr	s10, [pc, #240]	; 8009da0 <__ieee754_expf+0x178>
 8009cb2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009cb6:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8009da4 <__ieee754_expf+0x17c>
 8009cba:	eee5 6a06 	vfma.f32	s13, s10, s12
 8009cbe:	ed9f 5a3a 	vldr	s10, [pc, #232]	; 8009da8 <__ieee754_expf+0x180>
 8009cc2:	eea6 5a86 	vfma.f32	s10, s13, s12
 8009cc6:	eef0 6a40 	vmov.f32	s13, s0
 8009cca:	eee5 6a46 	vfms.f32	s13, s10, s12
 8009cce:	eeb0 6a00 	vmov.f32	s12, #0	; 0x40000000  2.0
 8009cd2:	ee20 5a26 	vmul.f32	s10, s0, s13
 8009cd6:	bb92      	cbnz	r2, 8009d3e <__ieee754_expf+0x116>
 8009cd8:	ee76 6ac6 	vsub.f32	s13, s13, s12
 8009cdc:	eec5 7a26 	vdiv.f32	s15, s10, s13
 8009ce0:	ee37 0ac0 	vsub.f32	s0, s15, s0
 8009ce4:	ee35 0ac0 	vsub.f32	s0, s11, s0
 8009ce8:	4770      	bx	lr
 8009cea:	4b30      	ldr	r3, [pc, #192]	; (8009dac <__ieee754_expf+0x184>)
 8009cec:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8009db0 <__ieee754_expf+0x188>
 8009cf0:	eddf 6a30 	vldr	s13, [pc, #192]	; 8009db4 <__ieee754_expf+0x18c>
 8009cf4:	4413      	add	r3, r2
 8009cf6:	edd3 7a00 	vldr	s15, [r3]
 8009cfa:	eee0 7a07 	vfma.f32	s15, s0, s14
 8009cfe:	eeb0 7a40 	vmov.f32	s14, s0
 8009d02:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8009d06:	ee17 2a90 	vmov	r2, s15
 8009d0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8009d0e:	eea7 7ae6 	vfms.f32	s14, s15, s13
 8009d12:	eddf 6a29 	vldr	s13, [pc, #164]	; 8009db8 <__ieee754_expf+0x190>
 8009d16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8009d1a:	e7be      	b.n	8009c9a <__ieee754_expf+0x72>
 8009d1c:	f1b3 5f50 	cmp.w	r3, #872415232	; 0x34000000
 8009d20:	d20b      	bcs.n	8009d3a <__ieee754_expf+0x112>
 8009d22:	eddf 6a26 	vldr	s13, [pc, #152]	; 8009dbc <__ieee754_expf+0x194>
 8009d26:	ee70 6a26 	vadd.f32	s13, s0, s13
 8009d2a:	eef4 6ae5 	vcmpe.f32	s13, s11
 8009d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8009d32:	dd02      	ble.n	8009d3a <__ieee754_expf+0x112>
 8009d34:	ee30 0a25 	vadd.f32	s0, s0, s11
 8009d38:	4770      	bx	lr
 8009d3a:	2200      	movs	r2, #0
 8009d3c:	e7af      	b.n	8009c9e <__ieee754_expf+0x76>
 8009d3e:	ee36 6a66 	vsub.f32	s12, s12, s13
 8009d42:	f112 0f7d 	cmn.w	r2, #125	; 0x7d
 8009d46:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8009d4a:	bfb8      	it	lt
 8009d4c:	3264      	addlt	r2, #100	; 0x64
 8009d4e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8009d52:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8009d56:	ee75 7ae7 	vsub.f32	s15, s11, s15
 8009d5a:	ee17 3a90 	vmov	r3, s15
 8009d5e:	bfab      	itete	ge
 8009d60:	eb03 53c2 	addge.w	r3, r3, r2, lsl #23
 8009d64:	eb03 53c2 	addlt.w	r3, r3, r2, lsl #23
 8009d68:	ee00 3a10 	vmovge	s0, r3
 8009d6c:	eddf 7a14 	vldrlt	s15, [pc, #80]	; 8009dc0 <__ieee754_expf+0x198>
 8009d70:	bfbc      	itt	lt
 8009d72:	ee00 3a10 	vmovlt	s0, r3
 8009d76:	ee20 0a27 	vmullt.f32	s0, s0, s15
 8009d7a:	4770      	bx	lr
 8009d7c:	00000000 	.word	0x00000000
 8009d80:	42b17217 	.word	0x42b17217
 8009d84:	42cff1b5 	.word	0x42cff1b5
 8009d88:	3eb17218 	.word	0x3eb17218
 8009d8c:	3f851591 	.word	0x3f851591
 8009d90:	080889bc 	.word	0x080889bc
 8009d94:	080889c4 	.word	0x080889c4
 8009d98:	3331bb4c 	.word	0x3331bb4c
 8009d9c:	b5ddea0e 	.word	0xb5ddea0e
 8009da0:	388ab355 	.word	0x388ab355
 8009da4:	bb360b61 	.word	0xbb360b61
 8009da8:	3e2aaaab 	.word	0x3e2aaaab
 8009dac:	080889b4 	.word	0x080889b4
 8009db0:	3fb8aa3b 	.word	0x3fb8aa3b
 8009db4:	3f317180 	.word	0x3f317180
 8009db8:	3717f7d1 	.word	0x3717f7d1
 8009dbc:	7149f2ca 	.word	0x7149f2ca
 8009dc0:	0d800000 	.word	0x0d800000

08009dc4 <with_errnof>:
 8009dc4:	b513      	push	{r0, r1, r4, lr}
 8009dc6:	4604      	mov	r4, r0
 8009dc8:	ed8d 0a01 	vstr	s0, [sp, #4]
 8009dcc:	f7ff fb72 	bl	80094b4 <__errno>
 8009dd0:	ed9d 0a01 	vldr	s0, [sp, #4]
 8009dd4:	6004      	str	r4, [r0, #0]
 8009dd6:	b002      	add	sp, #8
 8009dd8:	bd10      	pop	{r4, pc}

08009dda <xflowf>:
 8009dda:	b130      	cbz	r0, 8009dea <xflowf+0x10>
 8009ddc:	eef1 7a40 	vneg.f32	s15, s0
 8009de0:	ee27 0a80 	vmul.f32	s0, s15, s0
 8009de4:	2022      	movs	r0, #34	; 0x22
 8009de6:	f7ff bfed 	b.w	8009dc4 <with_errnof>
 8009dea:	eef0 7a40 	vmov.f32	s15, s0
 8009dee:	e7f7      	b.n	8009de0 <xflowf+0x6>

08009df0 <__math_uflowf>:
 8009df0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009df8 <__math_uflowf+0x8>
 8009df4:	f7ff bff1 	b.w	8009dda <xflowf>
 8009df8:	10000000 	.word	0x10000000

08009dfc <__math_oflowf>:
 8009dfc:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8009e04 <__math_oflowf+0x8>
 8009e00:	f7ff bfeb 	b.w	8009dda <xflowf>
 8009e04:	70000000 	.word	0x70000000

08009e08 <_init>:
 8009e08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e0a:	bf00      	nop
 8009e0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e0e:	bc08      	pop	{r3}
 8009e10:	469e      	mov	lr, r3
 8009e12:	4770      	bx	lr

08009e14 <_fini>:
 8009e14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009e16:	bf00      	nop
 8009e18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8009e1a:	bc08      	pop	{r3}
 8009e1c:	469e      	mov	lr, r3
 8009e1e:	4770      	bx	lr
